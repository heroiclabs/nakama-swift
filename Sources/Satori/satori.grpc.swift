//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: satori.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


///*
/// The GRPC protocol service for Satori built with GRPC.
///
/// Usage: instantiate `Satori_Api_SatoriClient`, then call methods of this protocol to make API calls.
internal protocol Satori_Api_SatoriClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Satori_Api_SatoriClientInterceptorFactoryProtocol? { get }

  func authenticate(
    _ request: Satori_Api_AuthenticateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Satori_Api_AuthenticateRequest, Satori_Api_Session>

  func authenticateLogout(
    _ request: Satori_Api_AuthenticateLogoutRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Satori_Api_AuthenticateLogoutRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func authenticateRefresh(
    _ request: Satori_Api_AuthenticateRefreshRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Satori_Api_AuthenticateRefreshRequest, Satori_Api_Session>

  func deleteIdentity(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>

  func event(
    _ request: Satori_Api_EventRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Satori_Api_EventRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func getExperiments(
    _ request: Satori_Api_GetExperimentsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Satori_Api_GetExperimentsRequest, Satori_Api_ExperimentList>

  func getFlags(
    _ request: Satori_Api_GetFlagsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Satori_Api_GetFlagsRequest, Satori_Api_FlagList>

  func getLiveEvents(
    _ request: Satori_Api_GetLiveEventsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Satori_Api_GetLiveEventsRequest, Satori_Api_LiveEventList>

  func healthcheck(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>

  func identify(
    _ request: Satori_Api_IdentifyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Satori_Api_IdentifyRequest, Satori_Api_Session>

  func listProperties(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Satori_Api_Properties>

  func readycheck(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>

  func updateProperties(
    _ request: Satori_Api_UpdatePropertiesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Satori_Api_UpdatePropertiesRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func getMessageList(
    _ request: Satori_Api_GetMessageListRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Satori_Api_GetMessageListRequest, Satori_Api_GetMessageListResponse>

  func updateMessage(
    _ request: Satori_Api_UpdateMessageRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Satori_Api_UpdateMessageRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func deleteMessage(
    _ request: Satori_Api_DeleteMessageRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Satori_Api_DeleteMessageRequest, SwiftProtobuf.Google_Protobuf_Empty>
}

extension Satori_Api_SatoriClientProtocol {
  internal var serviceName: String {
    return "satori.api.Satori"
  }

  /// Authenticate against the server.
  ///
  /// - Parameters:
  ///   - request: Request to send to Authenticate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func authenticate(
    _ request: Satori_Api_AuthenticateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Satori_Api_AuthenticateRequest, Satori_Api_Session> {
    return self.makeUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.authenticate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateInterceptors() ?? []
    )
  }

  /// Log out a session, invalidate a refresh token, or log out all sessions/refresh tokens for a user.
  ///
  /// - Parameters:
  ///   - request: Request to send to AuthenticateLogout.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func authenticateLogout(
    _ request: Satori_Api_AuthenticateLogoutRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Satori_Api_AuthenticateLogoutRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.authenticateLogout.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateLogoutInterceptors() ?? []
    )
  }

  /// Refresh a user's session using a refresh token retrieved from a previous authentication request.
  ///
  /// - Parameters:
  ///   - request: Request to send to AuthenticateRefresh.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func authenticateRefresh(
    _ request: Satori_Api_AuthenticateRefreshRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Satori_Api_AuthenticateRefreshRequest, Satori_Api_Session> {
    return self.makeUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.authenticateRefresh.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateRefreshInterceptors() ?? []
    )
  }

  /// Delete the caller's identity and associated data.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteIdentity.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteIdentity(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.deleteIdentity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteIdentityInterceptors() ?? []
    )
  }

  /// Publish an event for this session.
  ///
  /// - Parameters:
  ///   - request: Request to send to Event.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func event(
    _ request: Satori_Api_EventRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Satori_Api_EventRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.event.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEventInterceptors() ?? []
    )
  }

  /// Get or list all available experiments for this identity.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetExperiments.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getExperiments(
    _ request: Satori_Api_GetExperimentsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Satori_Api_GetExperimentsRequest, Satori_Api_ExperimentList> {
    return self.makeUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.getExperiments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetExperimentsInterceptors() ?? []
    )
  }

  /// List all available flags for this identity.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetFlags.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getFlags(
    _ request: Satori_Api_GetFlagsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Satori_Api_GetFlagsRequest, Satori_Api_FlagList> {
    return self.makeUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.getFlags.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFlagsInterceptors() ?? []
    )
  }

  /// List available live events.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetLiveEvents.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getLiveEvents(
    _ request: Satori_Api_GetLiveEventsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Satori_Api_GetLiveEventsRequest, Satori_Api_LiveEventList> {
    return self.makeUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.getLiveEvents.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLiveEventsInterceptors() ?? []
    )
  }

  /// A healthcheck which load balancers can use to check the service.
  ///
  /// - Parameters:
  ///   - request: Request to send to Healthcheck.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func healthcheck(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.healthcheck.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHealthcheckInterceptors() ?? []
    )
  }

  /// Enrich/replace the current session with new identifier.
  ///
  /// - Parameters:
  ///   - request: Request to send to Identify.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func identify(
    _ request: Satori_Api_IdentifyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Satori_Api_IdentifyRequest, Satori_Api_Session> {
    return self.makeUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.identify.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIdentifyInterceptors() ?? []
    )
  }

  /// List properties associated with this identity.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListProperties.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listProperties(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Satori_Api_Properties> {
    return self.makeUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.listProperties.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPropertiesInterceptors() ?? []
    )
  }

  /// A readycheck which load balancers can use to check the service.
  ///
  /// - Parameters:
  ///   - request: Request to send to Readycheck.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func readycheck(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.readycheck.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReadycheckInterceptors() ?? []
    )
  }

  /// Update identity properties.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateProperties.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateProperties(
    _ request: Satori_Api_UpdatePropertiesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Satori_Api_UpdatePropertiesRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.updateProperties.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdatePropertiesInterceptors() ?? []
    )
  }

  /// Get the list of messages for the identity.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMessageList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getMessageList(
    _ request: Satori_Api_GetMessageListRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Satori_Api_GetMessageListRequest, Satori_Api_GetMessageListResponse> {
    return self.makeUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.getMessageList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMessageListInterceptors() ?? []
    )
  }

  /// Updates a message for an identity.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateMessage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateMessage(
    _ request: Satori_Api_UpdateMessageRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Satori_Api_UpdateMessageRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.updateMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateMessageInterceptors() ?? []
    )
  }

  /// Deletes a message for an identity.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteMessage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteMessage(
    _ request: Satori_Api_DeleteMessageRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Satori_Api_DeleteMessageRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.deleteMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteMessageInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Satori_Api_SatoriClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Satori_Api_SatoriNIOClient")
internal final class Satori_Api_SatoriClient: Satori_Api_SatoriClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Satori_Api_SatoriClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Satori_Api_SatoriClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the satori.api.Satori service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Satori_Api_SatoriClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Satori_Api_SatoriNIOClient: Satori_Api_SatoriClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Satori_Api_SatoriClientInterceptorFactoryProtocol?

  /// Creates a client for the satori.api.Satori service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Satori_Api_SatoriClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

///*
/// The GRPC protocol service for Satori built with GRPC.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Satori_Api_SatoriAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Satori_Api_SatoriClientInterceptorFactoryProtocol? { get }

  func makeAuthenticateCall(
    _ request: Satori_Api_AuthenticateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Satori_Api_AuthenticateRequest, Satori_Api_Session>

  func makeAuthenticateLogoutCall(
    _ request: Satori_Api_AuthenticateLogoutRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Satori_Api_AuthenticateLogoutRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeAuthenticateRefreshCall(
    _ request: Satori_Api_AuthenticateRefreshRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Satori_Api_AuthenticateRefreshRequest, Satori_Api_Session>

  func makeDeleteIdentityCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>

  func makeEventCall(
    _ request: Satori_Api_EventRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Satori_Api_EventRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeGetExperimentsCall(
    _ request: Satori_Api_GetExperimentsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Satori_Api_GetExperimentsRequest, Satori_Api_ExperimentList>

  func makeGetFlagsCall(
    _ request: Satori_Api_GetFlagsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Satori_Api_GetFlagsRequest, Satori_Api_FlagList>

  func makeGetLiveEventsCall(
    _ request: Satori_Api_GetLiveEventsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Satori_Api_GetLiveEventsRequest, Satori_Api_LiveEventList>

  func makeHealthcheckCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>

  func makeIdentifyCall(
    _ request: Satori_Api_IdentifyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Satori_Api_IdentifyRequest, Satori_Api_Session>

  func makeListPropertiesCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Satori_Api_Properties>

  func makeReadycheckCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>

  func makeUpdatePropertiesCall(
    _ request: Satori_Api_UpdatePropertiesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Satori_Api_UpdatePropertiesRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeGetMessageListCall(
    _ request: Satori_Api_GetMessageListRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Satori_Api_GetMessageListRequest, Satori_Api_GetMessageListResponse>

  func makeUpdateMessageCall(
    _ request: Satori_Api_UpdateMessageRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Satori_Api_UpdateMessageRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeDeleteMessageCall(
    _ request: Satori_Api_DeleteMessageRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Satori_Api_DeleteMessageRequest, SwiftProtobuf.Google_Protobuf_Empty>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Satori_Api_SatoriAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Satori_Api_SatoriClientMetadata.serviceDescriptor
  }

  internal var interceptors: Satori_Api_SatoriClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeAuthenticateCall(
    _ request: Satori_Api_AuthenticateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Satori_Api_AuthenticateRequest, Satori_Api_Session> {
    return self.makeAsyncUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.authenticate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateInterceptors() ?? []
    )
  }

  internal func makeAuthenticateLogoutCall(
    _ request: Satori_Api_AuthenticateLogoutRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Satori_Api_AuthenticateLogoutRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.authenticateLogout.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateLogoutInterceptors() ?? []
    )
  }

  internal func makeAuthenticateRefreshCall(
    _ request: Satori_Api_AuthenticateRefreshRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Satori_Api_AuthenticateRefreshRequest, Satori_Api_Session> {
    return self.makeAsyncUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.authenticateRefresh.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateRefreshInterceptors() ?? []
    )
  }

  internal func makeDeleteIdentityCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.deleteIdentity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteIdentityInterceptors() ?? []
    )
  }

  internal func makeEventCall(
    _ request: Satori_Api_EventRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Satori_Api_EventRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.event.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEventInterceptors() ?? []
    )
  }

  internal func makeGetExperimentsCall(
    _ request: Satori_Api_GetExperimentsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Satori_Api_GetExperimentsRequest, Satori_Api_ExperimentList> {
    return self.makeAsyncUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.getExperiments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetExperimentsInterceptors() ?? []
    )
  }

  internal func makeGetFlagsCall(
    _ request: Satori_Api_GetFlagsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Satori_Api_GetFlagsRequest, Satori_Api_FlagList> {
    return self.makeAsyncUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.getFlags.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFlagsInterceptors() ?? []
    )
  }

  internal func makeGetLiveEventsCall(
    _ request: Satori_Api_GetLiveEventsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Satori_Api_GetLiveEventsRequest, Satori_Api_LiveEventList> {
    return self.makeAsyncUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.getLiveEvents.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLiveEventsInterceptors() ?? []
    )
  }

  internal func makeHealthcheckCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.healthcheck.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHealthcheckInterceptors() ?? []
    )
  }

  internal func makeIdentifyCall(
    _ request: Satori_Api_IdentifyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Satori_Api_IdentifyRequest, Satori_Api_Session> {
    return self.makeAsyncUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.identify.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIdentifyInterceptors() ?? []
    )
  }

  internal func makeListPropertiesCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Satori_Api_Properties> {
    return self.makeAsyncUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.listProperties.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPropertiesInterceptors() ?? []
    )
  }

  internal func makeReadycheckCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.readycheck.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReadycheckInterceptors() ?? []
    )
  }

  internal func makeUpdatePropertiesCall(
    _ request: Satori_Api_UpdatePropertiesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Satori_Api_UpdatePropertiesRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.updateProperties.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdatePropertiesInterceptors() ?? []
    )
  }

  internal func makeGetMessageListCall(
    _ request: Satori_Api_GetMessageListRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Satori_Api_GetMessageListRequest, Satori_Api_GetMessageListResponse> {
    return self.makeAsyncUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.getMessageList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMessageListInterceptors() ?? []
    )
  }

  internal func makeUpdateMessageCall(
    _ request: Satori_Api_UpdateMessageRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Satori_Api_UpdateMessageRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.updateMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateMessageInterceptors() ?? []
    )
  }

  internal func makeDeleteMessageCall(
    _ request: Satori_Api_DeleteMessageRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Satori_Api_DeleteMessageRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.deleteMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteMessageInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Satori_Api_SatoriAsyncClientProtocol {
  internal func authenticate(
    _ request: Satori_Api_AuthenticateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Satori_Api_Session {
    return try await self.performAsyncUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.authenticate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateInterceptors() ?? []
    )
  }

  internal func authenticateLogout(
    _ request: Satori_Api_AuthenticateLogoutRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.authenticateLogout.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateLogoutInterceptors() ?? []
    )
  }

  internal func authenticateRefresh(
    _ request: Satori_Api_AuthenticateRefreshRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Satori_Api_Session {
    return try await self.performAsyncUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.authenticateRefresh.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateRefreshInterceptors() ?? []
    )
  }

  internal func deleteIdentity(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.deleteIdentity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteIdentityInterceptors() ?? []
    )
  }

  internal func event(
    _ request: Satori_Api_EventRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.event.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEventInterceptors() ?? []
    )
  }

  internal func getExperiments(
    _ request: Satori_Api_GetExperimentsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Satori_Api_ExperimentList {
    return try await self.performAsyncUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.getExperiments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetExperimentsInterceptors() ?? []
    )
  }

  internal func getFlags(
    _ request: Satori_Api_GetFlagsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Satori_Api_FlagList {
    return try await self.performAsyncUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.getFlags.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFlagsInterceptors() ?? []
    )
  }

  internal func getLiveEvents(
    _ request: Satori_Api_GetLiveEventsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Satori_Api_LiveEventList {
    return try await self.performAsyncUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.getLiveEvents.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLiveEventsInterceptors() ?? []
    )
  }

  internal func healthcheck(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.healthcheck.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHealthcheckInterceptors() ?? []
    )
  }

  internal func identify(
    _ request: Satori_Api_IdentifyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Satori_Api_Session {
    return try await self.performAsyncUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.identify.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIdentifyInterceptors() ?? []
    )
  }

  internal func listProperties(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Satori_Api_Properties {
    return try await self.performAsyncUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.listProperties.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPropertiesInterceptors() ?? []
    )
  }

  internal func readycheck(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.readycheck.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReadycheckInterceptors() ?? []
    )
  }

  internal func updateProperties(
    _ request: Satori_Api_UpdatePropertiesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.updateProperties.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdatePropertiesInterceptors() ?? []
    )
  }

  internal func getMessageList(
    _ request: Satori_Api_GetMessageListRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Satori_Api_GetMessageListResponse {
    return try await self.performAsyncUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.getMessageList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMessageListInterceptors() ?? []
    )
  }

  internal func updateMessage(
    _ request: Satori_Api_UpdateMessageRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.updateMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateMessageInterceptors() ?? []
    )
  }

  internal func deleteMessage(
    _ request: Satori_Api_DeleteMessageRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Satori_Api_SatoriClientMetadata.Methods.deleteMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteMessageInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Satori_Api_SatoriAsyncClient: Satori_Api_SatoriAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Satori_Api_SatoriClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Satori_Api_SatoriClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Satori_Api_SatoriClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'authenticate'.
  func makeAuthenticateInterceptors() -> [ClientInterceptor<Satori_Api_AuthenticateRequest, Satori_Api_Session>]

  /// - Returns: Interceptors to use when invoking 'authenticateLogout'.
  func makeAuthenticateLogoutInterceptors() -> [ClientInterceptor<Satori_Api_AuthenticateLogoutRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'authenticateRefresh'.
  func makeAuthenticateRefreshInterceptors() -> [ClientInterceptor<Satori_Api_AuthenticateRefreshRequest, Satori_Api_Session>]

  /// - Returns: Interceptors to use when invoking 'deleteIdentity'.
  func makeDeleteIdentityInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'event'.
  func makeEventInterceptors() -> [ClientInterceptor<Satori_Api_EventRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'getExperiments'.
  func makeGetExperimentsInterceptors() -> [ClientInterceptor<Satori_Api_GetExperimentsRequest, Satori_Api_ExperimentList>]

  /// - Returns: Interceptors to use when invoking 'getFlags'.
  func makeGetFlagsInterceptors() -> [ClientInterceptor<Satori_Api_GetFlagsRequest, Satori_Api_FlagList>]

  /// - Returns: Interceptors to use when invoking 'getLiveEvents'.
  func makeGetLiveEventsInterceptors() -> [ClientInterceptor<Satori_Api_GetLiveEventsRequest, Satori_Api_LiveEventList>]

  /// - Returns: Interceptors to use when invoking 'healthcheck'.
  func makeHealthcheckInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'identify'.
  func makeIdentifyInterceptors() -> [ClientInterceptor<Satori_Api_IdentifyRequest, Satori_Api_Session>]

  /// - Returns: Interceptors to use when invoking 'listProperties'.
  func makeListPropertiesInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Satori_Api_Properties>]

  /// - Returns: Interceptors to use when invoking 'readycheck'.
  func makeReadycheckInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'updateProperties'.
  func makeUpdatePropertiesInterceptors() -> [ClientInterceptor<Satori_Api_UpdatePropertiesRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'getMessageList'.
  func makeGetMessageListInterceptors() -> [ClientInterceptor<Satori_Api_GetMessageListRequest, Satori_Api_GetMessageListResponse>]

  /// - Returns: Interceptors to use when invoking 'updateMessage'.
  func makeUpdateMessageInterceptors() -> [ClientInterceptor<Satori_Api_UpdateMessageRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'deleteMessage'.
  func makeDeleteMessageInterceptors() -> [ClientInterceptor<Satori_Api_DeleteMessageRequest, SwiftProtobuf.Google_Protobuf_Empty>]
}

internal enum Satori_Api_SatoriClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Satori",
    fullName: "satori.api.Satori",
    methods: [
      Satori_Api_SatoriClientMetadata.Methods.authenticate,
      Satori_Api_SatoriClientMetadata.Methods.authenticateLogout,
      Satori_Api_SatoriClientMetadata.Methods.authenticateRefresh,
      Satori_Api_SatoriClientMetadata.Methods.deleteIdentity,
      Satori_Api_SatoriClientMetadata.Methods.event,
      Satori_Api_SatoriClientMetadata.Methods.getExperiments,
      Satori_Api_SatoriClientMetadata.Methods.getFlags,
      Satori_Api_SatoriClientMetadata.Methods.getLiveEvents,
      Satori_Api_SatoriClientMetadata.Methods.healthcheck,
      Satori_Api_SatoriClientMetadata.Methods.identify,
      Satori_Api_SatoriClientMetadata.Methods.listProperties,
      Satori_Api_SatoriClientMetadata.Methods.readycheck,
      Satori_Api_SatoriClientMetadata.Methods.updateProperties,
      Satori_Api_SatoriClientMetadata.Methods.getMessageList,
      Satori_Api_SatoriClientMetadata.Methods.updateMessage,
      Satori_Api_SatoriClientMetadata.Methods.deleteMessage,
    ]
  )

  internal enum Methods {
    internal static let authenticate = GRPCMethodDescriptor(
      name: "Authenticate",
      path: "/satori.api.Satori/Authenticate",
      type: GRPCCallType.unary
    )

    internal static let authenticateLogout = GRPCMethodDescriptor(
      name: "AuthenticateLogout",
      path: "/satori.api.Satori/AuthenticateLogout",
      type: GRPCCallType.unary
    )

    internal static let authenticateRefresh = GRPCMethodDescriptor(
      name: "AuthenticateRefresh",
      path: "/satori.api.Satori/AuthenticateRefresh",
      type: GRPCCallType.unary
    )

    internal static let deleteIdentity = GRPCMethodDescriptor(
      name: "DeleteIdentity",
      path: "/satori.api.Satori/DeleteIdentity",
      type: GRPCCallType.unary
    )

    internal static let event = GRPCMethodDescriptor(
      name: "Event",
      path: "/satori.api.Satori/Event",
      type: GRPCCallType.unary
    )

    internal static let getExperiments = GRPCMethodDescriptor(
      name: "GetExperiments",
      path: "/satori.api.Satori/GetExperiments",
      type: GRPCCallType.unary
    )

    internal static let getFlags = GRPCMethodDescriptor(
      name: "GetFlags",
      path: "/satori.api.Satori/GetFlags",
      type: GRPCCallType.unary
    )

    internal static let getLiveEvents = GRPCMethodDescriptor(
      name: "GetLiveEvents",
      path: "/satori.api.Satori/GetLiveEvents",
      type: GRPCCallType.unary
    )

    internal static let healthcheck = GRPCMethodDescriptor(
      name: "Healthcheck",
      path: "/satori.api.Satori/Healthcheck",
      type: GRPCCallType.unary
    )

    internal static let identify = GRPCMethodDescriptor(
      name: "Identify",
      path: "/satori.api.Satori/Identify",
      type: GRPCCallType.unary
    )

    internal static let listProperties = GRPCMethodDescriptor(
      name: "ListProperties",
      path: "/satori.api.Satori/ListProperties",
      type: GRPCCallType.unary
    )

    internal static let readycheck = GRPCMethodDescriptor(
      name: "Readycheck",
      path: "/satori.api.Satori/Readycheck",
      type: GRPCCallType.unary
    )

    internal static let updateProperties = GRPCMethodDescriptor(
      name: "UpdateProperties",
      path: "/satori.api.Satori/UpdateProperties",
      type: GRPCCallType.unary
    )

    internal static let getMessageList = GRPCMethodDescriptor(
      name: "GetMessageList",
      path: "/satori.api.Satori/GetMessageList",
      type: GRPCCallType.unary
    )

    internal static let updateMessage = GRPCMethodDescriptor(
      name: "UpdateMessage",
      path: "/satori.api.Satori/UpdateMessage",
      type: GRPCCallType.unary
    )

    internal static let deleteMessage = GRPCMethodDescriptor(
      name: "DeleteMessage",
      path: "/satori.api.Satori/DeleteMessage",
      type: GRPCCallType.unary
    )
  }
}

///*
/// The GRPC protocol service for Satori built with GRPC.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Satori_Api_SatoriProvider: CallHandlerProvider {
  var interceptors: Satori_Api_SatoriServerInterceptorFactoryProtocol? { get }

  /// Authenticate against the server.
  func authenticate(request: Satori_Api_AuthenticateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Satori_Api_Session>

  /// Log out a session, invalidate a refresh token, or log out all sessions/refresh tokens for a user.
  func authenticateLogout(request: Satori_Api_AuthenticateLogoutRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Refresh a user's session using a refresh token retrieved from a previous authentication request.
  func authenticateRefresh(request: Satori_Api_AuthenticateRefreshRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Satori_Api_Session>

  /// Delete the caller's identity and associated data.
  func deleteIdentity(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Publish an event for this session.
  func event(request: Satori_Api_EventRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Get or list all available experiments for this identity.
  func getExperiments(request: Satori_Api_GetExperimentsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Satori_Api_ExperimentList>

  /// List all available flags for this identity.
  func getFlags(request: Satori_Api_GetFlagsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Satori_Api_FlagList>

  /// List available live events.
  func getLiveEvents(request: Satori_Api_GetLiveEventsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Satori_Api_LiveEventList>

  /// A healthcheck which load balancers can use to check the service.
  func healthcheck(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Enrich/replace the current session with new identifier.
  func identify(request: Satori_Api_IdentifyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Satori_Api_Session>

  /// List properties associated with this identity.
  func listProperties(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Satori_Api_Properties>

  /// A readycheck which load balancers can use to check the service.
  func readycheck(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Update identity properties.
  func updateProperties(request: Satori_Api_UpdatePropertiesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Get the list of messages for the identity.
  func getMessageList(request: Satori_Api_GetMessageListRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Satori_Api_GetMessageListResponse>

  /// Updates a message for an identity.
  func updateMessage(request: Satori_Api_UpdateMessageRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Deletes a message for an identity.
  func deleteMessage(request: Satori_Api_DeleteMessageRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
}

extension Satori_Api_SatoriProvider {
  internal var serviceName: Substring {
    return Satori_Api_SatoriServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Authenticate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Satori_Api_AuthenticateRequest>(),
        responseSerializer: ProtobufSerializer<Satori_Api_Session>(),
        interceptors: self.interceptors?.makeAuthenticateInterceptors() ?? [],
        userFunction: self.authenticate(request:context:)
      )

    case "AuthenticateLogout":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Satori_Api_AuthenticateLogoutRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeAuthenticateLogoutInterceptors() ?? [],
        userFunction: self.authenticateLogout(request:context:)
      )

    case "AuthenticateRefresh":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Satori_Api_AuthenticateRefreshRequest>(),
        responseSerializer: ProtobufSerializer<Satori_Api_Session>(),
        interceptors: self.interceptors?.makeAuthenticateRefreshInterceptors() ?? [],
        userFunction: self.authenticateRefresh(request:context:)
      )

    case "DeleteIdentity":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteIdentityInterceptors() ?? [],
        userFunction: self.deleteIdentity(request:context:)
      )

    case "Event":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Satori_Api_EventRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeEventInterceptors() ?? [],
        userFunction: self.event(request:context:)
      )

    case "GetExperiments":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Satori_Api_GetExperimentsRequest>(),
        responseSerializer: ProtobufSerializer<Satori_Api_ExperimentList>(),
        interceptors: self.interceptors?.makeGetExperimentsInterceptors() ?? [],
        userFunction: self.getExperiments(request:context:)
      )

    case "GetFlags":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Satori_Api_GetFlagsRequest>(),
        responseSerializer: ProtobufSerializer<Satori_Api_FlagList>(),
        interceptors: self.interceptors?.makeGetFlagsInterceptors() ?? [],
        userFunction: self.getFlags(request:context:)
      )

    case "GetLiveEvents":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Satori_Api_GetLiveEventsRequest>(),
        responseSerializer: ProtobufSerializer<Satori_Api_LiveEventList>(),
        interceptors: self.interceptors?.makeGetLiveEventsInterceptors() ?? [],
        userFunction: self.getLiveEvents(request:context:)
      )

    case "Healthcheck":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeHealthcheckInterceptors() ?? [],
        userFunction: self.healthcheck(request:context:)
      )

    case "Identify":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Satori_Api_IdentifyRequest>(),
        responseSerializer: ProtobufSerializer<Satori_Api_Session>(),
        interceptors: self.interceptors?.makeIdentifyInterceptors() ?? [],
        userFunction: self.identify(request:context:)
      )

    case "ListProperties":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Satori_Api_Properties>(),
        interceptors: self.interceptors?.makeListPropertiesInterceptors() ?? [],
        userFunction: self.listProperties(request:context:)
      )

    case "Readycheck":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeReadycheckInterceptors() ?? [],
        userFunction: self.readycheck(request:context:)
      )

    case "UpdateProperties":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Satori_Api_UpdatePropertiesRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeUpdatePropertiesInterceptors() ?? [],
        userFunction: self.updateProperties(request:context:)
      )

    case "GetMessageList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Satori_Api_GetMessageListRequest>(),
        responseSerializer: ProtobufSerializer<Satori_Api_GetMessageListResponse>(),
        interceptors: self.interceptors?.makeGetMessageListInterceptors() ?? [],
        userFunction: self.getMessageList(request:context:)
      )

    case "UpdateMessage":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Satori_Api_UpdateMessageRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeUpdateMessageInterceptors() ?? [],
        userFunction: self.updateMessage(request:context:)
      )

    case "DeleteMessage":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Satori_Api_DeleteMessageRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteMessageInterceptors() ?? [],
        userFunction: self.deleteMessage(request:context:)
      )

    default:
      return nil
    }
  }
}

///*
/// The GRPC protocol service for Satori built with GRPC.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Satori_Api_SatoriAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Satori_Api_SatoriServerInterceptorFactoryProtocol? { get }

  /// Authenticate against the server.
  func authenticate(
    request: Satori_Api_AuthenticateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Satori_Api_Session

  /// Log out a session, invalidate a refresh token, or log out all sessions/refresh tokens for a user.
  func authenticateLogout(
    request: Satori_Api_AuthenticateLogoutRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Refresh a user's session using a refresh token retrieved from a previous authentication request.
  func authenticateRefresh(
    request: Satori_Api_AuthenticateRefreshRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Satori_Api_Session

  /// Delete the caller's identity and associated data.
  func deleteIdentity(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Publish an event for this session.
  func event(
    request: Satori_Api_EventRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Get or list all available experiments for this identity.
  func getExperiments(
    request: Satori_Api_GetExperimentsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Satori_Api_ExperimentList

  /// List all available flags for this identity.
  func getFlags(
    request: Satori_Api_GetFlagsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Satori_Api_FlagList

  /// List available live events.
  func getLiveEvents(
    request: Satori_Api_GetLiveEventsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Satori_Api_LiveEventList

  /// A healthcheck which load balancers can use to check the service.
  func healthcheck(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Enrich/replace the current session with new identifier.
  func identify(
    request: Satori_Api_IdentifyRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Satori_Api_Session

  /// List properties associated with this identity.
  func listProperties(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> Satori_Api_Properties

  /// A readycheck which load balancers can use to check the service.
  func readycheck(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Update identity properties.
  func updateProperties(
    request: Satori_Api_UpdatePropertiesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Get the list of messages for the identity.
  func getMessageList(
    request: Satori_Api_GetMessageListRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Satori_Api_GetMessageListResponse

  /// Updates a message for an identity.
  func updateMessage(
    request: Satori_Api_UpdateMessageRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Deletes a message for an identity.
  func deleteMessage(
    request: Satori_Api_DeleteMessageRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Satori_Api_SatoriAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Satori_Api_SatoriServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Satori_Api_SatoriServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Satori_Api_SatoriServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Authenticate":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Satori_Api_AuthenticateRequest>(),
        responseSerializer: ProtobufSerializer<Satori_Api_Session>(),
        interceptors: self.interceptors?.makeAuthenticateInterceptors() ?? [],
        wrapping: { try await self.authenticate(request: $0, context: $1) }
      )

    case "AuthenticateLogout":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Satori_Api_AuthenticateLogoutRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeAuthenticateLogoutInterceptors() ?? [],
        wrapping: { try await self.authenticateLogout(request: $0, context: $1) }
      )

    case "AuthenticateRefresh":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Satori_Api_AuthenticateRefreshRequest>(),
        responseSerializer: ProtobufSerializer<Satori_Api_Session>(),
        interceptors: self.interceptors?.makeAuthenticateRefreshInterceptors() ?? [],
        wrapping: { try await self.authenticateRefresh(request: $0, context: $1) }
      )

    case "DeleteIdentity":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteIdentityInterceptors() ?? [],
        wrapping: { try await self.deleteIdentity(request: $0, context: $1) }
      )

    case "Event":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Satori_Api_EventRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeEventInterceptors() ?? [],
        wrapping: { try await self.event(request: $0, context: $1) }
      )

    case "GetExperiments":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Satori_Api_GetExperimentsRequest>(),
        responseSerializer: ProtobufSerializer<Satori_Api_ExperimentList>(),
        interceptors: self.interceptors?.makeGetExperimentsInterceptors() ?? [],
        wrapping: { try await self.getExperiments(request: $0, context: $1) }
      )

    case "GetFlags":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Satori_Api_GetFlagsRequest>(),
        responseSerializer: ProtobufSerializer<Satori_Api_FlagList>(),
        interceptors: self.interceptors?.makeGetFlagsInterceptors() ?? [],
        wrapping: { try await self.getFlags(request: $0, context: $1) }
      )

    case "GetLiveEvents":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Satori_Api_GetLiveEventsRequest>(),
        responseSerializer: ProtobufSerializer<Satori_Api_LiveEventList>(),
        interceptors: self.interceptors?.makeGetLiveEventsInterceptors() ?? [],
        wrapping: { try await self.getLiveEvents(request: $0, context: $1) }
      )

    case "Healthcheck":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeHealthcheckInterceptors() ?? [],
        wrapping: { try await self.healthcheck(request: $0, context: $1) }
      )

    case "Identify":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Satori_Api_IdentifyRequest>(),
        responseSerializer: ProtobufSerializer<Satori_Api_Session>(),
        interceptors: self.interceptors?.makeIdentifyInterceptors() ?? [],
        wrapping: { try await self.identify(request: $0, context: $1) }
      )

    case "ListProperties":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Satori_Api_Properties>(),
        interceptors: self.interceptors?.makeListPropertiesInterceptors() ?? [],
        wrapping: { try await self.listProperties(request: $0, context: $1) }
      )

    case "Readycheck":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeReadycheckInterceptors() ?? [],
        wrapping: { try await self.readycheck(request: $0, context: $1) }
      )

    case "UpdateProperties":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Satori_Api_UpdatePropertiesRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeUpdatePropertiesInterceptors() ?? [],
        wrapping: { try await self.updateProperties(request: $0, context: $1) }
      )

    case "GetMessageList":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Satori_Api_GetMessageListRequest>(),
        responseSerializer: ProtobufSerializer<Satori_Api_GetMessageListResponse>(),
        interceptors: self.interceptors?.makeGetMessageListInterceptors() ?? [],
        wrapping: { try await self.getMessageList(request: $0, context: $1) }
      )

    case "UpdateMessage":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Satori_Api_UpdateMessageRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeUpdateMessageInterceptors() ?? [],
        wrapping: { try await self.updateMessage(request: $0, context: $1) }
      )

    case "DeleteMessage":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Satori_Api_DeleteMessageRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteMessageInterceptors() ?? [],
        wrapping: { try await self.deleteMessage(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Satori_Api_SatoriServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'authenticate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAuthenticateInterceptors() -> [ServerInterceptor<Satori_Api_AuthenticateRequest, Satori_Api_Session>]

  /// - Returns: Interceptors to use when handling 'authenticateLogout'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAuthenticateLogoutInterceptors() -> [ServerInterceptor<Satori_Api_AuthenticateLogoutRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'authenticateRefresh'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAuthenticateRefreshInterceptors() -> [ServerInterceptor<Satori_Api_AuthenticateRefreshRequest, Satori_Api_Session>]

  /// - Returns: Interceptors to use when handling 'deleteIdentity'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteIdentityInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'event'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEventInterceptors() -> [ServerInterceptor<Satori_Api_EventRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'getExperiments'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetExperimentsInterceptors() -> [ServerInterceptor<Satori_Api_GetExperimentsRequest, Satori_Api_ExperimentList>]

  /// - Returns: Interceptors to use when handling 'getFlags'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetFlagsInterceptors() -> [ServerInterceptor<Satori_Api_GetFlagsRequest, Satori_Api_FlagList>]

  /// - Returns: Interceptors to use when handling 'getLiveEvents'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetLiveEventsInterceptors() -> [ServerInterceptor<Satori_Api_GetLiveEventsRequest, Satori_Api_LiveEventList>]

  /// - Returns: Interceptors to use when handling 'healthcheck'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeHealthcheckInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'identify'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIdentifyInterceptors() -> [ServerInterceptor<Satori_Api_IdentifyRequest, Satori_Api_Session>]

  /// - Returns: Interceptors to use when handling 'listProperties'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListPropertiesInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Satori_Api_Properties>]

  /// - Returns: Interceptors to use when handling 'readycheck'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeReadycheckInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'updateProperties'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdatePropertiesInterceptors() -> [ServerInterceptor<Satori_Api_UpdatePropertiesRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'getMessageList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetMessageListInterceptors() -> [ServerInterceptor<Satori_Api_GetMessageListRequest, Satori_Api_GetMessageListResponse>]

  /// - Returns: Interceptors to use when handling 'updateMessage'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateMessageInterceptors() -> [ServerInterceptor<Satori_Api_UpdateMessageRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'deleteMessage'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteMessageInterceptors() -> [ServerInterceptor<Satori_Api_DeleteMessageRequest, SwiftProtobuf.Google_Protobuf_Empty>]
}

internal enum Satori_Api_SatoriServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Satori",
    fullName: "satori.api.Satori",
    methods: [
      Satori_Api_SatoriServerMetadata.Methods.authenticate,
      Satori_Api_SatoriServerMetadata.Methods.authenticateLogout,
      Satori_Api_SatoriServerMetadata.Methods.authenticateRefresh,
      Satori_Api_SatoriServerMetadata.Methods.deleteIdentity,
      Satori_Api_SatoriServerMetadata.Methods.event,
      Satori_Api_SatoriServerMetadata.Methods.getExperiments,
      Satori_Api_SatoriServerMetadata.Methods.getFlags,
      Satori_Api_SatoriServerMetadata.Methods.getLiveEvents,
      Satori_Api_SatoriServerMetadata.Methods.healthcheck,
      Satori_Api_SatoriServerMetadata.Methods.identify,
      Satori_Api_SatoriServerMetadata.Methods.listProperties,
      Satori_Api_SatoriServerMetadata.Methods.readycheck,
      Satori_Api_SatoriServerMetadata.Methods.updateProperties,
      Satori_Api_SatoriServerMetadata.Methods.getMessageList,
      Satori_Api_SatoriServerMetadata.Methods.updateMessage,
      Satori_Api_SatoriServerMetadata.Methods.deleteMessage,
    ]
  )

  internal enum Methods {
    internal static let authenticate = GRPCMethodDescriptor(
      name: "Authenticate",
      path: "/satori.api.Satori/Authenticate",
      type: GRPCCallType.unary
    )

    internal static let authenticateLogout = GRPCMethodDescriptor(
      name: "AuthenticateLogout",
      path: "/satori.api.Satori/AuthenticateLogout",
      type: GRPCCallType.unary
    )

    internal static let authenticateRefresh = GRPCMethodDescriptor(
      name: "AuthenticateRefresh",
      path: "/satori.api.Satori/AuthenticateRefresh",
      type: GRPCCallType.unary
    )

    internal static let deleteIdentity = GRPCMethodDescriptor(
      name: "DeleteIdentity",
      path: "/satori.api.Satori/DeleteIdentity",
      type: GRPCCallType.unary
    )

    internal static let event = GRPCMethodDescriptor(
      name: "Event",
      path: "/satori.api.Satori/Event",
      type: GRPCCallType.unary
    )

    internal static let getExperiments = GRPCMethodDescriptor(
      name: "GetExperiments",
      path: "/satori.api.Satori/GetExperiments",
      type: GRPCCallType.unary
    )

    internal static let getFlags = GRPCMethodDescriptor(
      name: "GetFlags",
      path: "/satori.api.Satori/GetFlags",
      type: GRPCCallType.unary
    )

    internal static let getLiveEvents = GRPCMethodDescriptor(
      name: "GetLiveEvents",
      path: "/satori.api.Satori/GetLiveEvents",
      type: GRPCCallType.unary
    )

    internal static let healthcheck = GRPCMethodDescriptor(
      name: "Healthcheck",
      path: "/satori.api.Satori/Healthcheck",
      type: GRPCCallType.unary
    )

    internal static let identify = GRPCMethodDescriptor(
      name: "Identify",
      path: "/satori.api.Satori/Identify",
      type: GRPCCallType.unary
    )

    internal static let listProperties = GRPCMethodDescriptor(
      name: "ListProperties",
      path: "/satori.api.Satori/ListProperties",
      type: GRPCCallType.unary
    )

    internal static let readycheck = GRPCMethodDescriptor(
      name: "Readycheck",
      path: "/satori.api.Satori/Readycheck",
      type: GRPCCallType.unary
    )

    internal static let updateProperties = GRPCMethodDescriptor(
      name: "UpdateProperties",
      path: "/satori.api.Satori/UpdateProperties",
      type: GRPCCallType.unary
    )

    internal static let getMessageList = GRPCMethodDescriptor(
      name: "GetMessageList",
      path: "/satori.api.Satori/GetMessageList",
      type: GRPCCallType.unary
    )

    internal static let updateMessage = GRPCMethodDescriptor(
      name: "UpdateMessage",
      path: "/satori.api.Satori/UpdateMessage",
      type: GRPCCallType.unary
    )

    internal static let deleteMessage = GRPCMethodDescriptor(
      name: "DeleteMessage",
      path: "/satori.api.Satori/DeleteMessage",
      type: GRPCCallType.unary
    )
  }
}

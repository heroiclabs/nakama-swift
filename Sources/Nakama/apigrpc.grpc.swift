//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: apigrpc.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


///*
/// The Nakama RPC protocol service built with GRPC.
///
/// Usage: instantiate `Nakama_Api_NakamaClient`, then call methods of this protocol to make API calls.
internal protocol Nakama_Api_NakamaClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Nakama_Api_NakamaClientInterceptorFactoryProtocol? { get }

  func addFriends(
    _ request: Nakama_Api_AddFriendsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AddFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func addGroupUsers(
    _ request: Nakama_Api_AddGroupUsersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AddGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func sessionRefresh(
    _ request: Nakama_Api_SessionRefreshRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_SessionRefreshRequest, Nakama_Api_Session>

  func sessionLogout(
    _ request: Nakama_Api_SessionLogoutRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_SessionLogoutRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func authenticateApple(
    _ request: Nakama_Api_AuthenticateAppleRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AuthenticateAppleRequest, Nakama_Api_Session>

  func authenticateCustom(
    _ request: Nakama_Api_AuthenticateCustomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AuthenticateCustomRequest, Nakama_Api_Session>

  func authenticateDevice(
    _ request: Nakama_Api_AuthenticateDeviceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AuthenticateDeviceRequest, Nakama_Api_Session>

  func authenticateEmail(
    _ request: Nakama_Api_AuthenticateEmailRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AuthenticateEmailRequest, Nakama_Api_Session>

  func authenticateFacebook(
    _ request: Nakama_Api_AuthenticateFacebookRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AuthenticateFacebookRequest, Nakama_Api_Session>

  func authenticateFacebookInstantGame(
    _ request: Nakama_Api_AuthenticateFacebookInstantGameRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AuthenticateFacebookInstantGameRequest, Nakama_Api_Session>

  func authenticateGameCenter(
    _ request: Nakama_Api_AuthenticateGameCenterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AuthenticateGameCenterRequest, Nakama_Api_Session>

  func authenticateGoogle(
    _ request: Nakama_Api_AuthenticateGoogleRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AuthenticateGoogleRequest, Nakama_Api_Session>

  func authenticateSteam(
    _ request: Nakama_Api_AuthenticateSteamRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AuthenticateSteamRequest, Nakama_Api_Session>

  func banGroupUsers(
    _ request: Nakama_Api_BanGroupUsersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_BanGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func blockFriends(
    _ request: Nakama_Api_BlockFriendsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_BlockFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func createGroup(
    _ request: Nakama_Api_CreateGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_CreateGroupRequest, Nakama_Api_Group>

  func deleteAccount(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>

  func deleteFriends(
    _ request: Nakama_Api_DeleteFriendsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_DeleteFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func deleteGroup(
    _ request: Nakama_Api_DeleteGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_DeleteGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func deleteLeaderboardRecord(
    _ request: Nakama_Api_DeleteLeaderboardRecordRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_DeleteLeaderboardRecordRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func deleteNotifications(
    _ request: Nakama_Api_DeleteNotificationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_DeleteNotificationsRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func deleteTournamentRecord(
    _ request: Nakama_Api_DeleteTournamentRecordRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_DeleteTournamentRecordRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func deleteStorageObjects(
    _ request: Nakama_Api_DeleteStorageObjectsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_DeleteStorageObjectsRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func event(
    _ request: Nakama_Api_Event,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_Event, SwiftProtobuf.Google_Protobuf_Empty>

  func getAccount(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Nakama_Api_Account>

  func getUsers(
    _ request: Nakama_Api_GetUsersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_GetUsersRequest, Nakama_Api_Users>

  func getSubscription(
    _ request: Nakama_Api_GetSubscriptionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_GetSubscriptionRequest, Nakama_Api_ValidatedSubscription>

  func healthcheck(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>

  func importFacebookFriends(
    _ request: Nakama_Api_ImportFacebookFriendsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ImportFacebookFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func importSteamFriends(
    _ request: Nakama_Api_ImportSteamFriendsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ImportSteamFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func joinGroup(
    _ request: Nakama_Api_JoinGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_JoinGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func joinTournament(
    _ request: Nakama_Api_JoinTournamentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_JoinTournamentRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func kickGroupUsers(
    _ request: Nakama_Api_KickGroupUsersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_KickGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func leaveGroup(
    _ request: Nakama_Api_LeaveGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_LeaveGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func linkApple(
    _ request: Nakama_Api_AccountApple,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AccountApple, SwiftProtobuf.Google_Protobuf_Empty>

  func linkCustom(
    _ request: Nakama_Api_AccountCustom,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AccountCustom, SwiftProtobuf.Google_Protobuf_Empty>

  func linkDevice(
    _ request: Nakama_Api_AccountDevice,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AccountDevice, SwiftProtobuf.Google_Protobuf_Empty>

  func linkEmail(
    _ request: Nakama_Api_AccountEmail,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AccountEmail, SwiftProtobuf.Google_Protobuf_Empty>

  func linkFacebook(
    _ request: Nakama_Api_LinkFacebookRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_LinkFacebookRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func linkFacebookInstantGame(
    _ request: Nakama_Api_AccountFacebookInstantGame,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AccountFacebookInstantGame, SwiftProtobuf.Google_Protobuf_Empty>

  func linkGameCenter(
    _ request: Nakama_Api_AccountGameCenter,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AccountGameCenter, SwiftProtobuf.Google_Protobuf_Empty>

  func linkGoogle(
    _ request: Nakama_Api_AccountGoogle,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AccountGoogle, SwiftProtobuf.Google_Protobuf_Empty>

  func linkSteam(
    _ request: Nakama_Api_LinkSteamRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_LinkSteamRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func listChannelMessages(
    _ request: Nakama_Api_ListChannelMessagesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ListChannelMessagesRequest, Nakama_Api_ChannelMessageList>

  func listFriends(
    _ request: Nakama_Api_ListFriendsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ListFriendsRequest, Nakama_Api_FriendList>

  func listGroups(
    _ request: Nakama_Api_ListGroupsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ListGroupsRequest, Nakama_Api_GroupList>

  func listGroupUsers(
    _ request: Nakama_Api_ListGroupUsersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ListGroupUsersRequest, Nakama_Api_GroupUserList>

  func listLeaderboardRecords(
    _ request: Nakama_Api_ListLeaderboardRecordsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ListLeaderboardRecordsRequest, Nakama_Api_LeaderboardRecordList>

  func listLeaderboardRecordsAroundOwner(
    _ request: Nakama_Api_ListLeaderboardRecordsAroundOwnerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ListLeaderboardRecordsAroundOwnerRequest, Nakama_Api_LeaderboardRecordList>

  func listMatches(
    _ request: Nakama_Api_ListMatchesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ListMatchesRequest, Nakama_Api_MatchList>

  func listNotifications(
    _ request: Nakama_Api_ListNotificationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ListNotificationsRequest, Nakama_Api_NotificationList>

  func listStorageObjects(
    _ request: Nakama_Api_ListStorageObjectsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ListStorageObjectsRequest, Nakama_Api_StorageObjectList>

  func listSubscriptions(
    _ request: Nakama_Api_ListSubscriptionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ListSubscriptionsRequest, Nakama_Api_SubscriptionList>

  func listTournaments(
    _ request: Nakama_Api_ListTournamentsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ListTournamentsRequest, Nakama_Api_TournamentList>

  func listTournamentRecords(
    _ request: Nakama_Api_ListTournamentRecordsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ListTournamentRecordsRequest, Nakama_Api_TournamentRecordList>

  func listTournamentRecordsAroundOwner(
    _ request: Nakama_Api_ListTournamentRecordsAroundOwnerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ListTournamentRecordsAroundOwnerRequest, Nakama_Api_TournamentRecordList>

  func listUserGroups(
    _ request: Nakama_Api_ListUserGroupsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ListUserGroupsRequest, Nakama_Api_UserGroupList>

  func promoteGroupUsers(
    _ request: Nakama_Api_PromoteGroupUsersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_PromoteGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func demoteGroupUsers(
    _ request: Nakama_Api_DemoteGroupUsersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_DemoteGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func readStorageObjects(
    _ request: Nakama_Api_ReadStorageObjectsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ReadStorageObjectsRequest, Nakama_Api_StorageObjects>

  func rpcFunc(
    _ request: Nakama_Api_Rpc,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_Rpc, Nakama_Api_Rpc>

  func unlinkApple(
    _ request: Nakama_Api_AccountApple,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AccountApple, SwiftProtobuf.Google_Protobuf_Empty>

  func unlinkCustom(
    _ request: Nakama_Api_AccountCustom,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AccountCustom, SwiftProtobuf.Google_Protobuf_Empty>

  func unlinkDevice(
    _ request: Nakama_Api_AccountDevice,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AccountDevice, SwiftProtobuf.Google_Protobuf_Empty>

  func unlinkEmail(
    _ request: Nakama_Api_AccountEmail,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AccountEmail, SwiftProtobuf.Google_Protobuf_Empty>

  func unlinkFacebook(
    _ request: Nakama_Api_AccountFacebook,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AccountFacebook, SwiftProtobuf.Google_Protobuf_Empty>

  func unlinkFacebookInstantGame(
    _ request: Nakama_Api_AccountFacebookInstantGame,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AccountFacebookInstantGame, SwiftProtobuf.Google_Protobuf_Empty>

  func unlinkGameCenter(
    _ request: Nakama_Api_AccountGameCenter,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AccountGameCenter, SwiftProtobuf.Google_Protobuf_Empty>

  func unlinkGoogle(
    _ request: Nakama_Api_AccountGoogle,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AccountGoogle, SwiftProtobuf.Google_Protobuf_Empty>

  func unlinkSteam(
    _ request: Nakama_Api_AccountSteam,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AccountSteam, SwiftProtobuf.Google_Protobuf_Empty>

  func updateAccount(
    _ request: Nakama_Api_UpdateAccountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_UpdateAccountRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func updateGroup(
    _ request: Nakama_Api_UpdateGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_UpdateGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func validatePurchaseApple(
    _ request: Nakama_Api_ValidatePurchaseAppleRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ValidatePurchaseAppleRequest, Nakama_Api_ValidatePurchaseResponse>

  func validateSubscriptionApple(
    _ request: Nakama_Api_ValidateSubscriptionAppleRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ValidateSubscriptionAppleRequest, Nakama_Api_ValidateSubscriptionResponse>

  func validatePurchaseGoogle(
    _ request: Nakama_Api_ValidatePurchaseGoogleRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ValidatePurchaseGoogleRequest, Nakama_Api_ValidatePurchaseResponse>

  func validateSubscriptionGoogle(
    _ request: Nakama_Api_ValidateSubscriptionGoogleRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ValidateSubscriptionGoogleRequest, Nakama_Api_ValidateSubscriptionResponse>

  func validatePurchaseHuawei(
    _ request: Nakama_Api_ValidatePurchaseHuaweiRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ValidatePurchaseHuaweiRequest, Nakama_Api_ValidatePurchaseResponse>

  func writeLeaderboardRecord(
    _ request: Nakama_Api_WriteLeaderboardRecordRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_WriteLeaderboardRecordRequest, Nakama_Api_LeaderboardRecord>

  func writeStorageObjects(
    _ request: Nakama_Api_WriteStorageObjectsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_WriteStorageObjectsRequest, Nakama_Api_StorageObjectAcks>

  func writeTournamentRecord(
    _ request: Nakama_Api_WriteTournamentRecordRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_WriteTournamentRecordRequest, Nakama_Api_LeaderboardRecord>
}

extension Nakama_Api_NakamaClientProtocol {
  internal var serviceName: String {
    return "nakama.api.Nakama"
  }

  /// Add friends by ID or username to a user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to AddFriends.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addFriends(
    _ request: Nakama_Api_AddFriendsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AddFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.addFriends.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddFriendsInterceptors() ?? []
    )
  }

  /// Add users to a group.
  ///
  /// - Parameters:
  ///   - request: Request to send to AddGroupUsers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addGroupUsers(
    _ request: Nakama_Api_AddGroupUsersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AddGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.addGroupUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddGroupUsersInterceptors() ?? []
    )
  }

  /// Refresh a user's session using a refresh token retrieved from a previous authentication request.
  ///
  /// - Parameters:
  ///   - request: Request to send to SessionRefresh.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sessionRefresh(
    _ request: Nakama_Api_SessionRefreshRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_SessionRefreshRequest, Nakama_Api_Session> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.sessionRefresh.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSessionRefreshInterceptors() ?? []
    )
  }

  /// Log out a session, invalidate a refresh token, or log out all sessions/refresh tokens for a user.
  ///
  /// - Parameters:
  ///   - request: Request to send to SessionLogout.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sessionLogout(
    _ request: Nakama_Api_SessionLogoutRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_SessionLogoutRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.sessionLogout.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSessionLogoutInterceptors() ?? []
    )
  }

  /// Authenticate a user with an Apple ID against the server.
  ///
  /// - Parameters:
  ///   - request: Request to send to AuthenticateApple.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func authenticateApple(
    _ request: Nakama_Api_AuthenticateAppleRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AuthenticateAppleRequest, Nakama_Api_Session> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.authenticateApple.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateAppleInterceptors() ?? []
    )
  }

  /// Authenticate a user with a custom id against the server.
  ///
  /// - Parameters:
  ///   - request: Request to send to AuthenticateCustom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func authenticateCustom(
    _ request: Nakama_Api_AuthenticateCustomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AuthenticateCustomRequest, Nakama_Api_Session> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.authenticateCustom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateCustomInterceptors() ?? []
    )
  }

  /// Authenticate a user with a device id against the server.
  ///
  /// - Parameters:
  ///   - request: Request to send to AuthenticateDevice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func authenticateDevice(
    _ request: Nakama_Api_AuthenticateDeviceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AuthenticateDeviceRequest, Nakama_Api_Session> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.authenticateDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateDeviceInterceptors() ?? []
    )
  }

  /// Authenticate a user with an email+password against the server.
  ///
  /// - Parameters:
  ///   - request: Request to send to AuthenticateEmail.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func authenticateEmail(
    _ request: Nakama_Api_AuthenticateEmailRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AuthenticateEmailRequest, Nakama_Api_Session> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.authenticateEmail.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateEmailInterceptors() ?? []
    )
  }

  /// Authenticate a user with a Facebook OAuth token against the server.
  ///
  /// - Parameters:
  ///   - request: Request to send to AuthenticateFacebook.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func authenticateFacebook(
    _ request: Nakama_Api_AuthenticateFacebookRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AuthenticateFacebookRequest, Nakama_Api_Session> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.authenticateFacebook.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateFacebookInterceptors() ?? []
    )
  }

  /// Authenticate a user with a Facebook Instant Game token against the server.
  ///
  /// - Parameters:
  ///   - request: Request to send to AuthenticateFacebookInstantGame.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func authenticateFacebookInstantGame(
    _ request: Nakama_Api_AuthenticateFacebookInstantGameRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AuthenticateFacebookInstantGameRequest, Nakama_Api_Session> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.authenticateFacebookInstantGame.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateFacebookInstantGameInterceptors() ?? []
    )
  }

  /// Authenticate a user with Apple's GameCenter against the server.
  ///
  /// - Parameters:
  ///   - request: Request to send to AuthenticateGameCenter.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func authenticateGameCenter(
    _ request: Nakama_Api_AuthenticateGameCenterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AuthenticateGameCenterRequest, Nakama_Api_Session> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.authenticateGameCenter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateGameCenterInterceptors() ?? []
    )
  }

  /// Authenticate a user with Google against the server.
  ///
  /// - Parameters:
  ///   - request: Request to send to AuthenticateGoogle.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func authenticateGoogle(
    _ request: Nakama_Api_AuthenticateGoogleRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AuthenticateGoogleRequest, Nakama_Api_Session> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.authenticateGoogle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateGoogleInterceptors() ?? []
    )
  }

  /// Authenticate a user with Steam against the server.
  ///
  /// - Parameters:
  ///   - request: Request to send to AuthenticateSteam.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func authenticateSteam(
    _ request: Nakama_Api_AuthenticateSteamRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AuthenticateSteamRequest, Nakama_Api_Session> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.authenticateSteam.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateSteamInterceptors() ?? []
    )
  }

  /// Ban a set of users from a group.
  ///
  /// - Parameters:
  ///   - request: Request to send to BanGroupUsers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func banGroupUsers(
    _ request: Nakama_Api_BanGroupUsersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_BanGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.banGroupUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBanGroupUsersInterceptors() ?? []
    )
  }

  /// Block one or more users by ID or username.
  ///
  /// - Parameters:
  ///   - request: Request to send to BlockFriends.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func blockFriends(
    _ request: Nakama_Api_BlockFriendsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_BlockFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.blockFriends.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlockFriendsInterceptors() ?? []
    )
  }

  /// Create a new group with the current user as the owner.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createGroup(
    _ request: Nakama_Api_CreateGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_CreateGroupRequest, Nakama_Api_Group> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.createGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGroupInterceptors() ?? []
    )
  }

  /// Delete the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteAccount(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.deleteAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteAccountInterceptors() ?? []
    )
  }

  /// Delete one or more users by ID or username.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteFriends.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteFriends(
    _ request: Nakama_Api_DeleteFriendsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_DeleteFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.deleteFriends.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteFriendsInterceptors() ?? []
    )
  }

  /// Delete a group by ID.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteGroup(
    _ request: Nakama_Api_DeleteGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_DeleteGroupRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.deleteGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteGroupInterceptors() ?? []
    )
  }

  /// Delete a leaderboard record.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteLeaderboardRecord.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteLeaderboardRecord(
    _ request: Nakama_Api_DeleteLeaderboardRecordRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_DeleteLeaderboardRecordRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.deleteLeaderboardRecord.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteLeaderboardRecordInterceptors() ?? []
    )
  }

  /// Delete one or more notifications for the current user.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteNotifications.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteNotifications(
    _ request: Nakama_Api_DeleteNotificationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_DeleteNotificationsRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.deleteNotifications.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteNotificationsInterceptors() ?? []
    )
  }

  /// Delete a tournament record.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteTournamentRecord.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteTournamentRecord(
    _ request: Nakama_Api_DeleteTournamentRecordRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_DeleteTournamentRecordRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.deleteTournamentRecord.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteTournamentRecordInterceptors() ?? []
    )
  }

  /// Delete one or more objects by ID or username.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteStorageObjects.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteStorageObjects(
    _ request: Nakama_Api_DeleteStorageObjectsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_DeleteStorageObjectsRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.deleteStorageObjects.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteStorageObjectsInterceptors() ?? []
    )
  }

  /// Submit an event for processing in the server's registered runtime custom events handler.
  ///
  /// - Parameters:
  ///   - request: Request to send to Event.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func event(
    _ request: Nakama_Api_Event,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_Event, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.event.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEventInterceptors() ?? []
    )
  }

  /// Fetch the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAccount(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Nakama_Api_Account> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.getAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountInterceptors() ?? []
    )
  }

  /// Fetch zero or more users by ID and/or username.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetUsers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getUsers(
    _ request: Nakama_Api_GetUsersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_GetUsersRequest, Nakama_Api_Users> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.getUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUsersInterceptors() ?? []
    )
  }

  /// Get subscription by product id.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSubscription.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getSubscription(
    _ request: Nakama_Api_GetSubscriptionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_GetSubscriptionRequest, Nakama_Api_ValidatedSubscription> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.getSubscription.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSubscriptionInterceptors() ?? []
    )
  }

  /// A healthcheck which load balancers can use to check the service.
  ///
  /// - Parameters:
  ///   - request: Request to send to Healthcheck.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func healthcheck(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.healthcheck.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHealthcheckInterceptors() ?? []
    )
  }

  /// Import Facebook friends and add them to a user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to ImportFacebookFriends.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func importFacebookFriends(
    _ request: Nakama_Api_ImportFacebookFriendsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ImportFacebookFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.importFacebookFriends.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeImportFacebookFriendsInterceptors() ?? []
    )
  }

  /// Import Steam friends and add them to a user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to ImportSteamFriends.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func importSteamFriends(
    _ request: Nakama_Api_ImportSteamFriendsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ImportSteamFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.importSteamFriends.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeImportSteamFriendsInterceptors() ?? []
    )
  }

  /// Immediately join an open group, or request to join a closed one.
  ///
  /// - Parameters:
  ///   - request: Request to send to JoinGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func joinGroup(
    _ request: Nakama_Api_JoinGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_JoinGroupRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.joinGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeJoinGroupInterceptors() ?? []
    )
  }

  /// Attempt to join an open and running tournament.
  ///
  /// - Parameters:
  ///   - request: Request to send to JoinTournament.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func joinTournament(
    _ request: Nakama_Api_JoinTournamentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_JoinTournamentRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.joinTournament.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeJoinTournamentInterceptors() ?? []
    )
  }

  /// Kick a set of users from a group.
  ///
  /// - Parameters:
  ///   - request: Request to send to KickGroupUsers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func kickGroupUsers(
    _ request: Nakama_Api_KickGroupUsersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_KickGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.kickGroupUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKickGroupUsersInterceptors() ?? []
    )
  }

  /// Leave a group the user is a member of.
  ///
  /// - Parameters:
  ///   - request: Request to send to LeaveGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func leaveGroup(
    _ request: Nakama_Api_LeaveGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_LeaveGroupRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.leaveGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLeaveGroupInterceptors() ?? []
    )
  }

  /// Add an Apple ID to the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to LinkApple.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func linkApple(
    _ request: Nakama_Api_AccountApple,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AccountApple, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.linkApple.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkAppleInterceptors() ?? []
    )
  }

  /// Add a custom ID to the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to LinkCustom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func linkCustom(
    _ request: Nakama_Api_AccountCustom,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AccountCustom, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.linkCustom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkCustomInterceptors() ?? []
    )
  }

  /// Add a device ID to the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to LinkDevice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func linkDevice(
    _ request: Nakama_Api_AccountDevice,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AccountDevice, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.linkDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkDeviceInterceptors() ?? []
    )
  }

  /// Add an email+password to the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to LinkEmail.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func linkEmail(
    _ request: Nakama_Api_AccountEmail,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AccountEmail, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.linkEmail.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkEmailInterceptors() ?? []
    )
  }

  /// Add Facebook to the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to LinkFacebook.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func linkFacebook(
    _ request: Nakama_Api_LinkFacebookRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_LinkFacebookRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.linkFacebook.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkFacebookInterceptors() ?? []
    )
  }

  /// Add Facebook Instant Game to the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to LinkFacebookInstantGame.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func linkFacebookInstantGame(
    _ request: Nakama_Api_AccountFacebookInstantGame,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AccountFacebookInstantGame, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.linkFacebookInstantGame.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkFacebookInstantGameInterceptors() ?? []
    )
  }

  /// Add Apple's GameCenter to the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to LinkGameCenter.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func linkGameCenter(
    _ request: Nakama_Api_AccountGameCenter,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AccountGameCenter, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.linkGameCenter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkGameCenterInterceptors() ?? []
    )
  }

  /// Add Google to the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to LinkGoogle.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func linkGoogle(
    _ request: Nakama_Api_AccountGoogle,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AccountGoogle, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.linkGoogle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkGoogleInterceptors() ?? []
    )
  }

  /// Add Steam to the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to LinkSteam.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func linkSteam(
    _ request: Nakama_Api_LinkSteamRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_LinkSteamRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.linkSteam.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkSteamInterceptors() ?? []
    )
  }

  /// List a channel's message history.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListChannelMessages.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listChannelMessages(
    _ request: Nakama_Api_ListChannelMessagesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ListChannelMessagesRequest, Nakama_Api_ChannelMessageList> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listChannelMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListChannelMessagesInterceptors() ?? []
    )
  }

  /// List all friends for the current user.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListFriends.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listFriends(
    _ request: Nakama_Api_ListFriendsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ListFriendsRequest, Nakama_Api_FriendList> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listFriends.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListFriendsInterceptors() ?? []
    )
  }

  /// List groups based on given filters.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListGroups.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listGroups(
    _ request: Nakama_Api_ListGroupsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ListGroupsRequest, Nakama_Api_GroupList> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listGroups.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListGroupsInterceptors() ?? []
    )
  }

  /// List all users that are part of a group.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListGroupUsers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listGroupUsers(
    _ request: Nakama_Api_ListGroupUsersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ListGroupUsersRequest, Nakama_Api_GroupUserList> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listGroupUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListGroupUsersInterceptors() ?? []
    )
  }

  /// List leaderboard records.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListLeaderboardRecords.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listLeaderboardRecords(
    _ request: Nakama_Api_ListLeaderboardRecordsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ListLeaderboardRecordsRequest, Nakama_Api_LeaderboardRecordList> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listLeaderboardRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListLeaderboardRecordsInterceptors() ?? []
    )
  }

  /// List leaderboard records that belong to a user.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListLeaderboardRecordsAroundOwner.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listLeaderboardRecordsAroundOwner(
    _ request: Nakama_Api_ListLeaderboardRecordsAroundOwnerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ListLeaderboardRecordsAroundOwnerRequest, Nakama_Api_LeaderboardRecordList> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listLeaderboardRecordsAroundOwner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListLeaderboardRecordsAroundOwnerInterceptors() ?? []
    )
  }

  /// Fetch list of running matches.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListMatches.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listMatches(
    _ request: Nakama_Api_ListMatchesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ListMatchesRequest, Nakama_Api_MatchList> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listMatches.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListMatchesInterceptors() ?? []
    )
  }

  /// Fetch list of notifications.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListNotifications.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listNotifications(
    _ request: Nakama_Api_ListNotificationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ListNotificationsRequest, Nakama_Api_NotificationList> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listNotifications.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListNotificationsInterceptors() ?? []
    )
  }

  /// List publicly readable storage objects in a given collection.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListStorageObjects.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listStorageObjects(
    _ request: Nakama_Api_ListStorageObjectsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ListStorageObjectsRequest, Nakama_Api_StorageObjectList> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listStorageObjects.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListStorageObjectsInterceptors() ?? []
    )
  }

  /// List user's subscriptions.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListSubscriptions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listSubscriptions(
    _ request: Nakama_Api_ListSubscriptionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ListSubscriptionsRequest, Nakama_Api_SubscriptionList> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listSubscriptions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListSubscriptionsInterceptors() ?? []
    )
  }

  /// List current or upcoming tournaments.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListTournaments.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listTournaments(
    _ request: Nakama_Api_ListTournamentsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ListTournamentsRequest, Nakama_Api_TournamentList> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listTournaments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListTournamentsInterceptors() ?? []
    )
  }

  /// List tournament records.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListTournamentRecords.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listTournamentRecords(
    _ request: Nakama_Api_ListTournamentRecordsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ListTournamentRecordsRequest, Nakama_Api_TournamentRecordList> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listTournamentRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListTournamentRecordsInterceptors() ?? []
    )
  }

  /// List tournament records for a given owner.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListTournamentRecordsAroundOwner.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listTournamentRecordsAroundOwner(
    _ request: Nakama_Api_ListTournamentRecordsAroundOwnerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ListTournamentRecordsAroundOwnerRequest, Nakama_Api_TournamentRecordList> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listTournamentRecordsAroundOwner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListTournamentRecordsAroundOwnerInterceptors() ?? []
    )
  }

  /// List groups the current user belongs to.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListUserGroups.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listUserGroups(
    _ request: Nakama_Api_ListUserGroupsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ListUserGroupsRequest, Nakama_Api_UserGroupList> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listUserGroups.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListUserGroupsInterceptors() ?? []
    )
  }

  /// Promote a set of users in a group to the next role up.
  ///
  /// - Parameters:
  ///   - request: Request to send to PromoteGroupUsers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func promoteGroupUsers(
    _ request: Nakama_Api_PromoteGroupUsersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_PromoteGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.promoteGroupUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePromoteGroupUsersInterceptors() ?? []
    )
  }

  /// Demote a set of users in a group to the next role down.
  ///
  /// - Parameters:
  ///   - request: Request to send to DemoteGroupUsers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func demoteGroupUsers(
    _ request: Nakama_Api_DemoteGroupUsersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_DemoteGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.demoteGroupUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDemoteGroupUsersInterceptors() ?? []
    )
  }

  /// Get storage objects.
  ///
  /// - Parameters:
  ///   - request: Request to send to ReadStorageObjects.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func readStorageObjects(
    _ request: Nakama_Api_ReadStorageObjectsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ReadStorageObjectsRequest, Nakama_Api_StorageObjects> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.readStorageObjects.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReadStorageObjectsInterceptors() ?? []
    )
  }

  /// Execute a Lua function on the server.
  ///
  /// - Parameters:
  ///   - request: Request to send to RpcFunc.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func rpcFunc(
    _ request: Nakama_Api_Rpc,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_Rpc, Nakama_Api_Rpc> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.rpcFunc.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRpcFuncInterceptors() ?? []
    )
  }

  /// Remove the Apple ID from the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnlinkApple.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unlinkApple(
    _ request: Nakama_Api_AccountApple,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AccountApple, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.unlinkApple.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkAppleInterceptors() ?? []
    )
  }

  /// Remove the custom ID from the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnlinkCustom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unlinkCustom(
    _ request: Nakama_Api_AccountCustom,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AccountCustom, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.unlinkCustom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkCustomInterceptors() ?? []
    )
  }

  /// Remove the device ID from the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnlinkDevice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unlinkDevice(
    _ request: Nakama_Api_AccountDevice,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AccountDevice, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.unlinkDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkDeviceInterceptors() ?? []
    )
  }

  /// Remove the email+password from the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnlinkEmail.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unlinkEmail(
    _ request: Nakama_Api_AccountEmail,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AccountEmail, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.unlinkEmail.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkEmailInterceptors() ?? []
    )
  }

  /// Remove Facebook from the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnlinkFacebook.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unlinkFacebook(
    _ request: Nakama_Api_AccountFacebook,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AccountFacebook, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.unlinkFacebook.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkFacebookInterceptors() ?? []
    )
  }

  /// Remove Facebook Instant Game profile from the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnlinkFacebookInstantGame.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unlinkFacebookInstantGame(
    _ request: Nakama_Api_AccountFacebookInstantGame,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AccountFacebookInstantGame, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.unlinkFacebookInstantGame.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkFacebookInstantGameInterceptors() ?? []
    )
  }

  /// Remove Apple's GameCenter from the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnlinkGameCenter.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unlinkGameCenter(
    _ request: Nakama_Api_AccountGameCenter,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AccountGameCenter, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.unlinkGameCenter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkGameCenterInterceptors() ?? []
    )
  }

  /// Remove Google from the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnlinkGoogle.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unlinkGoogle(
    _ request: Nakama_Api_AccountGoogle,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AccountGoogle, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.unlinkGoogle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkGoogleInterceptors() ?? []
    )
  }

  /// Remove Steam from the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnlinkSteam.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unlinkSteam(
    _ request: Nakama_Api_AccountSteam,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AccountSteam, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.unlinkSteam.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkSteamInterceptors() ?? []
    )
  }

  /// Update fields in the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateAccount(
    _ request: Nakama_Api_UpdateAccountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_UpdateAccountRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.updateAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateAccountInterceptors() ?? []
    )
  }

  /// Update fields in a given group.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateGroup(
    _ request: Nakama_Api_UpdateGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_UpdateGroupRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.updateGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupInterceptors() ?? []
    )
  }

  /// Validate Apple IAP Receipt
  ///
  /// - Parameters:
  ///   - request: Request to send to ValidatePurchaseApple.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func validatePurchaseApple(
    _ request: Nakama_Api_ValidatePurchaseAppleRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ValidatePurchaseAppleRequest, Nakama_Api_ValidatePurchaseResponse> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.validatePurchaseApple.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatePurchaseAppleInterceptors() ?? []
    )
  }

  /// Validate Apple Subscription Receipt
  ///
  /// - Parameters:
  ///   - request: Request to send to ValidateSubscriptionApple.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func validateSubscriptionApple(
    _ request: Nakama_Api_ValidateSubscriptionAppleRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ValidateSubscriptionAppleRequest, Nakama_Api_ValidateSubscriptionResponse> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.validateSubscriptionApple.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidateSubscriptionAppleInterceptors() ?? []
    )
  }

  /// Validate Google IAP Receipt
  ///
  /// - Parameters:
  ///   - request: Request to send to ValidatePurchaseGoogle.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func validatePurchaseGoogle(
    _ request: Nakama_Api_ValidatePurchaseGoogleRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ValidatePurchaseGoogleRequest, Nakama_Api_ValidatePurchaseResponse> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.validatePurchaseGoogle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatePurchaseGoogleInterceptors() ?? []
    )
  }

  /// Validate Google Subscription Receipt
  ///
  /// - Parameters:
  ///   - request: Request to send to ValidateSubscriptionGoogle.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func validateSubscriptionGoogle(
    _ request: Nakama_Api_ValidateSubscriptionGoogleRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ValidateSubscriptionGoogleRequest, Nakama_Api_ValidateSubscriptionResponse> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.validateSubscriptionGoogle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidateSubscriptionGoogleInterceptors() ?? []
    )
  }

  /// Validate Huawei IAP Receipt
  ///
  /// - Parameters:
  ///   - request: Request to send to ValidatePurchaseHuawei.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func validatePurchaseHuawei(
    _ request: Nakama_Api_ValidatePurchaseHuaweiRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ValidatePurchaseHuaweiRequest, Nakama_Api_ValidatePurchaseResponse> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.validatePurchaseHuawei.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatePurchaseHuaweiInterceptors() ?? []
    )
  }

  /// Write a record to a leaderboard.
  ///
  /// - Parameters:
  ///   - request: Request to send to WriteLeaderboardRecord.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func writeLeaderboardRecord(
    _ request: Nakama_Api_WriteLeaderboardRecordRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_WriteLeaderboardRecordRequest, Nakama_Api_LeaderboardRecord> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.writeLeaderboardRecord.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWriteLeaderboardRecordInterceptors() ?? []
    )
  }

  /// Write objects into the storage engine.
  ///
  /// - Parameters:
  ///   - request: Request to send to WriteStorageObjects.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func writeStorageObjects(
    _ request: Nakama_Api_WriteStorageObjectsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_WriteStorageObjectsRequest, Nakama_Api_StorageObjectAcks> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.writeStorageObjects.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWriteStorageObjectsInterceptors() ?? []
    )
  }

  /// Write a record to a tournament.
  ///
  /// - Parameters:
  ///   - request: Request to send to WriteTournamentRecord.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func writeTournamentRecord(
    _ request: Nakama_Api_WriteTournamentRecordRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_WriteTournamentRecordRequest, Nakama_Api_LeaderboardRecord> {
    return self.makeUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.writeTournamentRecord.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWriteTournamentRecordInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Nakama_Api_NakamaClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Nakama_Api_NakamaNIOClient")
internal final class Nakama_Api_NakamaClient: Nakama_Api_NakamaClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Nakama_Api_NakamaClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Nakama_Api_NakamaClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the nakama.api.Nakama service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Nakama_Api_NakamaClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Nakama_Api_NakamaNIOClient: Nakama_Api_NakamaClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Nakama_Api_NakamaClientInterceptorFactoryProtocol?

  /// Creates a client for the nakama.api.Nakama service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Nakama_Api_NakamaClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

///*
/// The Nakama RPC protocol service built with GRPC.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Nakama_Api_NakamaAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Nakama_Api_NakamaClientInterceptorFactoryProtocol? { get }

  func makeAddFriendsCall(
    _ request: Nakama_Api_AddFriendsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AddFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeAddGroupUsersCall(
    _ request: Nakama_Api_AddGroupUsersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AddGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeSessionRefreshCall(
    _ request: Nakama_Api_SessionRefreshRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_SessionRefreshRequest, Nakama_Api_Session>

  func makeSessionLogoutCall(
    _ request: Nakama_Api_SessionLogoutRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_SessionLogoutRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeAuthenticateAppleCall(
    _ request: Nakama_Api_AuthenticateAppleRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AuthenticateAppleRequest, Nakama_Api_Session>

  func makeAuthenticateCustomCall(
    _ request: Nakama_Api_AuthenticateCustomRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AuthenticateCustomRequest, Nakama_Api_Session>

  func makeAuthenticateDeviceCall(
    _ request: Nakama_Api_AuthenticateDeviceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AuthenticateDeviceRequest, Nakama_Api_Session>

  func makeAuthenticateEmailCall(
    _ request: Nakama_Api_AuthenticateEmailRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AuthenticateEmailRequest, Nakama_Api_Session>

  func makeAuthenticateFacebookCall(
    _ request: Nakama_Api_AuthenticateFacebookRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AuthenticateFacebookRequest, Nakama_Api_Session>

  func makeAuthenticateFacebookInstantGameCall(
    _ request: Nakama_Api_AuthenticateFacebookInstantGameRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AuthenticateFacebookInstantGameRequest, Nakama_Api_Session>

  func makeAuthenticateGameCenterCall(
    _ request: Nakama_Api_AuthenticateGameCenterRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AuthenticateGameCenterRequest, Nakama_Api_Session>

  func makeAuthenticateGoogleCall(
    _ request: Nakama_Api_AuthenticateGoogleRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AuthenticateGoogleRequest, Nakama_Api_Session>

  func makeAuthenticateSteamCall(
    _ request: Nakama_Api_AuthenticateSteamRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AuthenticateSteamRequest, Nakama_Api_Session>

  func makeBanGroupUsersCall(
    _ request: Nakama_Api_BanGroupUsersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_BanGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeBlockFriendsCall(
    _ request: Nakama_Api_BlockFriendsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_BlockFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeCreateGroupCall(
    _ request: Nakama_Api_CreateGroupRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_CreateGroupRequest, Nakama_Api_Group>

  func makeDeleteAccountCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>

  func makeDeleteFriendsCall(
    _ request: Nakama_Api_DeleteFriendsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_DeleteFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeDeleteGroupCall(
    _ request: Nakama_Api_DeleteGroupRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_DeleteGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeDeleteLeaderboardRecordCall(
    _ request: Nakama_Api_DeleteLeaderboardRecordRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_DeleteLeaderboardRecordRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeDeleteNotificationsCall(
    _ request: Nakama_Api_DeleteNotificationsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_DeleteNotificationsRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeDeleteTournamentRecordCall(
    _ request: Nakama_Api_DeleteTournamentRecordRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_DeleteTournamentRecordRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeDeleteStorageObjectsCall(
    _ request: Nakama_Api_DeleteStorageObjectsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_DeleteStorageObjectsRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeEventCall(
    _ request: Nakama_Api_Event,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_Event, SwiftProtobuf.Google_Protobuf_Empty>

  func makeGetAccountCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Nakama_Api_Account>

  func makeGetUsersCall(
    _ request: Nakama_Api_GetUsersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_GetUsersRequest, Nakama_Api_Users>

  func makeGetSubscriptionCall(
    _ request: Nakama_Api_GetSubscriptionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_GetSubscriptionRequest, Nakama_Api_ValidatedSubscription>

  func makeHealthcheckCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>

  func makeImportFacebookFriendsCall(
    _ request: Nakama_Api_ImportFacebookFriendsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ImportFacebookFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeImportSteamFriendsCall(
    _ request: Nakama_Api_ImportSteamFriendsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ImportSteamFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeJoinGroupCall(
    _ request: Nakama_Api_JoinGroupRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_JoinGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeJoinTournamentCall(
    _ request: Nakama_Api_JoinTournamentRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_JoinTournamentRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeKickGroupUsersCall(
    _ request: Nakama_Api_KickGroupUsersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_KickGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeLeaveGroupCall(
    _ request: Nakama_Api_LeaveGroupRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_LeaveGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeLinkAppleCall(
    _ request: Nakama_Api_AccountApple,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AccountApple, SwiftProtobuf.Google_Protobuf_Empty>

  func makeLinkCustomCall(
    _ request: Nakama_Api_AccountCustom,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AccountCustom, SwiftProtobuf.Google_Protobuf_Empty>

  func makeLinkDeviceCall(
    _ request: Nakama_Api_AccountDevice,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AccountDevice, SwiftProtobuf.Google_Protobuf_Empty>

  func makeLinkEmailCall(
    _ request: Nakama_Api_AccountEmail,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AccountEmail, SwiftProtobuf.Google_Protobuf_Empty>

  func makeLinkFacebookCall(
    _ request: Nakama_Api_LinkFacebookRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_LinkFacebookRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeLinkFacebookInstantGameCall(
    _ request: Nakama_Api_AccountFacebookInstantGame,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AccountFacebookInstantGame, SwiftProtobuf.Google_Protobuf_Empty>

  func makeLinkGameCenterCall(
    _ request: Nakama_Api_AccountGameCenter,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AccountGameCenter, SwiftProtobuf.Google_Protobuf_Empty>

  func makeLinkGoogleCall(
    _ request: Nakama_Api_AccountGoogle,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AccountGoogle, SwiftProtobuf.Google_Protobuf_Empty>

  func makeLinkSteamCall(
    _ request: Nakama_Api_LinkSteamRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_LinkSteamRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeListChannelMessagesCall(
    _ request: Nakama_Api_ListChannelMessagesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ListChannelMessagesRequest, Nakama_Api_ChannelMessageList>

  func makeListFriendsCall(
    _ request: Nakama_Api_ListFriendsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ListFriendsRequest, Nakama_Api_FriendList>

  func makeListGroupsCall(
    _ request: Nakama_Api_ListGroupsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ListGroupsRequest, Nakama_Api_GroupList>

  func makeListGroupUsersCall(
    _ request: Nakama_Api_ListGroupUsersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ListGroupUsersRequest, Nakama_Api_GroupUserList>

  func makeListLeaderboardRecordsCall(
    _ request: Nakama_Api_ListLeaderboardRecordsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ListLeaderboardRecordsRequest, Nakama_Api_LeaderboardRecordList>

  func makeListLeaderboardRecordsAroundOwnerCall(
    _ request: Nakama_Api_ListLeaderboardRecordsAroundOwnerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ListLeaderboardRecordsAroundOwnerRequest, Nakama_Api_LeaderboardRecordList>

  func makeListMatchesCall(
    _ request: Nakama_Api_ListMatchesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ListMatchesRequest, Nakama_Api_MatchList>

  func makeListNotificationsCall(
    _ request: Nakama_Api_ListNotificationsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ListNotificationsRequest, Nakama_Api_NotificationList>

  func makeListStorageObjectsCall(
    _ request: Nakama_Api_ListStorageObjectsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ListStorageObjectsRequest, Nakama_Api_StorageObjectList>

  func makeListSubscriptionsCall(
    _ request: Nakama_Api_ListSubscriptionsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ListSubscriptionsRequest, Nakama_Api_SubscriptionList>

  func makeListTournamentsCall(
    _ request: Nakama_Api_ListTournamentsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ListTournamentsRequest, Nakama_Api_TournamentList>

  func makeListTournamentRecordsCall(
    _ request: Nakama_Api_ListTournamentRecordsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ListTournamentRecordsRequest, Nakama_Api_TournamentRecordList>

  func makeListTournamentRecordsAroundOwnerCall(
    _ request: Nakama_Api_ListTournamentRecordsAroundOwnerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ListTournamentRecordsAroundOwnerRequest, Nakama_Api_TournamentRecordList>

  func makeListUserGroupsCall(
    _ request: Nakama_Api_ListUserGroupsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ListUserGroupsRequest, Nakama_Api_UserGroupList>

  func makePromoteGroupUsersCall(
    _ request: Nakama_Api_PromoteGroupUsersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_PromoteGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeDemoteGroupUsersCall(
    _ request: Nakama_Api_DemoteGroupUsersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_DemoteGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeReadStorageObjectsCall(
    _ request: Nakama_Api_ReadStorageObjectsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ReadStorageObjectsRequest, Nakama_Api_StorageObjects>

  func makeRpcFuncCall(
    _ request: Nakama_Api_Rpc,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_Rpc, Nakama_Api_Rpc>

  func makeUnlinkAppleCall(
    _ request: Nakama_Api_AccountApple,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AccountApple, SwiftProtobuf.Google_Protobuf_Empty>

  func makeUnlinkCustomCall(
    _ request: Nakama_Api_AccountCustom,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AccountCustom, SwiftProtobuf.Google_Protobuf_Empty>

  func makeUnlinkDeviceCall(
    _ request: Nakama_Api_AccountDevice,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AccountDevice, SwiftProtobuf.Google_Protobuf_Empty>

  func makeUnlinkEmailCall(
    _ request: Nakama_Api_AccountEmail,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AccountEmail, SwiftProtobuf.Google_Protobuf_Empty>

  func makeUnlinkFacebookCall(
    _ request: Nakama_Api_AccountFacebook,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AccountFacebook, SwiftProtobuf.Google_Protobuf_Empty>

  func makeUnlinkFacebookInstantGameCall(
    _ request: Nakama_Api_AccountFacebookInstantGame,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AccountFacebookInstantGame, SwiftProtobuf.Google_Protobuf_Empty>

  func makeUnlinkGameCenterCall(
    _ request: Nakama_Api_AccountGameCenter,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AccountGameCenter, SwiftProtobuf.Google_Protobuf_Empty>

  func makeUnlinkGoogleCall(
    _ request: Nakama_Api_AccountGoogle,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AccountGoogle, SwiftProtobuf.Google_Protobuf_Empty>

  func makeUnlinkSteamCall(
    _ request: Nakama_Api_AccountSteam,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AccountSteam, SwiftProtobuf.Google_Protobuf_Empty>

  func makeUpdateAccountCall(
    _ request: Nakama_Api_UpdateAccountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_UpdateAccountRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeUpdateGroupCall(
    _ request: Nakama_Api_UpdateGroupRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_UpdateGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeValidatePurchaseAppleCall(
    _ request: Nakama_Api_ValidatePurchaseAppleRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ValidatePurchaseAppleRequest, Nakama_Api_ValidatePurchaseResponse>

  func makeValidateSubscriptionAppleCall(
    _ request: Nakama_Api_ValidateSubscriptionAppleRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ValidateSubscriptionAppleRequest, Nakama_Api_ValidateSubscriptionResponse>

  func makeValidatePurchaseGoogleCall(
    _ request: Nakama_Api_ValidatePurchaseGoogleRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ValidatePurchaseGoogleRequest, Nakama_Api_ValidatePurchaseResponse>

  func makeValidateSubscriptionGoogleCall(
    _ request: Nakama_Api_ValidateSubscriptionGoogleRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ValidateSubscriptionGoogleRequest, Nakama_Api_ValidateSubscriptionResponse>

  func makeValidatePurchaseHuaweiCall(
    _ request: Nakama_Api_ValidatePurchaseHuaweiRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ValidatePurchaseHuaweiRequest, Nakama_Api_ValidatePurchaseResponse>

  func makeWriteLeaderboardRecordCall(
    _ request: Nakama_Api_WriteLeaderboardRecordRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_WriteLeaderboardRecordRequest, Nakama_Api_LeaderboardRecord>

  func makeWriteStorageObjectsCall(
    _ request: Nakama_Api_WriteStorageObjectsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_WriteStorageObjectsRequest, Nakama_Api_StorageObjectAcks>

  func makeWriteTournamentRecordCall(
    _ request: Nakama_Api_WriteTournamentRecordRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Nakama_Api_WriteTournamentRecordRequest, Nakama_Api_LeaderboardRecord>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Nakama_Api_NakamaAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Nakama_Api_NakamaClientMetadata.serviceDescriptor
  }

  internal var interceptors: Nakama_Api_NakamaClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeAddFriendsCall(
    _ request: Nakama_Api_AddFriendsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AddFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.addFriends.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddFriendsInterceptors() ?? []
    )
  }

  internal func makeAddGroupUsersCall(
    _ request: Nakama_Api_AddGroupUsersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AddGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.addGroupUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddGroupUsersInterceptors() ?? []
    )
  }

  internal func makeSessionRefreshCall(
    _ request: Nakama_Api_SessionRefreshRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_SessionRefreshRequest, Nakama_Api_Session> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.sessionRefresh.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSessionRefreshInterceptors() ?? []
    )
  }

  internal func makeSessionLogoutCall(
    _ request: Nakama_Api_SessionLogoutRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_SessionLogoutRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.sessionLogout.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSessionLogoutInterceptors() ?? []
    )
  }

  internal func makeAuthenticateAppleCall(
    _ request: Nakama_Api_AuthenticateAppleRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AuthenticateAppleRequest, Nakama_Api_Session> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.authenticateApple.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateAppleInterceptors() ?? []
    )
  }

  internal func makeAuthenticateCustomCall(
    _ request: Nakama_Api_AuthenticateCustomRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AuthenticateCustomRequest, Nakama_Api_Session> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.authenticateCustom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateCustomInterceptors() ?? []
    )
  }

  internal func makeAuthenticateDeviceCall(
    _ request: Nakama_Api_AuthenticateDeviceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AuthenticateDeviceRequest, Nakama_Api_Session> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.authenticateDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateDeviceInterceptors() ?? []
    )
  }

  internal func makeAuthenticateEmailCall(
    _ request: Nakama_Api_AuthenticateEmailRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AuthenticateEmailRequest, Nakama_Api_Session> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.authenticateEmail.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateEmailInterceptors() ?? []
    )
  }

  internal func makeAuthenticateFacebookCall(
    _ request: Nakama_Api_AuthenticateFacebookRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AuthenticateFacebookRequest, Nakama_Api_Session> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.authenticateFacebook.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateFacebookInterceptors() ?? []
    )
  }

  internal func makeAuthenticateFacebookInstantGameCall(
    _ request: Nakama_Api_AuthenticateFacebookInstantGameRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AuthenticateFacebookInstantGameRequest, Nakama_Api_Session> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.authenticateFacebookInstantGame.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateFacebookInstantGameInterceptors() ?? []
    )
  }

  internal func makeAuthenticateGameCenterCall(
    _ request: Nakama_Api_AuthenticateGameCenterRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AuthenticateGameCenterRequest, Nakama_Api_Session> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.authenticateGameCenter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateGameCenterInterceptors() ?? []
    )
  }

  internal func makeAuthenticateGoogleCall(
    _ request: Nakama_Api_AuthenticateGoogleRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AuthenticateGoogleRequest, Nakama_Api_Session> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.authenticateGoogle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateGoogleInterceptors() ?? []
    )
  }

  internal func makeAuthenticateSteamCall(
    _ request: Nakama_Api_AuthenticateSteamRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AuthenticateSteamRequest, Nakama_Api_Session> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.authenticateSteam.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateSteamInterceptors() ?? []
    )
  }

  internal func makeBanGroupUsersCall(
    _ request: Nakama_Api_BanGroupUsersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_BanGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.banGroupUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBanGroupUsersInterceptors() ?? []
    )
  }

  internal func makeBlockFriendsCall(
    _ request: Nakama_Api_BlockFriendsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_BlockFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.blockFriends.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlockFriendsInterceptors() ?? []
    )
  }

  internal func makeCreateGroupCall(
    _ request: Nakama_Api_CreateGroupRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_CreateGroupRequest, Nakama_Api_Group> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.createGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGroupInterceptors() ?? []
    )
  }

  internal func makeDeleteAccountCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.deleteAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteAccountInterceptors() ?? []
    )
  }

  internal func makeDeleteFriendsCall(
    _ request: Nakama_Api_DeleteFriendsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_DeleteFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.deleteFriends.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteFriendsInterceptors() ?? []
    )
  }

  internal func makeDeleteGroupCall(
    _ request: Nakama_Api_DeleteGroupRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_DeleteGroupRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.deleteGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteGroupInterceptors() ?? []
    )
  }

  internal func makeDeleteLeaderboardRecordCall(
    _ request: Nakama_Api_DeleteLeaderboardRecordRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_DeleteLeaderboardRecordRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.deleteLeaderboardRecord.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteLeaderboardRecordInterceptors() ?? []
    )
  }

  internal func makeDeleteNotificationsCall(
    _ request: Nakama_Api_DeleteNotificationsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_DeleteNotificationsRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.deleteNotifications.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteNotificationsInterceptors() ?? []
    )
  }

  internal func makeDeleteTournamentRecordCall(
    _ request: Nakama_Api_DeleteTournamentRecordRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_DeleteTournamentRecordRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.deleteTournamentRecord.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteTournamentRecordInterceptors() ?? []
    )
  }

  internal func makeDeleteStorageObjectsCall(
    _ request: Nakama_Api_DeleteStorageObjectsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_DeleteStorageObjectsRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.deleteStorageObjects.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteStorageObjectsInterceptors() ?? []
    )
  }

  internal func makeEventCall(
    _ request: Nakama_Api_Event,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_Event, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.event.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEventInterceptors() ?? []
    )
  }

  internal func makeGetAccountCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Nakama_Api_Account> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.getAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountInterceptors() ?? []
    )
  }

  internal func makeGetUsersCall(
    _ request: Nakama_Api_GetUsersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_GetUsersRequest, Nakama_Api_Users> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.getUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUsersInterceptors() ?? []
    )
  }

  internal func makeGetSubscriptionCall(
    _ request: Nakama_Api_GetSubscriptionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_GetSubscriptionRequest, Nakama_Api_ValidatedSubscription> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.getSubscription.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSubscriptionInterceptors() ?? []
    )
  }

  internal func makeHealthcheckCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.healthcheck.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHealthcheckInterceptors() ?? []
    )
  }

  internal func makeImportFacebookFriendsCall(
    _ request: Nakama_Api_ImportFacebookFriendsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ImportFacebookFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.importFacebookFriends.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeImportFacebookFriendsInterceptors() ?? []
    )
  }

  internal func makeImportSteamFriendsCall(
    _ request: Nakama_Api_ImportSteamFriendsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ImportSteamFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.importSteamFriends.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeImportSteamFriendsInterceptors() ?? []
    )
  }

  internal func makeJoinGroupCall(
    _ request: Nakama_Api_JoinGroupRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_JoinGroupRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.joinGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeJoinGroupInterceptors() ?? []
    )
  }

  internal func makeJoinTournamentCall(
    _ request: Nakama_Api_JoinTournamentRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_JoinTournamentRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.joinTournament.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeJoinTournamentInterceptors() ?? []
    )
  }

  internal func makeKickGroupUsersCall(
    _ request: Nakama_Api_KickGroupUsersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_KickGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.kickGroupUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKickGroupUsersInterceptors() ?? []
    )
  }

  internal func makeLeaveGroupCall(
    _ request: Nakama_Api_LeaveGroupRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_LeaveGroupRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.leaveGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLeaveGroupInterceptors() ?? []
    )
  }

  internal func makeLinkAppleCall(
    _ request: Nakama_Api_AccountApple,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AccountApple, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.linkApple.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkAppleInterceptors() ?? []
    )
  }

  internal func makeLinkCustomCall(
    _ request: Nakama_Api_AccountCustom,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AccountCustom, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.linkCustom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkCustomInterceptors() ?? []
    )
  }

  internal func makeLinkDeviceCall(
    _ request: Nakama_Api_AccountDevice,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AccountDevice, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.linkDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkDeviceInterceptors() ?? []
    )
  }

  internal func makeLinkEmailCall(
    _ request: Nakama_Api_AccountEmail,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AccountEmail, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.linkEmail.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkEmailInterceptors() ?? []
    )
  }

  internal func makeLinkFacebookCall(
    _ request: Nakama_Api_LinkFacebookRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_LinkFacebookRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.linkFacebook.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkFacebookInterceptors() ?? []
    )
  }

  internal func makeLinkFacebookInstantGameCall(
    _ request: Nakama_Api_AccountFacebookInstantGame,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AccountFacebookInstantGame, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.linkFacebookInstantGame.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkFacebookInstantGameInterceptors() ?? []
    )
  }

  internal func makeLinkGameCenterCall(
    _ request: Nakama_Api_AccountGameCenter,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AccountGameCenter, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.linkGameCenter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkGameCenterInterceptors() ?? []
    )
  }

  internal func makeLinkGoogleCall(
    _ request: Nakama_Api_AccountGoogle,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AccountGoogle, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.linkGoogle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkGoogleInterceptors() ?? []
    )
  }

  internal func makeLinkSteamCall(
    _ request: Nakama_Api_LinkSteamRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_LinkSteamRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.linkSteam.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkSteamInterceptors() ?? []
    )
  }

  internal func makeListChannelMessagesCall(
    _ request: Nakama_Api_ListChannelMessagesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ListChannelMessagesRequest, Nakama_Api_ChannelMessageList> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listChannelMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListChannelMessagesInterceptors() ?? []
    )
  }

  internal func makeListFriendsCall(
    _ request: Nakama_Api_ListFriendsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ListFriendsRequest, Nakama_Api_FriendList> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listFriends.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListFriendsInterceptors() ?? []
    )
  }

  internal func makeListGroupsCall(
    _ request: Nakama_Api_ListGroupsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ListGroupsRequest, Nakama_Api_GroupList> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listGroups.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListGroupsInterceptors() ?? []
    )
  }

  internal func makeListGroupUsersCall(
    _ request: Nakama_Api_ListGroupUsersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ListGroupUsersRequest, Nakama_Api_GroupUserList> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listGroupUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListGroupUsersInterceptors() ?? []
    )
  }

  internal func makeListLeaderboardRecordsCall(
    _ request: Nakama_Api_ListLeaderboardRecordsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ListLeaderboardRecordsRequest, Nakama_Api_LeaderboardRecordList> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listLeaderboardRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListLeaderboardRecordsInterceptors() ?? []
    )
  }

  internal func makeListLeaderboardRecordsAroundOwnerCall(
    _ request: Nakama_Api_ListLeaderboardRecordsAroundOwnerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ListLeaderboardRecordsAroundOwnerRequest, Nakama_Api_LeaderboardRecordList> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listLeaderboardRecordsAroundOwner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListLeaderboardRecordsAroundOwnerInterceptors() ?? []
    )
  }

  internal func makeListMatchesCall(
    _ request: Nakama_Api_ListMatchesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ListMatchesRequest, Nakama_Api_MatchList> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listMatches.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListMatchesInterceptors() ?? []
    )
  }

  internal func makeListNotificationsCall(
    _ request: Nakama_Api_ListNotificationsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ListNotificationsRequest, Nakama_Api_NotificationList> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listNotifications.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListNotificationsInterceptors() ?? []
    )
  }

  internal func makeListStorageObjectsCall(
    _ request: Nakama_Api_ListStorageObjectsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ListStorageObjectsRequest, Nakama_Api_StorageObjectList> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listStorageObjects.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListStorageObjectsInterceptors() ?? []
    )
  }

  internal func makeListSubscriptionsCall(
    _ request: Nakama_Api_ListSubscriptionsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ListSubscriptionsRequest, Nakama_Api_SubscriptionList> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listSubscriptions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListSubscriptionsInterceptors() ?? []
    )
  }

  internal func makeListTournamentsCall(
    _ request: Nakama_Api_ListTournamentsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ListTournamentsRequest, Nakama_Api_TournamentList> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listTournaments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListTournamentsInterceptors() ?? []
    )
  }

  internal func makeListTournamentRecordsCall(
    _ request: Nakama_Api_ListTournamentRecordsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ListTournamentRecordsRequest, Nakama_Api_TournamentRecordList> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listTournamentRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListTournamentRecordsInterceptors() ?? []
    )
  }

  internal func makeListTournamentRecordsAroundOwnerCall(
    _ request: Nakama_Api_ListTournamentRecordsAroundOwnerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ListTournamentRecordsAroundOwnerRequest, Nakama_Api_TournamentRecordList> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listTournamentRecordsAroundOwner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListTournamentRecordsAroundOwnerInterceptors() ?? []
    )
  }

  internal func makeListUserGroupsCall(
    _ request: Nakama_Api_ListUserGroupsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ListUserGroupsRequest, Nakama_Api_UserGroupList> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listUserGroups.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListUserGroupsInterceptors() ?? []
    )
  }

  internal func makePromoteGroupUsersCall(
    _ request: Nakama_Api_PromoteGroupUsersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_PromoteGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.promoteGroupUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePromoteGroupUsersInterceptors() ?? []
    )
  }

  internal func makeDemoteGroupUsersCall(
    _ request: Nakama_Api_DemoteGroupUsersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_DemoteGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.demoteGroupUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDemoteGroupUsersInterceptors() ?? []
    )
  }

  internal func makeReadStorageObjectsCall(
    _ request: Nakama_Api_ReadStorageObjectsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ReadStorageObjectsRequest, Nakama_Api_StorageObjects> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.readStorageObjects.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReadStorageObjectsInterceptors() ?? []
    )
  }

  internal func makeRpcFuncCall(
    _ request: Nakama_Api_Rpc,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_Rpc, Nakama_Api_Rpc> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.rpcFunc.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRpcFuncInterceptors() ?? []
    )
  }

  internal func makeUnlinkAppleCall(
    _ request: Nakama_Api_AccountApple,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AccountApple, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.unlinkApple.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkAppleInterceptors() ?? []
    )
  }

  internal func makeUnlinkCustomCall(
    _ request: Nakama_Api_AccountCustom,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AccountCustom, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.unlinkCustom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkCustomInterceptors() ?? []
    )
  }

  internal func makeUnlinkDeviceCall(
    _ request: Nakama_Api_AccountDevice,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AccountDevice, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.unlinkDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkDeviceInterceptors() ?? []
    )
  }

  internal func makeUnlinkEmailCall(
    _ request: Nakama_Api_AccountEmail,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AccountEmail, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.unlinkEmail.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkEmailInterceptors() ?? []
    )
  }

  internal func makeUnlinkFacebookCall(
    _ request: Nakama_Api_AccountFacebook,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AccountFacebook, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.unlinkFacebook.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkFacebookInterceptors() ?? []
    )
  }

  internal func makeUnlinkFacebookInstantGameCall(
    _ request: Nakama_Api_AccountFacebookInstantGame,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AccountFacebookInstantGame, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.unlinkFacebookInstantGame.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkFacebookInstantGameInterceptors() ?? []
    )
  }

  internal func makeUnlinkGameCenterCall(
    _ request: Nakama_Api_AccountGameCenter,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AccountGameCenter, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.unlinkGameCenter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkGameCenterInterceptors() ?? []
    )
  }

  internal func makeUnlinkGoogleCall(
    _ request: Nakama_Api_AccountGoogle,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AccountGoogle, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.unlinkGoogle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkGoogleInterceptors() ?? []
    )
  }

  internal func makeUnlinkSteamCall(
    _ request: Nakama_Api_AccountSteam,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_AccountSteam, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.unlinkSteam.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkSteamInterceptors() ?? []
    )
  }

  internal func makeUpdateAccountCall(
    _ request: Nakama_Api_UpdateAccountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_UpdateAccountRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.updateAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateAccountInterceptors() ?? []
    )
  }

  internal func makeUpdateGroupCall(
    _ request: Nakama_Api_UpdateGroupRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_UpdateGroupRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.updateGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupInterceptors() ?? []
    )
  }

  internal func makeValidatePurchaseAppleCall(
    _ request: Nakama_Api_ValidatePurchaseAppleRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ValidatePurchaseAppleRequest, Nakama_Api_ValidatePurchaseResponse> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.validatePurchaseApple.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatePurchaseAppleInterceptors() ?? []
    )
  }

  internal func makeValidateSubscriptionAppleCall(
    _ request: Nakama_Api_ValidateSubscriptionAppleRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ValidateSubscriptionAppleRequest, Nakama_Api_ValidateSubscriptionResponse> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.validateSubscriptionApple.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidateSubscriptionAppleInterceptors() ?? []
    )
  }

  internal func makeValidatePurchaseGoogleCall(
    _ request: Nakama_Api_ValidatePurchaseGoogleRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ValidatePurchaseGoogleRequest, Nakama_Api_ValidatePurchaseResponse> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.validatePurchaseGoogle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatePurchaseGoogleInterceptors() ?? []
    )
  }

  internal func makeValidateSubscriptionGoogleCall(
    _ request: Nakama_Api_ValidateSubscriptionGoogleRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ValidateSubscriptionGoogleRequest, Nakama_Api_ValidateSubscriptionResponse> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.validateSubscriptionGoogle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidateSubscriptionGoogleInterceptors() ?? []
    )
  }

  internal func makeValidatePurchaseHuaweiCall(
    _ request: Nakama_Api_ValidatePurchaseHuaweiRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_ValidatePurchaseHuaweiRequest, Nakama_Api_ValidatePurchaseResponse> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.validatePurchaseHuawei.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatePurchaseHuaweiInterceptors() ?? []
    )
  }

  internal func makeWriteLeaderboardRecordCall(
    _ request: Nakama_Api_WriteLeaderboardRecordRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_WriteLeaderboardRecordRequest, Nakama_Api_LeaderboardRecord> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.writeLeaderboardRecord.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWriteLeaderboardRecordInterceptors() ?? []
    )
  }

  internal func makeWriteStorageObjectsCall(
    _ request: Nakama_Api_WriteStorageObjectsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_WriteStorageObjectsRequest, Nakama_Api_StorageObjectAcks> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.writeStorageObjects.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWriteStorageObjectsInterceptors() ?? []
    )
  }

  internal func makeWriteTournamentRecordCall(
    _ request: Nakama_Api_WriteTournamentRecordRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Nakama_Api_WriteTournamentRecordRequest, Nakama_Api_LeaderboardRecord> {
    return self.makeAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.writeTournamentRecord.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWriteTournamentRecordInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Nakama_Api_NakamaAsyncClientProtocol {
  internal func addFriends(
    _ request: Nakama_Api_AddFriendsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.addFriends.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddFriendsInterceptors() ?? []
    )
  }

  internal func addGroupUsers(
    _ request: Nakama_Api_AddGroupUsersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.addGroupUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddGroupUsersInterceptors() ?? []
    )
  }

  internal func sessionRefresh(
    _ request: Nakama_Api_SessionRefreshRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_Session {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.sessionRefresh.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSessionRefreshInterceptors() ?? []
    )
  }

  internal func sessionLogout(
    _ request: Nakama_Api_SessionLogoutRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.sessionLogout.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSessionLogoutInterceptors() ?? []
    )
  }

  internal func authenticateApple(
    _ request: Nakama_Api_AuthenticateAppleRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_Session {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.authenticateApple.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateAppleInterceptors() ?? []
    )
  }

  internal func authenticateCustom(
    _ request: Nakama_Api_AuthenticateCustomRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_Session {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.authenticateCustom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateCustomInterceptors() ?? []
    )
  }

  internal func authenticateDevice(
    _ request: Nakama_Api_AuthenticateDeviceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_Session {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.authenticateDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateDeviceInterceptors() ?? []
    )
  }

  internal func authenticateEmail(
    _ request: Nakama_Api_AuthenticateEmailRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_Session {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.authenticateEmail.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateEmailInterceptors() ?? []
    )
  }

  internal func authenticateFacebook(
    _ request: Nakama_Api_AuthenticateFacebookRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_Session {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.authenticateFacebook.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateFacebookInterceptors() ?? []
    )
  }

  internal func authenticateFacebookInstantGame(
    _ request: Nakama_Api_AuthenticateFacebookInstantGameRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_Session {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.authenticateFacebookInstantGame.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateFacebookInstantGameInterceptors() ?? []
    )
  }

  internal func authenticateGameCenter(
    _ request: Nakama_Api_AuthenticateGameCenterRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_Session {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.authenticateGameCenter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateGameCenterInterceptors() ?? []
    )
  }

  internal func authenticateGoogle(
    _ request: Nakama_Api_AuthenticateGoogleRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_Session {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.authenticateGoogle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateGoogleInterceptors() ?? []
    )
  }

  internal func authenticateSteam(
    _ request: Nakama_Api_AuthenticateSteamRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_Session {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.authenticateSteam.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateSteamInterceptors() ?? []
    )
  }

  internal func banGroupUsers(
    _ request: Nakama_Api_BanGroupUsersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.banGroupUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBanGroupUsersInterceptors() ?? []
    )
  }

  internal func blockFriends(
    _ request: Nakama_Api_BlockFriendsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.blockFriends.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlockFriendsInterceptors() ?? []
    )
  }

  internal func createGroup(
    _ request: Nakama_Api_CreateGroupRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_Group {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.createGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGroupInterceptors() ?? []
    )
  }

  internal func deleteAccount(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.deleteAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteAccountInterceptors() ?? []
    )
  }

  internal func deleteFriends(
    _ request: Nakama_Api_DeleteFriendsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.deleteFriends.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteFriendsInterceptors() ?? []
    )
  }

  internal func deleteGroup(
    _ request: Nakama_Api_DeleteGroupRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.deleteGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteGroupInterceptors() ?? []
    )
  }

  internal func deleteLeaderboardRecord(
    _ request: Nakama_Api_DeleteLeaderboardRecordRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.deleteLeaderboardRecord.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteLeaderboardRecordInterceptors() ?? []
    )
  }

  internal func deleteNotifications(
    _ request: Nakama_Api_DeleteNotificationsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.deleteNotifications.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteNotificationsInterceptors() ?? []
    )
  }

  internal func deleteTournamentRecord(
    _ request: Nakama_Api_DeleteTournamentRecordRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.deleteTournamentRecord.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteTournamentRecordInterceptors() ?? []
    )
  }

  internal func deleteStorageObjects(
    _ request: Nakama_Api_DeleteStorageObjectsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.deleteStorageObjects.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteStorageObjectsInterceptors() ?? []
    )
  }

  internal func event(
    _ request: Nakama_Api_Event,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.event.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEventInterceptors() ?? []
    )
  }

  internal func getAccount(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_Account {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.getAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountInterceptors() ?? []
    )
  }

  internal func getUsers(
    _ request: Nakama_Api_GetUsersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_Users {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.getUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUsersInterceptors() ?? []
    )
  }

  internal func getSubscription(
    _ request: Nakama_Api_GetSubscriptionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_ValidatedSubscription {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.getSubscription.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSubscriptionInterceptors() ?? []
    )
  }

  internal func healthcheck(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.healthcheck.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHealthcheckInterceptors() ?? []
    )
  }

  internal func importFacebookFriends(
    _ request: Nakama_Api_ImportFacebookFriendsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.importFacebookFriends.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeImportFacebookFriendsInterceptors() ?? []
    )
  }

  internal func importSteamFriends(
    _ request: Nakama_Api_ImportSteamFriendsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.importSteamFriends.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeImportSteamFriendsInterceptors() ?? []
    )
  }

  internal func joinGroup(
    _ request: Nakama_Api_JoinGroupRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.joinGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeJoinGroupInterceptors() ?? []
    )
  }

  internal func joinTournament(
    _ request: Nakama_Api_JoinTournamentRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.joinTournament.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeJoinTournamentInterceptors() ?? []
    )
  }

  internal func kickGroupUsers(
    _ request: Nakama_Api_KickGroupUsersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.kickGroupUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKickGroupUsersInterceptors() ?? []
    )
  }

  internal func leaveGroup(
    _ request: Nakama_Api_LeaveGroupRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.leaveGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLeaveGroupInterceptors() ?? []
    )
  }

  internal func linkApple(
    _ request: Nakama_Api_AccountApple,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.linkApple.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkAppleInterceptors() ?? []
    )
  }

  internal func linkCustom(
    _ request: Nakama_Api_AccountCustom,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.linkCustom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkCustomInterceptors() ?? []
    )
  }

  internal func linkDevice(
    _ request: Nakama_Api_AccountDevice,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.linkDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkDeviceInterceptors() ?? []
    )
  }

  internal func linkEmail(
    _ request: Nakama_Api_AccountEmail,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.linkEmail.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkEmailInterceptors() ?? []
    )
  }

  internal func linkFacebook(
    _ request: Nakama_Api_LinkFacebookRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.linkFacebook.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkFacebookInterceptors() ?? []
    )
  }

  internal func linkFacebookInstantGame(
    _ request: Nakama_Api_AccountFacebookInstantGame,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.linkFacebookInstantGame.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkFacebookInstantGameInterceptors() ?? []
    )
  }

  internal func linkGameCenter(
    _ request: Nakama_Api_AccountGameCenter,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.linkGameCenter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkGameCenterInterceptors() ?? []
    )
  }

  internal func linkGoogle(
    _ request: Nakama_Api_AccountGoogle,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.linkGoogle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkGoogleInterceptors() ?? []
    )
  }

  internal func linkSteam(
    _ request: Nakama_Api_LinkSteamRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.linkSteam.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkSteamInterceptors() ?? []
    )
  }

  internal func listChannelMessages(
    _ request: Nakama_Api_ListChannelMessagesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_ChannelMessageList {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listChannelMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListChannelMessagesInterceptors() ?? []
    )
  }

  internal func listFriends(
    _ request: Nakama_Api_ListFriendsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_FriendList {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listFriends.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListFriendsInterceptors() ?? []
    )
  }

  internal func listGroups(
    _ request: Nakama_Api_ListGroupsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_GroupList {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listGroups.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListGroupsInterceptors() ?? []
    )
  }

  internal func listGroupUsers(
    _ request: Nakama_Api_ListGroupUsersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_GroupUserList {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listGroupUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListGroupUsersInterceptors() ?? []
    )
  }

  internal func listLeaderboardRecords(
    _ request: Nakama_Api_ListLeaderboardRecordsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_LeaderboardRecordList {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listLeaderboardRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListLeaderboardRecordsInterceptors() ?? []
    )
  }

  internal func listLeaderboardRecordsAroundOwner(
    _ request: Nakama_Api_ListLeaderboardRecordsAroundOwnerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_LeaderboardRecordList {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listLeaderboardRecordsAroundOwner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListLeaderboardRecordsAroundOwnerInterceptors() ?? []
    )
  }

  internal func listMatches(
    _ request: Nakama_Api_ListMatchesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_MatchList {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listMatches.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListMatchesInterceptors() ?? []
    )
  }

  internal func listNotifications(
    _ request: Nakama_Api_ListNotificationsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_NotificationList {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listNotifications.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListNotificationsInterceptors() ?? []
    )
  }

  internal func listStorageObjects(
    _ request: Nakama_Api_ListStorageObjectsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_StorageObjectList {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listStorageObjects.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListStorageObjectsInterceptors() ?? []
    )
  }

  internal func listSubscriptions(
    _ request: Nakama_Api_ListSubscriptionsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_SubscriptionList {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listSubscriptions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListSubscriptionsInterceptors() ?? []
    )
  }

  internal func listTournaments(
    _ request: Nakama_Api_ListTournamentsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_TournamentList {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listTournaments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListTournamentsInterceptors() ?? []
    )
  }

  internal func listTournamentRecords(
    _ request: Nakama_Api_ListTournamentRecordsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_TournamentRecordList {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listTournamentRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListTournamentRecordsInterceptors() ?? []
    )
  }

  internal func listTournamentRecordsAroundOwner(
    _ request: Nakama_Api_ListTournamentRecordsAroundOwnerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_TournamentRecordList {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listTournamentRecordsAroundOwner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListTournamentRecordsAroundOwnerInterceptors() ?? []
    )
  }

  internal func listUserGroups(
    _ request: Nakama_Api_ListUserGroupsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_UserGroupList {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.listUserGroups.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListUserGroupsInterceptors() ?? []
    )
  }

  internal func promoteGroupUsers(
    _ request: Nakama_Api_PromoteGroupUsersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.promoteGroupUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePromoteGroupUsersInterceptors() ?? []
    )
  }

  internal func demoteGroupUsers(
    _ request: Nakama_Api_DemoteGroupUsersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.demoteGroupUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDemoteGroupUsersInterceptors() ?? []
    )
  }

  internal func readStorageObjects(
    _ request: Nakama_Api_ReadStorageObjectsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_StorageObjects {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.readStorageObjects.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReadStorageObjectsInterceptors() ?? []
    )
  }

  internal func rpcFunc(
    _ request: Nakama_Api_Rpc,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_Rpc {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.rpcFunc.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRpcFuncInterceptors() ?? []
    )
  }

  internal func unlinkApple(
    _ request: Nakama_Api_AccountApple,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.unlinkApple.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkAppleInterceptors() ?? []
    )
  }

  internal func unlinkCustom(
    _ request: Nakama_Api_AccountCustom,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.unlinkCustom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkCustomInterceptors() ?? []
    )
  }

  internal func unlinkDevice(
    _ request: Nakama_Api_AccountDevice,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.unlinkDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkDeviceInterceptors() ?? []
    )
  }

  internal func unlinkEmail(
    _ request: Nakama_Api_AccountEmail,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.unlinkEmail.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkEmailInterceptors() ?? []
    )
  }

  internal func unlinkFacebook(
    _ request: Nakama_Api_AccountFacebook,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.unlinkFacebook.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkFacebookInterceptors() ?? []
    )
  }

  internal func unlinkFacebookInstantGame(
    _ request: Nakama_Api_AccountFacebookInstantGame,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.unlinkFacebookInstantGame.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkFacebookInstantGameInterceptors() ?? []
    )
  }

  internal func unlinkGameCenter(
    _ request: Nakama_Api_AccountGameCenter,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.unlinkGameCenter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkGameCenterInterceptors() ?? []
    )
  }

  internal func unlinkGoogle(
    _ request: Nakama_Api_AccountGoogle,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.unlinkGoogle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkGoogleInterceptors() ?? []
    )
  }

  internal func unlinkSteam(
    _ request: Nakama_Api_AccountSteam,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.unlinkSteam.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkSteamInterceptors() ?? []
    )
  }

  internal func updateAccount(
    _ request: Nakama_Api_UpdateAccountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.updateAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateAccountInterceptors() ?? []
    )
  }

  internal func updateGroup(
    _ request: Nakama_Api_UpdateGroupRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.updateGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupInterceptors() ?? []
    )
  }

  internal func validatePurchaseApple(
    _ request: Nakama_Api_ValidatePurchaseAppleRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_ValidatePurchaseResponse {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.validatePurchaseApple.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatePurchaseAppleInterceptors() ?? []
    )
  }

  internal func validateSubscriptionApple(
    _ request: Nakama_Api_ValidateSubscriptionAppleRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_ValidateSubscriptionResponse {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.validateSubscriptionApple.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidateSubscriptionAppleInterceptors() ?? []
    )
  }

  internal func validatePurchaseGoogle(
    _ request: Nakama_Api_ValidatePurchaseGoogleRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_ValidatePurchaseResponse {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.validatePurchaseGoogle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatePurchaseGoogleInterceptors() ?? []
    )
  }

  internal func validateSubscriptionGoogle(
    _ request: Nakama_Api_ValidateSubscriptionGoogleRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_ValidateSubscriptionResponse {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.validateSubscriptionGoogle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidateSubscriptionGoogleInterceptors() ?? []
    )
  }

  internal func validatePurchaseHuawei(
    _ request: Nakama_Api_ValidatePurchaseHuaweiRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_ValidatePurchaseResponse {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.validatePurchaseHuawei.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatePurchaseHuaweiInterceptors() ?? []
    )
  }

  internal func writeLeaderboardRecord(
    _ request: Nakama_Api_WriteLeaderboardRecordRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_LeaderboardRecord {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.writeLeaderboardRecord.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWriteLeaderboardRecordInterceptors() ?? []
    )
  }

  internal func writeStorageObjects(
    _ request: Nakama_Api_WriteStorageObjectsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_StorageObjectAcks {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.writeStorageObjects.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWriteStorageObjectsInterceptors() ?? []
    )
  }

  internal func writeTournamentRecord(
    _ request: Nakama_Api_WriteTournamentRecordRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Nakama_Api_LeaderboardRecord {
    return try await self.performAsyncUnaryCall(
      path: Nakama_Api_NakamaClientMetadata.Methods.writeTournamentRecord.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWriteTournamentRecordInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Nakama_Api_NakamaAsyncClient: Nakama_Api_NakamaAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Nakama_Api_NakamaClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Nakama_Api_NakamaClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Nakama_Api_NakamaClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'addFriends'.
  func makeAddFriendsInterceptors() -> [ClientInterceptor<Nakama_Api_AddFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'addGroupUsers'.
  func makeAddGroupUsersInterceptors() -> [ClientInterceptor<Nakama_Api_AddGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'sessionRefresh'.
  func makeSessionRefreshInterceptors() -> [ClientInterceptor<Nakama_Api_SessionRefreshRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when invoking 'sessionLogout'.
  func makeSessionLogoutInterceptors() -> [ClientInterceptor<Nakama_Api_SessionLogoutRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'authenticateApple'.
  func makeAuthenticateAppleInterceptors() -> [ClientInterceptor<Nakama_Api_AuthenticateAppleRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when invoking 'authenticateCustom'.
  func makeAuthenticateCustomInterceptors() -> [ClientInterceptor<Nakama_Api_AuthenticateCustomRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when invoking 'authenticateDevice'.
  func makeAuthenticateDeviceInterceptors() -> [ClientInterceptor<Nakama_Api_AuthenticateDeviceRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when invoking 'authenticateEmail'.
  func makeAuthenticateEmailInterceptors() -> [ClientInterceptor<Nakama_Api_AuthenticateEmailRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when invoking 'authenticateFacebook'.
  func makeAuthenticateFacebookInterceptors() -> [ClientInterceptor<Nakama_Api_AuthenticateFacebookRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when invoking 'authenticateFacebookInstantGame'.
  func makeAuthenticateFacebookInstantGameInterceptors() -> [ClientInterceptor<Nakama_Api_AuthenticateFacebookInstantGameRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when invoking 'authenticateGameCenter'.
  func makeAuthenticateGameCenterInterceptors() -> [ClientInterceptor<Nakama_Api_AuthenticateGameCenterRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when invoking 'authenticateGoogle'.
  func makeAuthenticateGoogleInterceptors() -> [ClientInterceptor<Nakama_Api_AuthenticateGoogleRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when invoking 'authenticateSteam'.
  func makeAuthenticateSteamInterceptors() -> [ClientInterceptor<Nakama_Api_AuthenticateSteamRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when invoking 'banGroupUsers'.
  func makeBanGroupUsersInterceptors() -> [ClientInterceptor<Nakama_Api_BanGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'blockFriends'.
  func makeBlockFriendsInterceptors() -> [ClientInterceptor<Nakama_Api_BlockFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'createGroup'.
  func makeCreateGroupInterceptors() -> [ClientInterceptor<Nakama_Api_CreateGroupRequest, Nakama_Api_Group>]

  /// - Returns: Interceptors to use when invoking 'deleteAccount'.
  func makeDeleteAccountInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'deleteFriends'.
  func makeDeleteFriendsInterceptors() -> [ClientInterceptor<Nakama_Api_DeleteFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'deleteGroup'.
  func makeDeleteGroupInterceptors() -> [ClientInterceptor<Nakama_Api_DeleteGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'deleteLeaderboardRecord'.
  func makeDeleteLeaderboardRecordInterceptors() -> [ClientInterceptor<Nakama_Api_DeleteLeaderboardRecordRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'deleteNotifications'.
  func makeDeleteNotificationsInterceptors() -> [ClientInterceptor<Nakama_Api_DeleteNotificationsRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'deleteTournamentRecord'.
  func makeDeleteTournamentRecordInterceptors() -> [ClientInterceptor<Nakama_Api_DeleteTournamentRecordRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'deleteStorageObjects'.
  func makeDeleteStorageObjectsInterceptors() -> [ClientInterceptor<Nakama_Api_DeleteStorageObjectsRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'event'.
  func makeEventInterceptors() -> [ClientInterceptor<Nakama_Api_Event, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'getAccount'.
  func makeGetAccountInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Nakama_Api_Account>]

  /// - Returns: Interceptors to use when invoking 'getUsers'.
  func makeGetUsersInterceptors() -> [ClientInterceptor<Nakama_Api_GetUsersRequest, Nakama_Api_Users>]

  /// - Returns: Interceptors to use when invoking 'getSubscription'.
  func makeGetSubscriptionInterceptors() -> [ClientInterceptor<Nakama_Api_GetSubscriptionRequest, Nakama_Api_ValidatedSubscription>]

  /// - Returns: Interceptors to use when invoking 'healthcheck'.
  func makeHealthcheckInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'importFacebookFriends'.
  func makeImportFacebookFriendsInterceptors() -> [ClientInterceptor<Nakama_Api_ImportFacebookFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'importSteamFriends'.
  func makeImportSteamFriendsInterceptors() -> [ClientInterceptor<Nakama_Api_ImportSteamFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'joinGroup'.
  func makeJoinGroupInterceptors() -> [ClientInterceptor<Nakama_Api_JoinGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'joinTournament'.
  func makeJoinTournamentInterceptors() -> [ClientInterceptor<Nakama_Api_JoinTournamentRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'kickGroupUsers'.
  func makeKickGroupUsersInterceptors() -> [ClientInterceptor<Nakama_Api_KickGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'leaveGroup'.
  func makeLeaveGroupInterceptors() -> [ClientInterceptor<Nakama_Api_LeaveGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'linkApple'.
  func makeLinkAppleInterceptors() -> [ClientInterceptor<Nakama_Api_AccountApple, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'linkCustom'.
  func makeLinkCustomInterceptors() -> [ClientInterceptor<Nakama_Api_AccountCustom, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'linkDevice'.
  func makeLinkDeviceInterceptors() -> [ClientInterceptor<Nakama_Api_AccountDevice, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'linkEmail'.
  func makeLinkEmailInterceptors() -> [ClientInterceptor<Nakama_Api_AccountEmail, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'linkFacebook'.
  func makeLinkFacebookInterceptors() -> [ClientInterceptor<Nakama_Api_LinkFacebookRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'linkFacebookInstantGame'.
  func makeLinkFacebookInstantGameInterceptors() -> [ClientInterceptor<Nakama_Api_AccountFacebookInstantGame, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'linkGameCenter'.
  func makeLinkGameCenterInterceptors() -> [ClientInterceptor<Nakama_Api_AccountGameCenter, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'linkGoogle'.
  func makeLinkGoogleInterceptors() -> [ClientInterceptor<Nakama_Api_AccountGoogle, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'linkSteam'.
  func makeLinkSteamInterceptors() -> [ClientInterceptor<Nakama_Api_LinkSteamRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'listChannelMessages'.
  func makeListChannelMessagesInterceptors() -> [ClientInterceptor<Nakama_Api_ListChannelMessagesRequest, Nakama_Api_ChannelMessageList>]

  /// - Returns: Interceptors to use when invoking 'listFriends'.
  func makeListFriendsInterceptors() -> [ClientInterceptor<Nakama_Api_ListFriendsRequest, Nakama_Api_FriendList>]

  /// - Returns: Interceptors to use when invoking 'listGroups'.
  func makeListGroupsInterceptors() -> [ClientInterceptor<Nakama_Api_ListGroupsRequest, Nakama_Api_GroupList>]

  /// - Returns: Interceptors to use when invoking 'listGroupUsers'.
  func makeListGroupUsersInterceptors() -> [ClientInterceptor<Nakama_Api_ListGroupUsersRequest, Nakama_Api_GroupUserList>]

  /// - Returns: Interceptors to use when invoking 'listLeaderboardRecords'.
  func makeListLeaderboardRecordsInterceptors() -> [ClientInterceptor<Nakama_Api_ListLeaderboardRecordsRequest, Nakama_Api_LeaderboardRecordList>]

  /// - Returns: Interceptors to use when invoking 'listLeaderboardRecordsAroundOwner'.
  func makeListLeaderboardRecordsAroundOwnerInterceptors() -> [ClientInterceptor<Nakama_Api_ListLeaderboardRecordsAroundOwnerRequest, Nakama_Api_LeaderboardRecordList>]

  /// - Returns: Interceptors to use when invoking 'listMatches'.
  func makeListMatchesInterceptors() -> [ClientInterceptor<Nakama_Api_ListMatchesRequest, Nakama_Api_MatchList>]

  /// - Returns: Interceptors to use when invoking 'listNotifications'.
  func makeListNotificationsInterceptors() -> [ClientInterceptor<Nakama_Api_ListNotificationsRequest, Nakama_Api_NotificationList>]

  /// - Returns: Interceptors to use when invoking 'listStorageObjects'.
  func makeListStorageObjectsInterceptors() -> [ClientInterceptor<Nakama_Api_ListStorageObjectsRequest, Nakama_Api_StorageObjectList>]

  /// - Returns: Interceptors to use when invoking 'listSubscriptions'.
  func makeListSubscriptionsInterceptors() -> [ClientInterceptor<Nakama_Api_ListSubscriptionsRequest, Nakama_Api_SubscriptionList>]

  /// - Returns: Interceptors to use when invoking 'listTournaments'.
  func makeListTournamentsInterceptors() -> [ClientInterceptor<Nakama_Api_ListTournamentsRequest, Nakama_Api_TournamentList>]

  /// - Returns: Interceptors to use when invoking 'listTournamentRecords'.
  func makeListTournamentRecordsInterceptors() -> [ClientInterceptor<Nakama_Api_ListTournamentRecordsRequest, Nakama_Api_TournamentRecordList>]

  /// - Returns: Interceptors to use when invoking 'listTournamentRecordsAroundOwner'.
  func makeListTournamentRecordsAroundOwnerInterceptors() -> [ClientInterceptor<Nakama_Api_ListTournamentRecordsAroundOwnerRequest, Nakama_Api_TournamentRecordList>]

  /// - Returns: Interceptors to use when invoking 'listUserGroups'.
  func makeListUserGroupsInterceptors() -> [ClientInterceptor<Nakama_Api_ListUserGroupsRequest, Nakama_Api_UserGroupList>]

  /// - Returns: Interceptors to use when invoking 'promoteGroupUsers'.
  func makePromoteGroupUsersInterceptors() -> [ClientInterceptor<Nakama_Api_PromoteGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'demoteGroupUsers'.
  func makeDemoteGroupUsersInterceptors() -> [ClientInterceptor<Nakama_Api_DemoteGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'readStorageObjects'.
  func makeReadStorageObjectsInterceptors() -> [ClientInterceptor<Nakama_Api_ReadStorageObjectsRequest, Nakama_Api_StorageObjects>]

  /// - Returns: Interceptors to use when invoking 'rpcFunc'.
  func makeRpcFuncInterceptors() -> [ClientInterceptor<Nakama_Api_Rpc, Nakama_Api_Rpc>]

  /// - Returns: Interceptors to use when invoking 'unlinkApple'.
  func makeUnlinkAppleInterceptors() -> [ClientInterceptor<Nakama_Api_AccountApple, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'unlinkCustom'.
  func makeUnlinkCustomInterceptors() -> [ClientInterceptor<Nakama_Api_AccountCustom, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'unlinkDevice'.
  func makeUnlinkDeviceInterceptors() -> [ClientInterceptor<Nakama_Api_AccountDevice, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'unlinkEmail'.
  func makeUnlinkEmailInterceptors() -> [ClientInterceptor<Nakama_Api_AccountEmail, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'unlinkFacebook'.
  func makeUnlinkFacebookInterceptors() -> [ClientInterceptor<Nakama_Api_AccountFacebook, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'unlinkFacebookInstantGame'.
  func makeUnlinkFacebookInstantGameInterceptors() -> [ClientInterceptor<Nakama_Api_AccountFacebookInstantGame, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'unlinkGameCenter'.
  func makeUnlinkGameCenterInterceptors() -> [ClientInterceptor<Nakama_Api_AccountGameCenter, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'unlinkGoogle'.
  func makeUnlinkGoogleInterceptors() -> [ClientInterceptor<Nakama_Api_AccountGoogle, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'unlinkSteam'.
  func makeUnlinkSteamInterceptors() -> [ClientInterceptor<Nakama_Api_AccountSteam, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'updateAccount'.
  func makeUpdateAccountInterceptors() -> [ClientInterceptor<Nakama_Api_UpdateAccountRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'updateGroup'.
  func makeUpdateGroupInterceptors() -> [ClientInterceptor<Nakama_Api_UpdateGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'validatePurchaseApple'.
  func makeValidatePurchaseAppleInterceptors() -> [ClientInterceptor<Nakama_Api_ValidatePurchaseAppleRequest, Nakama_Api_ValidatePurchaseResponse>]

  /// - Returns: Interceptors to use when invoking 'validateSubscriptionApple'.
  func makeValidateSubscriptionAppleInterceptors() -> [ClientInterceptor<Nakama_Api_ValidateSubscriptionAppleRequest, Nakama_Api_ValidateSubscriptionResponse>]

  /// - Returns: Interceptors to use when invoking 'validatePurchaseGoogle'.
  func makeValidatePurchaseGoogleInterceptors() -> [ClientInterceptor<Nakama_Api_ValidatePurchaseGoogleRequest, Nakama_Api_ValidatePurchaseResponse>]

  /// - Returns: Interceptors to use when invoking 'validateSubscriptionGoogle'.
  func makeValidateSubscriptionGoogleInterceptors() -> [ClientInterceptor<Nakama_Api_ValidateSubscriptionGoogleRequest, Nakama_Api_ValidateSubscriptionResponse>]

  /// - Returns: Interceptors to use when invoking 'validatePurchaseHuawei'.
  func makeValidatePurchaseHuaweiInterceptors() -> [ClientInterceptor<Nakama_Api_ValidatePurchaseHuaweiRequest, Nakama_Api_ValidatePurchaseResponse>]

  /// - Returns: Interceptors to use when invoking 'writeLeaderboardRecord'.
  func makeWriteLeaderboardRecordInterceptors() -> [ClientInterceptor<Nakama_Api_WriteLeaderboardRecordRequest, Nakama_Api_LeaderboardRecord>]

  /// - Returns: Interceptors to use when invoking 'writeStorageObjects'.
  func makeWriteStorageObjectsInterceptors() -> [ClientInterceptor<Nakama_Api_WriteStorageObjectsRequest, Nakama_Api_StorageObjectAcks>]

  /// - Returns: Interceptors to use when invoking 'writeTournamentRecord'.
  func makeWriteTournamentRecordInterceptors() -> [ClientInterceptor<Nakama_Api_WriteTournamentRecordRequest, Nakama_Api_LeaderboardRecord>]
}

internal enum Nakama_Api_NakamaClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Nakama",
    fullName: "nakama.api.Nakama",
    methods: [
      Nakama_Api_NakamaClientMetadata.Methods.addFriends,
      Nakama_Api_NakamaClientMetadata.Methods.addGroupUsers,
      Nakama_Api_NakamaClientMetadata.Methods.sessionRefresh,
      Nakama_Api_NakamaClientMetadata.Methods.sessionLogout,
      Nakama_Api_NakamaClientMetadata.Methods.authenticateApple,
      Nakama_Api_NakamaClientMetadata.Methods.authenticateCustom,
      Nakama_Api_NakamaClientMetadata.Methods.authenticateDevice,
      Nakama_Api_NakamaClientMetadata.Methods.authenticateEmail,
      Nakama_Api_NakamaClientMetadata.Methods.authenticateFacebook,
      Nakama_Api_NakamaClientMetadata.Methods.authenticateFacebookInstantGame,
      Nakama_Api_NakamaClientMetadata.Methods.authenticateGameCenter,
      Nakama_Api_NakamaClientMetadata.Methods.authenticateGoogle,
      Nakama_Api_NakamaClientMetadata.Methods.authenticateSteam,
      Nakama_Api_NakamaClientMetadata.Methods.banGroupUsers,
      Nakama_Api_NakamaClientMetadata.Methods.blockFriends,
      Nakama_Api_NakamaClientMetadata.Methods.createGroup,
      Nakama_Api_NakamaClientMetadata.Methods.deleteAccount,
      Nakama_Api_NakamaClientMetadata.Methods.deleteFriends,
      Nakama_Api_NakamaClientMetadata.Methods.deleteGroup,
      Nakama_Api_NakamaClientMetadata.Methods.deleteLeaderboardRecord,
      Nakama_Api_NakamaClientMetadata.Methods.deleteNotifications,
      Nakama_Api_NakamaClientMetadata.Methods.deleteTournamentRecord,
      Nakama_Api_NakamaClientMetadata.Methods.deleteStorageObjects,
      Nakama_Api_NakamaClientMetadata.Methods.event,
      Nakama_Api_NakamaClientMetadata.Methods.getAccount,
      Nakama_Api_NakamaClientMetadata.Methods.getUsers,
      Nakama_Api_NakamaClientMetadata.Methods.getSubscription,
      Nakama_Api_NakamaClientMetadata.Methods.healthcheck,
      Nakama_Api_NakamaClientMetadata.Methods.importFacebookFriends,
      Nakama_Api_NakamaClientMetadata.Methods.importSteamFriends,
      Nakama_Api_NakamaClientMetadata.Methods.joinGroup,
      Nakama_Api_NakamaClientMetadata.Methods.joinTournament,
      Nakama_Api_NakamaClientMetadata.Methods.kickGroupUsers,
      Nakama_Api_NakamaClientMetadata.Methods.leaveGroup,
      Nakama_Api_NakamaClientMetadata.Methods.linkApple,
      Nakama_Api_NakamaClientMetadata.Methods.linkCustom,
      Nakama_Api_NakamaClientMetadata.Methods.linkDevice,
      Nakama_Api_NakamaClientMetadata.Methods.linkEmail,
      Nakama_Api_NakamaClientMetadata.Methods.linkFacebook,
      Nakama_Api_NakamaClientMetadata.Methods.linkFacebookInstantGame,
      Nakama_Api_NakamaClientMetadata.Methods.linkGameCenter,
      Nakama_Api_NakamaClientMetadata.Methods.linkGoogle,
      Nakama_Api_NakamaClientMetadata.Methods.linkSteam,
      Nakama_Api_NakamaClientMetadata.Methods.listChannelMessages,
      Nakama_Api_NakamaClientMetadata.Methods.listFriends,
      Nakama_Api_NakamaClientMetadata.Methods.listGroups,
      Nakama_Api_NakamaClientMetadata.Methods.listGroupUsers,
      Nakama_Api_NakamaClientMetadata.Methods.listLeaderboardRecords,
      Nakama_Api_NakamaClientMetadata.Methods.listLeaderboardRecordsAroundOwner,
      Nakama_Api_NakamaClientMetadata.Methods.listMatches,
      Nakama_Api_NakamaClientMetadata.Methods.listNotifications,
      Nakama_Api_NakamaClientMetadata.Methods.listStorageObjects,
      Nakama_Api_NakamaClientMetadata.Methods.listSubscriptions,
      Nakama_Api_NakamaClientMetadata.Methods.listTournaments,
      Nakama_Api_NakamaClientMetadata.Methods.listTournamentRecords,
      Nakama_Api_NakamaClientMetadata.Methods.listTournamentRecordsAroundOwner,
      Nakama_Api_NakamaClientMetadata.Methods.listUserGroups,
      Nakama_Api_NakamaClientMetadata.Methods.promoteGroupUsers,
      Nakama_Api_NakamaClientMetadata.Methods.demoteGroupUsers,
      Nakama_Api_NakamaClientMetadata.Methods.readStorageObjects,
      Nakama_Api_NakamaClientMetadata.Methods.rpcFunc,
      Nakama_Api_NakamaClientMetadata.Methods.unlinkApple,
      Nakama_Api_NakamaClientMetadata.Methods.unlinkCustom,
      Nakama_Api_NakamaClientMetadata.Methods.unlinkDevice,
      Nakama_Api_NakamaClientMetadata.Methods.unlinkEmail,
      Nakama_Api_NakamaClientMetadata.Methods.unlinkFacebook,
      Nakama_Api_NakamaClientMetadata.Methods.unlinkFacebookInstantGame,
      Nakama_Api_NakamaClientMetadata.Methods.unlinkGameCenter,
      Nakama_Api_NakamaClientMetadata.Methods.unlinkGoogle,
      Nakama_Api_NakamaClientMetadata.Methods.unlinkSteam,
      Nakama_Api_NakamaClientMetadata.Methods.updateAccount,
      Nakama_Api_NakamaClientMetadata.Methods.updateGroup,
      Nakama_Api_NakamaClientMetadata.Methods.validatePurchaseApple,
      Nakama_Api_NakamaClientMetadata.Methods.validateSubscriptionApple,
      Nakama_Api_NakamaClientMetadata.Methods.validatePurchaseGoogle,
      Nakama_Api_NakamaClientMetadata.Methods.validateSubscriptionGoogle,
      Nakama_Api_NakamaClientMetadata.Methods.validatePurchaseHuawei,
      Nakama_Api_NakamaClientMetadata.Methods.writeLeaderboardRecord,
      Nakama_Api_NakamaClientMetadata.Methods.writeStorageObjects,
      Nakama_Api_NakamaClientMetadata.Methods.writeTournamentRecord,
    ]
  )

  internal enum Methods {
    internal static let addFriends = GRPCMethodDescriptor(
      name: "AddFriends",
      path: "/nakama.api.Nakama/AddFriends",
      type: GRPCCallType.unary
    )

    internal static let addGroupUsers = GRPCMethodDescriptor(
      name: "AddGroupUsers",
      path: "/nakama.api.Nakama/AddGroupUsers",
      type: GRPCCallType.unary
    )

    internal static let sessionRefresh = GRPCMethodDescriptor(
      name: "SessionRefresh",
      path: "/nakama.api.Nakama/SessionRefresh",
      type: GRPCCallType.unary
    )

    internal static let sessionLogout = GRPCMethodDescriptor(
      name: "SessionLogout",
      path: "/nakama.api.Nakama/SessionLogout",
      type: GRPCCallType.unary
    )

    internal static let authenticateApple = GRPCMethodDescriptor(
      name: "AuthenticateApple",
      path: "/nakama.api.Nakama/AuthenticateApple",
      type: GRPCCallType.unary
    )

    internal static let authenticateCustom = GRPCMethodDescriptor(
      name: "AuthenticateCustom",
      path: "/nakama.api.Nakama/AuthenticateCustom",
      type: GRPCCallType.unary
    )

    internal static let authenticateDevice = GRPCMethodDescriptor(
      name: "AuthenticateDevice",
      path: "/nakama.api.Nakama/AuthenticateDevice",
      type: GRPCCallType.unary
    )

    internal static let authenticateEmail = GRPCMethodDescriptor(
      name: "AuthenticateEmail",
      path: "/nakama.api.Nakama/AuthenticateEmail",
      type: GRPCCallType.unary
    )

    internal static let authenticateFacebook = GRPCMethodDescriptor(
      name: "AuthenticateFacebook",
      path: "/nakama.api.Nakama/AuthenticateFacebook",
      type: GRPCCallType.unary
    )

    internal static let authenticateFacebookInstantGame = GRPCMethodDescriptor(
      name: "AuthenticateFacebookInstantGame",
      path: "/nakama.api.Nakama/AuthenticateFacebookInstantGame",
      type: GRPCCallType.unary
    )

    internal static let authenticateGameCenter = GRPCMethodDescriptor(
      name: "AuthenticateGameCenter",
      path: "/nakama.api.Nakama/AuthenticateGameCenter",
      type: GRPCCallType.unary
    )

    internal static let authenticateGoogle = GRPCMethodDescriptor(
      name: "AuthenticateGoogle",
      path: "/nakama.api.Nakama/AuthenticateGoogle",
      type: GRPCCallType.unary
    )

    internal static let authenticateSteam = GRPCMethodDescriptor(
      name: "AuthenticateSteam",
      path: "/nakama.api.Nakama/AuthenticateSteam",
      type: GRPCCallType.unary
    )

    internal static let banGroupUsers = GRPCMethodDescriptor(
      name: "BanGroupUsers",
      path: "/nakama.api.Nakama/BanGroupUsers",
      type: GRPCCallType.unary
    )

    internal static let blockFriends = GRPCMethodDescriptor(
      name: "BlockFriends",
      path: "/nakama.api.Nakama/BlockFriends",
      type: GRPCCallType.unary
    )

    internal static let createGroup = GRPCMethodDescriptor(
      name: "CreateGroup",
      path: "/nakama.api.Nakama/CreateGroup",
      type: GRPCCallType.unary
    )

    internal static let deleteAccount = GRPCMethodDescriptor(
      name: "DeleteAccount",
      path: "/nakama.api.Nakama/DeleteAccount",
      type: GRPCCallType.unary
    )

    internal static let deleteFriends = GRPCMethodDescriptor(
      name: "DeleteFriends",
      path: "/nakama.api.Nakama/DeleteFriends",
      type: GRPCCallType.unary
    )

    internal static let deleteGroup = GRPCMethodDescriptor(
      name: "DeleteGroup",
      path: "/nakama.api.Nakama/DeleteGroup",
      type: GRPCCallType.unary
    )

    internal static let deleteLeaderboardRecord = GRPCMethodDescriptor(
      name: "DeleteLeaderboardRecord",
      path: "/nakama.api.Nakama/DeleteLeaderboardRecord",
      type: GRPCCallType.unary
    )

    internal static let deleteNotifications = GRPCMethodDescriptor(
      name: "DeleteNotifications",
      path: "/nakama.api.Nakama/DeleteNotifications",
      type: GRPCCallType.unary
    )

    internal static let deleteTournamentRecord = GRPCMethodDescriptor(
      name: "DeleteTournamentRecord",
      path: "/nakama.api.Nakama/DeleteTournamentRecord",
      type: GRPCCallType.unary
    )

    internal static let deleteStorageObjects = GRPCMethodDescriptor(
      name: "DeleteStorageObjects",
      path: "/nakama.api.Nakama/DeleteStorageObjects",
      type: GRPCCallType.unary
    )

    internal static let event = GRPCMethodDescriptor(
      name: "Event",
      path: "/nakama.api.Nakama/Event",
      type: GRPCCallType.unary
    )

    internal static let getAccount = GRPCMethodDescriptor(
      name: "GetAccount",
      path: "/nakama.api.Nakama/GetAccount",
      type: GRPCCallType.unary
    )

    internal static let getUsers = GRPCMethodDescriptor(
      name: "GetUsers",
      path: "/nakama.api.Nakama/GetUsers",
      type: GRPCCallType.unary
    )

    internal static let getSubscription = GRPCMethodDescriptor(
      name: "GetSubscription",
      path: "/nakama.api.Nakama/GetSubscription",
      type: GRPCCallType.unary
    )

    internal static let healthcheck = GRPCMethodDescriptor(
      name: "Healthcheck",
      path: "/nakama.api.Nakama/Healthcheck",
      type: GRPCCallType.unary
    )

    internal static let importFacebookFriends = GRPCMethodDescriptor(
      name: "ImportFacebookFriends",
      path: "/nakama.api.Nakama/ImportFacebookFriends",
      type: GRPCCallType.unary
    )

    internal static let importSteamFriends = GRPCMethodDescriptor(
      name: "ImportSteamFriends",
      path: "/nakama.api.Nakama/ImportSteamFriends",
      type: GRPCCallType.unary
    )

    internal static let joinGroup = GRPCMethodDescriptor(
      name: "JoinGroup",
      path: "/nakama.api.Nakama/JoinGroup",
      type: GRPCCallType.unary
    )

    internal static let joinTournament = GRPCMethodDescriptor(
      name: "JoinTournament",
      path: "/nakama.api.Nakama/JoinTournament",
      type: GRPCCallType.unary
    )

    internal static let kickGroupUsers = GRPCMethodDescriptor(
      name: "KickGroupUsers",
      path: "/nakama.api.Nakama/KickGroupUsers",
      type: GRPCCallType.unary
    )

    internal static let leaveGroup = GRPCMethodDescriptor(
      name: "LeaveGroup",
      path: "/nakama.api.Nakama/LeaveGroup",
      type: GRPCCallType.unary
    )

    internal static let linkApple = GRPCMethodDescriptor(
      name: "LinkApple",
      path: "/nakama.api.Nakama/LinkApple",
      type: GRPCCallType.unary
    )

    internal static let linkCustom = GRPCMethodDescriptor(
      name: "LinkCustom",
      path: "/nakama.api.Nakama/LinkCustom",
      type: GRPCCallType.unary
    )

    internal static let linkDevice = GRPCMethodDescriptor(
      name: "LinkDevice",
      path: "/nakama.api.Nakama/LinkDevice",
      type: GRPCCallType.unary
    )

    internal static let linkEmail = GRPCMethodDescriptor(
      name: "LinkEmail",
      path: "/nakama.api.Nakama/LinkEmail",
      type: GRPCCallType.unary
    )

    internal static let linkFacebook = GRPCMethodDescriptor(
      name: "LinkFacebook",
      path: "/nakama.api.Nakama/LinkFacebook",
      type: GRPCCallType.unary
    )

    internal static let linkFacebookInstantGame = GRPCMethodDescriptor(
      name: "LinkFacebookInstantGame",
      path: "/nakama.api.Nakama/LinkFacebookInstantGame",
      type: GRPCCallType.unary
    )

    internal static let linkGameCenter = GRPCMethodDescriptor(
      name: "LinkGameCenter",
      path: "/nakama.api.Nakama/LinkGameCenter",
      type: GRPCCallType.unary
    )

    internal static let linkGoogle = GRPCMethodDescriptor(
      name: "LinkGoogle",
      path: "/nakama.api.Nakama/LinkGoogle",
      type: GRPCCallType.unary
    )

    internal static let linkSteam = GRPCMethodDescriptor(
      name: "LinkSteam",
      path: "/nakama.api.Nakama/LinkSteam",
      type: GRPCCallType.unary
    )

    internal static let listChannelMessages = GRPCMethodDescriptor(
      name: "ListChannelMessages",
      path: "/nakama.api.Nakama/ListChannelMessages",
      type: GRPCCallType.unary
    )

    internal static let listFriends = GRPCMethodDescriptor(
      name: "ListFriends",
      path: "/nakama.api.Nakama/ListFriends",
      type: GRPCCallType.unary
    )

    internal static let listGroups = GRPCMethodDescriptor(
      name: "ListGroups",
      path: "/nakama.api.Nakama/ListGroups",
      type: GRPCCallType.unary
    )

    internal static let listGroupUsers = GRPCMethodDescriptor(
      name: "ListGroupUsers",
      path: "/nakama.api.Nakama/ListGroupUsers",
      type: GRPCCallType.unary
    )

    internal static let listLeaderboardRecords = GRPCMethodDescriptor(
      name: "ListLeaderboardRecords",
      path: "/nakama.api.Nakama/ListLeaderboardRecords",
      type: GRPCCallType.unary
    )

    internal static let listLeaderboardRecordsAroundOwner = GRPCMethodDescriptor(
      name: "ListLeaderboardRecordsAroundOwner",
      path: "/nakama.api.Nakama/ListLeaderboardRecordsAroundOwner",
      type: GRPCCallType.unary
    )

    internal static let listMatches = GRPCMethodDescriptor(
      name: "ListMatches",
      path: "/nakama.api.Nakama/ListMatches",
      type: GRPCCallType.unary
    )

    internal static let listNotifications = GRPCMethodDescriptor(
      name: "ListNotifications",
      path: "/nakama.api.Nakama/ListNotifications",
      type: GRPCCallType.unary
    )

    internal static let listStorageObjects = GRPCMethodDescriptor(
      name: "ListStorageObjects",
      path: "/nakama.api.Nakama/ListStorageObjects",
      type: GRPCCallType.unary
    )

    internal static let listSubscriptions = GRPCMethodDescriptor(
      name: "ListSubscriptions",
      path: "/nakama.api.Nakama/ListSubscriptions",
      type: GRPCCallType.unary
    )

    internal static let listTournaments = GRPCMethodDescriptor(
      name: "ListTournaments",
      path: "/nakama.api.Nakama/ListTournaments",
      type: GRPCCallType.unary
    )

    internal static let listTournamentRecords = GRPCMethodDescriptor(
      name: "ListTournamentRecords",
      path: "/nakama.api.Nakama/ListTournamentRecords",
      type: GRPCCallType.unary
    )

    internal static let listTournamentRecordsAroundOwner = GRPCMethodDescriptor(
      name: "ListTournamentRecordsAroundOwner",
      path: "/nakama.api.Nakama/ListTournamentRecordsAroundOwner",
      type: GRPCCallType.unary
    )

    internal static let listUserGroups = GRPCMethodDescriptor(
      name: "ListUserGroups",
      path: "/nakama.api.Nakama/ListUserGroups",
      type: GRPCCallType.unary
    )

    internal static let promoteGroupUsers = GRPCMethodDescriptor(
      name: "PromoteGroupUsers",
      path: "/nakama.api.Nakama/PromoteGroupUsers",
      type: GRPCCallType.unary
    )

    internal static let demoteGroupUsers = GRPCMethodDescriptor(
      name: "DemoteGroupUsers",
      path: "/nakama.api.Nakama/DemoteGroupUsers",
      type: GRPCCallType.unary
    )

    internal static let readStorageObjects = GRPCMethodDescriptor(
      name: "ReadStorageObjects",
      path: "/nakama.api.Nakama/ReadStorageObjects",
      type: GRPCCallType.unary
    )

    internal static let rpcFunc = GRPCMethodDescriptor(
      name: "RpcFunc",
      path: "/nakama.api.Nakama/RpcFunc",
      type: GRPCCallType.unary
    )

    internal static let unlinkApple = GRPCMethodDescriptor(
      name: "UnlinkApple",
      path: "/nakama.api.Nakama/UnlinkApple",
      type: GRPCCallType.unary
    )

    internal static let unlinkCustom = GRPCMethodDescriptor(
      name: "UnlinkCustom",
      path: "/nakama.api.Nakama/UnlinkCustom",
      type: GRPCCallType.unary
    )

    internal static let unlinkDevice = GRPCMethodDescriptor(
      name: "UnlinkDevice",
      path: "/nakama.api.Nakama/UnlinkDevice",
      type: GRPCCallType.unary
    )

    internal static let unlinkEmail = GRPCMethodDescriptor(
      name: "UnlinkEmail",
      path: "/nakama.api.Nakama/UnlinkEmail",
      type: GRPCCallType.unary
    )

    internal static let unlinkFacebook = GRPCMethodDescriptor(
      name: "UnlinkFacebook",
      path: "/nakama.api.Nakama/UnlinkFacebook",
      type: GRPCCallType.unary
    )

    internal static let unlinkFacebookInstantGame = GRPCMethodDescriptor(
      name: "UnlinkFacebookInstantGame",
      path: "/nakama.api.Nakama/UnlinkFacebookInstantGame",
      type: GRPCCallType.unary
    )

    internal static let unlinkGameCenter = GRPCMethodDescriptor(
      name: "UnlinkGameCenter",
      path: "/nakama.api.Nakama/UnlinkGameCenter",
      type: GRPCCallType.unary
    )

    internal static let unlinkGoogle = GRPCMethodDescriptor(
      name: "UnlinkGoogle",
      path: "/nakama.api.Nakama/UnlinkGoogle",
      type: GRPCCallType.unary
    )

    internal static let unlinkSteam = GRPCMethodDescriptor(
      name: "UnlinkSteam",
      path: "/nakama.api.Nakama/UnlinkSteam",
      type: GRPCCallType.unary
    )

    internal static let updateAccount = GRPCMethodDescriptor(
      name: "UpdateAccount",
      path: "/nakama.api.Nakama/UpdateAccount",
      type: GRPCCallType.unary
    )

    internal static let updateGroup = GRPCMethodDescriptor(
      name: "UpdateGroup",
      path: "/nakama.api.Nakama/UpdateGroup",
      type: GRPCCallType.unary
    )

    internal static let validatePurchaseApple = GRPCMethodDescriptor(
      name: "ValidatePurchaseApple",
      path: "/nakama.api.Nakama/ValidatePurchaseApple",
      type: GRPCCallType.unary
    )

    internal static let validateSubscriptionApple = GRPCMethodDescriptor(
      name: "ValidateSubscriptionApple",
      path: "/nakama.api.Nakama/ValidateSubscriptionApple",
      type: GRPCCallType.unary
    )

    internal static let validatePurchaseGoogle = GRPCMethodDescriptor(
      name: "ValidatePurchaseGoogle",
      path: "/nakama.api.Nakama/ValidatePurchaseGoogle",
      type: GRPCCallType.unary
    )

    internal static let validateSubscriptionGoogle = GRPCMethodDescriptor(
      name: "ValidateSubscriptionGoogle",
      path: "/nakama.api.Nakama/ValidateSubscriptionGoogle",
      type: GRPCCallType.unary
    )

    internal static let validatePurchaseHuawei = GRPCMethodDescriptor(
      name: "ValidatePurchaseHuawei",
      path: "/nakama.api.Nakama/ValidatePurchaseHuawei",
      type: GRPCCallType.unary
    )

    internal static let writeLeaderboardRecord = GRPCMethodDescriptor(
      name: "WriteLeaderboardRecord",
      path: "/nakama.api.Nakama/WriteLeaderboardRecord",
      type: GRPCCallType.unary
    )

    internal static let writeStorageObjects = GRPCMethodDescriptor(
      name: "WriteStorageObjects",
      path: "/nakama.api.Nakama/WriteStorageObjects",
      type: GRPCCallType.unary
    )

    internal static let writeTournamentRecord = GRPCMethodDescriptor(
      name: "WriteTournamentRecord",
      path: "/nakama.api.Nakama/WriteTournamentRecord",
      type: GRPCCallType.unary
    )
  }
}

///*
/// The Nakama RPC protocol service built with GRPC.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Nakama_Api_NakamaProvider: CallHandlerProvider {
  var interceptors: Nakama_Api_NakamaServerInterceptorFactoryProtocol? { get }

  /// Add friends by ID or username to a user's account.
  func addFriends(request: Nakama_Api_AddFriendsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Add users to a group.
  func addGroupUsers(request: Nakama_Api_AddGroupUsersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Refresh a user's session using a refresh token retrieved from a previous authentication request.
  func sessionRefresh(request: Nakama_Api_SessionRefreshRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_Session>

  /// Log out a session, invalidate a refresh token, or log out all sessions/refresh tokens for a user.
  func sessionLogout(request: Nakama_Api_SessionLogoutRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Authenticate a user with an Apple ID against the server.
  func authenticateApple(request: Nakama_Api_AuthenticateAppleRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_Session>

  /// Authenticate a user with a custom id against the server.
  func authenticateCustom(request: Nakama_Api_AuthenticateCustomRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_Session>

  /// Authenticate a user with a device id against the server.
  func authenticateDevice(request: Nakama_Api_AuthenticateDeviceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_Session>

  /// Authenticate a user with an email+password against the server.
  func authenticateEmail(request: Nakama_Api_AuthenticateEmailRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_Session>

  /// Authenticate a user with a Facebook OAuth token against the server.
  func authenticateFacebook(request: Nakama_Api_AuthenticateFacebookRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_Session>

  /// Authenticate a user with a Facebook Instant Game token against the server.
  func authenticateFacebookInstantGame(request: Nakama_Api_AuthenticateFacebookInstantGameRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_Session>

  /// Authenticate a user with Apple's GameCenter against the server.
  func authenticateGameCenter(request: Nakama_Api_AuthenticateGameCenterRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_Session>

  /// Authenticate a user with Google against the server.
  func authenticateGoogle(request: Nakama_Api_AuthenticateGoogleRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_Session>

  /// Authenticate a user with Steam against the server.
  func authenticateSteam(request: Nakama_Api_AuthenticateSteamRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_Session>

  /// Ban a set of users from a group.
  func banGroupUsers(request: Nakama_Api_BanGroupUsersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Block one or more users by ID or username.
  func blockFriends(request: Nakama_Api_BlockFriendsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Create a new group with the current user as the owner.
  func createGroup(request: Nakama_Api_CreateGroupRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_Group>

  /// Delete the current user's account.
  func deleteAccount(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Delete one or more users by ID or username.
  func deleteFriends(request: Nakama_Api_DeleteFriendsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Delete a group by ID.
  func deleteGroup(request: Nakama_Api_DeleteGroupRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Delete a leaderboard record.
  func deleteLeaderboardRecord(request: Nakama_Api_DeleteLeaderboardRecordRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Delete one or more notifications for the current user.
  func deleteNotifications(request: Nakama_Api_DeleteNotificationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Delete a tournament record.
  func deleteTournamentRecord(request: Nakama_Api_DeleteTournamentRecordRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Delete one or more objects by ID or username.
  func deleteStorageObjects(request: Nakama_Api_DeleteStorageObjectsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Submit an event for processing in the server's registered runtime custom events handler.
  func event(request: Nakama_Api_Event, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Fetch the current user's account.
  func getAccount(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_Account>

  /// Fetch zero or more users by ID and/or username.
  func getUsers(request: Nakama_Api_GetUsersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_Users>

  /// Get subscription by product id.
  func getSubscription(request: Nakama_Api_GetSubscriptionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_ValidatedSubscription>

  /// A healthcheck which load balancers can use to check the service.
  func healthcheck(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Import Facebook friends and add them to a user's account.
  func importFacebookFriends(request: Nakama_Api_ImportFacebookFriendsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Import Steam friends and add them to a user's account.
  func importSteamFriends(request: Nakama_Api_ImportSteamFriendsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Immediately join an open group, or request to join a closed one.
  func joinGroup(request: Nakama_Api_JoinGroupRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Attempt to join an open and running tournament.
  func joinTournament(request: Nakama_Api_JoinTournamentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Kick a set of users from a group.
  func kickGroupUsers(request: Nakama_Api_KickGroupUsersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Leave a group the user is a member of.
  func leaveGroup(request: Nakama_Api_LeaveGroupRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Add an Apple ID to the social profiles on the current user's account.
  func linkApple(request: Nakama_Api_AccountApple, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Add a custom ID to the social profiles on the current user's account.
  func linkCustom(request: Nakama_Api_AccountCustom, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Add a device ID to the social profiles on the current user's account.
  func linkDevice(request: Nakama_Api_AccountDevice, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Add an email+password to the social profiles on the current user's account.
  func linkEmail(request: Nakama_Api_AccountEmail, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Add Facebook to the social profiles on the current user's account.
  func linkFacebook(request: Nakama_Api_LinkFacebookRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Add Facebook Instant Game to the social profiles on the current user's account.
  func linkFacebookInstantGame(request: Nakama_Api_AccountFacebookInstantGame, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Add Apple's GameCenter to the social profiles on the current user's account.
  func linkGameCenter(request: Nakama_Api_AccountGameCenter, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Add Google to the social profiles on the current user's account.
  func linkGoogle(request: Nakama_Api_AccountGoogle, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Add Steam to the social profiles on the current user's account.
  func linkSteam(request: Nakama_Api_LinkSteamRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// List a channel's message history.
  func listChannelMessages(request: Nakama_Api_ListChannelMessagesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_ChannelMessageList>

  /// List all friends for the current user.
  func listFriends(request: Nakama_Api_ListFriendsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_FriendList>

  /// List groups based on given filters.
  func listGroups(request: Nakama_Api_ListGroupsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_GroupList>

  /// List all users that are part of a group.
  func listGroupUsers(request: Nakama_Api_ListGroupUsersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_GroupUserList>

  /// List leaderboard records.
  func listLeaderboardRecords(request: Nakama_Api_ListLeaderboardRecordsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_LeaderboardRecordList>

  /// List leaderboard records that belong to a user.
  func listLeaderboardRecordsAroundOwner(request: Nakama_Api_ListLeaderboardRecordsAroundOwnerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_LeaderboardRecordList>

  /// Fetch list of running matches.
  func listMatches(request: Nakama_Api_ListMatchesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_MatchList>

  /// Fetch list of notifications.
  func listNotifications(request: Nakama_Api_ListNotificationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_NotificationList>

  /// List publicly readable storage objects in a given collection.
  func listStorageObjects(request: Nakama_Api_ListStorageObjectsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_StorageObjectList>

  /// List user's subscriptions.
  func listSubscriptions(request: Nakama_Api_ListSubscriptionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_SubscriptionList>

  /// List current or upcoming tournaments.
  func listTournaments(request: Nakama_Api_ListTournamentsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_TournamentList>

  /// List tournament records.
  func listTournamentRecords(request: Nakama_Api_ListTournamentRecordsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_TournamentRecordList>

  /// List tournament records for a given owner.
  func listTournamentRecordsAroundOwner(request: Nakama_Api_ListTournamentRecordsAroundOwnerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_TournamentRecordList>

  /// List groups the current user belongs to.
  func listUserGroups(request: Nakama_Api_ListUserGroupsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_UserGroupList>

  /// Promote a set of users in a group to the next role up.
  func promoteGroupUsers(request: Nakama_Api_PromoteGroupUsersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Demote a set of users in a group to the next role down.
  func demoteGroupUsers(request: Nakama_Api_DemoteGroupUsersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Get storage objects.
  func readStorageObjects(request: Nakama_Api_ReadStorageObjectsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_StorageObjects>

  /// Execute a Lua function on the server.
  func rpcFunc(request: Nakama_Api_Rpc, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_Rpc>

  /// Remove the Apple ID from the social profiles on the current user's account.
  func unlinkApple(request: Nakama_Api_AccountApple, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Remove the custom ID from the social profiles on the current user's account.
  func unlinkCustom(request: Nakama_Api_AccountCustom, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Remove the device ID from the social profiles on the current user's account.
  func unlinkDevice(request: Nakama_Api_AccountDevice, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Remove the email+password from the social profiles on the current user's account.
  func unlinkEmail(request: Nakama_Api_AccountEmail, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Remove Facebook from the social profiles on the current user's account.
  func unlinkFacebook(request: Nakama_Api_AccountFacebook, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Remove Facebook Instant Game profile from the social profiles on the current user's account.
  func unlinkFacebookInstantGame(request: Nakama_Api_AccountFacebookInstantGame, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Remove Apple's GameCenter from the social profiles on the current user's account.
  func unlinkGameCenter(request: Nakama_Api_AccountGameCenter, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Remove Google from the social profiles on the current user's account.
  func unlinkGoogle(request: Nakama_Api_AccountGoogle, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Remove Steam from the social profiles on the current user's account.
  func unlinkSteam(request: Nakama_Api_AccountSteam, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Update fields in the current user's account.
  func updateAccount(request: Nakama_Api_UpdateAccountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Update fields in a given group.
  func updateGroup(request: Nakama_Api_UpdateGroupRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Validate Apple IAP Receipt
  func validatePurchaseApple(request: Nakama_Api_ValidatePurchaseAppleRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_ValidatePurchaseResponse>

  /// Validate Apple Subscription Receipt
  func validateSubscriptionApple(request: Nakama_Api_ValidateSubscriptionAppleRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_ValidateSubscriptionResponse>

  /// Validate Google IAP Receipt
  func validatePurchaseGoogle(request: Nakama_Api_ValidatePurchaseGoogleRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_ValidatePurchaseResponse>

  /// Validate Google Subscription Receipt
  func validateSubscriptionGoogle(request: Nakama_Api_ValidateSubscriptionGoogleRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_ValidateSubscriptionResponse>

  /// Validate Huawei IAP Receipt
  func validatePurchaseHuawei(request: Nakama_Api_ValidatePurchaseHuaweiRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_ValidatePurchaseResponse>

  /// Write a record to a leaderboard.
  func writeLeaderboardRecord(request: Nakama_Api_WriteLeaderboardRecordRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_LeaderboardRecord>

  /// Write objects into the storage engine.
  func writeStorageObjects(request: Nakama_Api_WriteStorageObjectsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_StorageObjectAcks>

  /// Write a record to a tournament.
  func writeTournamentRecord(request: Nakama_Api_WriteTournamentRecordRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_LeaderboardRecord>
}

extension Nakama_Api_NakamaProvider {
  internal var serviceName: Substring {
    return Nakama_Api_NakamaServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AddFriends":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AddFriendsRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeAddFriendsInterceptors() ?? [],
        userFunction: self.addFriends(request:context:)
      )

    case "AddGroupUsers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AddGroupUsersRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeAddGroupUsersInterceptors() ?? [],
        userFunction: self.addGroupUsers(request:context:)
      )

    case "SessionRefresh":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_SessionRefreshRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_Session>(),
        interceptors: self.interceptors?.makeSessionRefreshInterceptors() ?? [],
        userFunction: self.sessionRefresh(request:context:)
      )

    case "SessionLogout":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_SessionLogoutRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeSessionLogoutInterceptors() ?? [],
        userFunction: self.sessionLogout(request:context:)
      )

    case "AuthenticateApple":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AuthenticateAppleRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_Session>(),
        interceptors: self.interceptors?.makeAuthenticateAppleInterceptors() ?? [],
        userFunction: self.authenticateApple(request:context:)
      )

    case "AuthenticateCustom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AuthenticateCustomRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_Session>(),
        interceptors: self.interceptors?.makeAuthenticateCustomInterceptors() ?? [],
        userFunction: self.authenticateCustom(request:context:)
      )

    case "AuthenticateDevice":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AuthenticateDeviceRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_Session>(),
        interceptors: self.interceptors?.makeAuthenticateDeviceInterceptors() ?? [],
        userFunction: self.authenticateDevice(request:context:)
      )

    case "AuthenticateEmail":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AuthenticateEmailRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_Session>(),
        interceptors: self.interceptors?.makeAuthenticateEmailInterceptors() ?? [],
        userFunction: self.authenticateEmail(request:context:)
      )

    case "AuthenticateFacebook":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AuthenticateFacebookRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_Session>(),
        interceptors: self.interceptors?.makeAuthenticateFacebookInterceptors() ?? [],
        userFunction: self.authenticateFacebook(request:context:)
      )

    case "AuthenticateFacebookInstantGame":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AuthenticateFacebookInstantGameRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_Session>(),
        interceptors: self.interceptors?.makeAuthenticateFacebookInstantGameInterceptors() ?? [],
        userFunction: self.authenticateFacebookInstantGame(request:context:)
      )

    case "AuthenticateGameCenter":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AuthenticateGameCenterRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_Session>(),
        interceptors: self.interceptors?.makeAuthenticateGameCenterInterceptors() ?? [],
        userFunction: self.authenticateGameCenter(request:context:)
      )

    case "AuthenticateGoogle":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AuthenticateGoogleRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_Session>(),
        interceptors: self.interceptors?.makeAuthenticateGoogleInterceptors() ?? [],
        userFunction: self.authenticateGoogle(request:context:)
      )

    case "AuthenticateSteam":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AuthenticateSteamRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_Session>(),
        interceptors: self.interceptors?.makeAuthenticateSteamInterceptors() ?? [],
        userFunction: self.authenticateSteam(request:context:)
      )

    case "BanGroupUsers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_BanGroupUsersRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeBanGroupUsersInterceptors() ?? [],
        userFunction: self.banGroupUsers(request:context:)
      )

    case "BlockFriends":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_BlockFriendsRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeBlockFriendsInterceptors() ?? [],
        userFunction: self.blockFriends(request:context:)
      )

    case "CreateGroup":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_CreateGroupRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_Group>(),
        interceptors: self.interceptors?.makeCreateGroupInterceptors() ?? [],
        userFunction: self.createGroup(request:context:)
      )

    case "DeleteAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteAccountInterceptors() ?? [],
        userFunction: self.deleteAccount(request:context:)
      )

    case "DeleteFriends":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_DeleteFriendsRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteFriendsInterceptors() ?? [],
        userFunction: self.deleteFriends(request:context:)
      )

    case "DeleteGroup":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_DeleteGroupRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteGroupInterceptors() ?? [],
        userFunction: self.deleteGroup(request:context:)
      )

    case "DeleteLeaderboardRecord":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_DeleteLeaderboardRecordRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteLeaderboardRecordInterceptors() ?? [],
        userFunction: self.deleteLeaderboardRecord(request:context:)
      )

    case "DeleteNotifications":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_DeleteNotificationsRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteNotificationsInterceptors() ?? [],
        userFunction: self.deleteNotifications(request:context:)
      )

    case "DeleteTournamentRecord":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_DeleteTournamentRecordRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteTournamentRecordInterceptors() ?? [],
        userFunction: self.deleteTournamentRecord(request:context:)
      )

    case "DeleteStorageObjects":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_DeleteStorageObjectsRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteStorageObjectsInterceptors() ?? [],
        userFunction: self.deleteStorageObjects(request:context:)
      )

    case "Event":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_Event>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeEventInterceptors() ?? [],
        userFunction: self.event(request:context:)
      )

    case "GetAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_Account>(),
        interceptors: self.interceptors?.makeGetAccountInterceptors() ?? [],
        userFunction: self.getAccount(request:context:)
      )

    case "GetUsers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_GetUsersRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_Users>(),
        interceptors: self.interceptors?.makeGetUsersInterceptors() ?? [],
        userFunction: self.getUsers(request:context:)
      )

    case "GetSubscription":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_GetSubscriptionRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_ValidatedSubscription>(),
        interceptors: self.interceptors?.makeGetSubscriptionInterceptors() ?? [],
        userFunction: self.getSubscription(request:context:)
      )

    case "Healthcheck":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeHealthcheckInterceptors() ?? [],
        userFunction: self.healthcheck(request:context:)
      )

    case "ImportFacebookFriends":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ImportFacebookFriendsRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeImportFacebookFriendsInterceptors() ?? [],
        userFunction: self.importFacebookFriends(request:context:)
      )

    case "ImportSteamFriends":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ImportSteamFriendsRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeImportSteamFriendsInterceptors() ?? [],
        userFunction: self.importSteamFriends(request:context:)
      )

    case "JoinGroup":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_JoinGroupRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeJoinGroupInterceptors() ?? [],
        userFunction: self.joinGroup(request:context:)
      )

    case "JoinTournament":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_JoinTournamentRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeJoinTournamentInterceptors() ?? [],
        userFunction: self.joinTournament(request:context:)
      )

    case "KickGroupUsers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_KickGroupUsersRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeKickGroupUsersInterceptors() ?? [],
        userFunction: self.kickGroupUsers(request:context:)
      )

    case "LeaveGroup":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_LeaveGroupRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeLeaveGroupInterceptors() ?? [],
        userFunction: self.leaveGroup(request:context:)
      )

    case "LinkApple":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AccountApple>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeLinkAppleInterceptors() ?? [],
        userFunction: self.linkApple(request:context:)
      )

    case "LinkCustom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AccountCustom>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeLinkCustomInterceptors() ?? [],
        userFunction: self.linkCustom(request:context:)
      )

    case "LinkDevice":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AccountDevice>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeLinkDeviceInterceptors() ?? [],
        userFunction: self.linkDevice(request:context:)
      )

    case "LinkEmail":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AccountEmail>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeLinkEmailInterceptors() ?? [],
        userFunction: self.linkEmail(request:context:)
      )

    case "LinkFacebook":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_LinkFacebookRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeLinkFacebookInterceptors() ?? [],
        userFunction: self.linkFacebook(request:context:)
      )

    case "LinkFacebookInstantGame":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AccountFacebookInstantGame>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeLinkFacebookInstantGameInterceptors() ?? [],
        userFunction: self.linkFacebookInstantGame(request:context:)
      )

    case "LinkGameCenter":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AccountGameCenter>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeLinkGameCenterInterceptors() ?? [],
        userFunction: self.linkGameCenter(request:context:)
      )

    case "LinkGoogle":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AccountGoogle>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeLinkGoogleInterceptors() ?? [],
        userFunction: self.linkGoogle(request:context:)
      )

    case "LinkSteam":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_LinkSteamRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeLinkSteamInterceptors() ?? [],
        userFunction: self.linkSteam(request:context:)
      )

    case "ListChannelMessages":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ListChannelMessagesRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_ChannelMessageList>(),
        interceptors: self.interceptors?.makeListChannelMessagesInterceptors() ?? [],
        userFunction: self.listChannelMessages(request:context:)
      )

    case "ListFriends":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ListFriendsRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_FriendList>(),
        interceptors: self.interceptors?.makeListFriendsInterceptors() ?? [],
        userFunction: self.listFriends(request:context:)
      )

    case "ListGroups":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ListGroupsRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_GroupList>(),
        interceptors: self.interceptors?.makeListGroupsInterceptors() ?? [],
        userFunction: self.listGroups(request:context:)
      )

    case "ListGroupUsers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ListGroupUsersRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_GroupUserList>(),
        interceptors: self.interceptors?.makeListGroupUsersInterceptors() ?? [],
        userFunction: self.listGroupUsers(request:context:)
      )

    case "ListLeaderboardRecords":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ListLeaderboardRecordsRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_LeaderboardRecordList>(),
        interceptors: self.interceptors?.makeListLeaderboardRecordsInterceptors() ?? [],
        userFunction: self.listLeaderboardRecords(request:context:)
      )

    case "ListLeaderboardRecordsAroundOwner":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ListLeaderboardRecordsAroundOwnerRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_LeaderboardRecordList>(),
        interceptors: self.interceptors?.makeListLeaderboardRecordsAroundOwnerInterceptors() ?? [],
        userFunction: self.listLeaderboardRecordsAroundOwner(request:context:)
      )

    case "ListMatches":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ListMatchesRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_MatchList>(),
        interceptors: self.interceptors?.makeListMatchesInterceptors() ?? [],
        userFunction: self.listMatches(request:context:)
      )

    case "ListNotifications":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ListNotificationsRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_NotificationList>(),
        interceptors: self.interceptors?.makeListNotificationsInterceptors() ?? [],
        userFunction: self.listNotifications(request:context:)
      )

    case "ListStorageObjects":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ListStorageObjectsRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_StorageObjectList>(),
        interceptors: self.interceptors?.makeListStorageObjectsInterceptors() ?? [],
        userFunction: self.listStorageObjects(request:context:)
      )

    case "ListSubscriptions":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ListSubscriptionsRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_SubscriptionList>(),
        interceptors: self.interceptors?.makeListSubscriptionsInterceptors() ?? [],
        userFunction: self.listSubscriptions(request:context:)
      )

    case "ListTournaments":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ListTournamentsRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_TournamentList>(),
        interceptors: self.interceptors?.makeListTournamentsInterceptors() ?? [],
        userFunction: self.listTournaments(request:context:)
      )

    case "ListTournamentRecords":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ListTournamentRecordsRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_TournamentRecordList>(),
        interceptors: self.interceptors?.makeListTournamentRecordsInterceptors() ?? [],
        userFunction: self.listTournamentRecords(request:context:)
      )

    case "ListTournamentRecordsAroundOwner":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ListTournamentRecordsAroundOwnerRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_TournamentRecordList>(),
        interceptors: self.interceptors?.makeListTournamentRecordsAroundOwnerInterceptors() ?? [],
        userFunction: self.listTournamentRecordsAroundOwner(request:context:)
      )

    case "ListUserGroups":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ListUserGroupsRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_UserGroupList>(),
        interceptors: self.interceptors?.makeListUserGroupsInterceptors() ?? [],
        userFunction: self.listUserGroups(request:context:)
      )

    case "PromoteGroupUsers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_PromoteGroupUsersRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makePromoteGroupUsersInterceptors() ?? [],
        userFunction: self.promoteGroupUsers(request:context:)
      )

    case "DemoteGroupUsers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_DemoteGroupUsersRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDemoteGroupUsersInterceptors() ?? [],
        userFunction: self.demoteGroupUsers(request:context:)
      )

    case "ReadStorageObjects":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ReadStorageObjectsRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_StorageObjects>(),
        interceptors: self.interceptors?.makeReadStorageObjectsInterceptors() ?? [],
        userFunction: self.readStorageObjects(request:context:)
      )

    case "RpcFunc":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_Rpc>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_Rpc>(),
        interceptors: self.interceptors?.makeRpcFuncInterceptors() ?? [],
        userFunction: self.rpcFunc(request:context:)
      )

    case "UnlinkApple":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AccountApple>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeUnlinkAppleInterceptors() ?? [],
        userFunction: self.unlinkApple(request:context:)
      )

    case "UnlinkCustom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AccountCustom>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeUnlinkCustomInterceptors() ?? [],
        userFunction: self.unlinkCustom(request:context:)
      )

    case "UnlinkDevice":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AccountDevice>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeUnlinkDeviceInterceptors() ?? [],
        userFunction: self.unlinkDevice(request:context:)
      )

    case "UnlinkEmail":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AccountEmail>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeUnlinkEmailInterceptors() ?? [],
        userFunction: self.unlinkEmail(request:context:)
      )

    case "UnlinkFacebook":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AccountFacebook>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeUnlinkFacebookInterceptors() ?? [],
        userFunction: self.unlinkFacebook(request:context:)
      )

    case "UnlinkFacebookInstantGame":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AccountFacebookInstantGame>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeUnlinkFacebookInstantGameInterceptors() ?? [],
        userFunction: self.unlinkFacebookInstantGame(request:context:)
      )

    case "UnlinkGameCenter":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AccountGameCenter>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeUnlinkGameCenterInterceptors() ?? [],
        userFunction: self.unlinkGameCenter(request:context:)
      )

    case "UnlinkGoogle":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AccountGoogle>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeUnlinkGoogleInterceptors() ?? [],
        userFunction: self.unlinkGoogle(request:context:)
      )

    case "UnlinkSteam":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AccountSteam>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeUnlinkSteamInterceptors() ?? [],
        userFunction: self.unlinkSteam(request:context:)
      )

    case "UpdateAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_UpdateAccountRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeUpdateAccountInterceptors() ?? [],
        userFunction: self.updateAccount(request:context:)
      )

    case "UpdateGroup":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_UpdateGroupRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeUpdateGroupInterceptors() ?? [],
        userFunction: self.updateGroup(request:context:)
      )

    case "ValidatePurchaseApple":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ValidatePurchaseAppleRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_ValidatePurchaseResponse>(),
        interceptors: self.interceptors?.makeValidatePurchaseAppleInterceptors() ?? [],
        userFunction: self.validatePurchaseApple(request:context:)
      )

    case "ValidateSubscriptionApple":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ValidateSubscriptionAppleRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_ValidateSubscriptionResponse>(),
        interceptors: self.interceptors?.makeValidateSubscriptionAppleInterceptors() ?? [],
        userFunction: self.validateSubscriptionApple(request:context:)
      )

    case "ValidatePurchaseGoogle":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ValidatePurchaseGoogleRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_ValidatePurchaseResponse>(),
        interceptors: self.interceptors?.makeValidatePurchaseGoogleInterceptors() ?? [],
        userFunction: self.validatePurchaseGoogle(request:context:)
      )

    case "ValidateSubscriptionGoogle":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ValidateSubscriptionGoogleRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_ValidateSubscriptionResponse>(),
        interceptors: self.interceptors?.makeValidateSubscriptionGoogleInterceptors() ?? [],
        userFunction: self.validateSubscriptionGoogle(request:context:)
      )

    case "ValidatePurchaseHuawei":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ValidatePurchaseHuaweiRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_ValidatePurchaseResponse>(),
        interceptors: self.interceptors?.makeValidatePurchaseHuaweiInterceptors() ?? [],
        userFunction: self.validatePurchaseHuawei(request:context:)
      )

    case "WriteLeaderboardRecord":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_WriteLeaderboardRecordRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_LeaderboardRecord>(),
        interceptors: self.interceptors?.makeWriteLeaderboardRecordInterceptors() ?? [],
        userFunction: self.writeLeaderboardRecord(request:context:)
      )

    case "WriteStorageObjects":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_WriteStorageObjectsRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_StorageObjectAcks>(),
        interceptors: self.interceptors?.makeWriteStorageObjectsInterceptors() ?? [],
        userFunction: self.writeStorageObjects(request:context:)
      )

    case "WriteTournamentRecord":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_WriteTournamentRecordRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_LeaderboardRecord>(),
        interceptors: self.interceptors?.makeWriteTournamentRecordInterceptors() ?? [],
        userFunction: self.writeTournamentRecord(request:context:)
      )

    default:
      return nil
    }
  }
}

///*
/// The Nakama RPC protocol service built with GRPC.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Nakama_Api_NakamaAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Nakama_Api_NakamaServerInterceptorFactoryProtocol? { get }

  /// Add friends by ID or username to a user's account.
  func addFriends(
    request: Nakama_Api_AddFriendsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Add users to a group.
  func addGroupUsers(
    request: Nakama_Api_AddGroupUsersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Refresh a user's session using a refresh token retrieved from a previous authentication request.
  func sessionRefresh(
    request: Nakama_Api_SessionRefreshRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_Session

  /// Log out a session, invalidate a refresh token, or log out all sessions/refresh tokens for a user.
  func sessionLogout(
    request: Nakama_Api_SessionLogoutRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Authenticate a user with an Apple ID against the server.
  func authenticateApple(
    request: Nakama_Api_AuthenticateAppleRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_Session

  /// Authenticate a user with a custom id against the server.
  func authenticateCustom(
    request: Nakama_Api_AuthenticateCustomRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_Session

  /// Authenticate a user with a device id against the server.
  func authenticateDevice(
    request: Nakama_Api_AuthenticateDeviceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_Session

  /// Authenticate a user with an email+password against the server.
  func authenticateEmail(
    request: Nakama_Api_AuthenticateEmailRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_Session

  /// Authenticate a user with a Facebook OAuth token against the server.
  func authenticateFacebook(
    request: Nakama_Api_AuthenticateFacebookRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_Session

  /// Authenticate a user with a Facebook Instant Game token against the server.
  func authenticateFacebookInstantGame(
    request: Nakama_Api_AuthenticateFacebookInstantGameRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_Session

  /// Authenticate a user with Apple's GameCenter against the server.
  func authenticateGameCenter(
    request: Nakama_Api_AuthenticateGameCenterRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_Session

  /// Authenticate a user with Google against the server.
  func authenticateGoogle(
    request: Nakama_Api_AuthenticateGoogleRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_Session

  /// Authenticate a user with Steam against the server.
  func authenticateSteam(
    request: Nakama_Api_AuthenticateSteamRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_Session

  /// Ban a set of users from a group.
  func banGroupUsers(
    request: Nakama_Api_BanGroupUsersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Block one or more users by ID or username.
  func blockFriends(
    request: Nakama_Api_BlockFriendsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Create a new group with the current user as the owner.
  func createGroup(
    request: Nakama_Api_CreateGroupRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_Group

  /// Delete the current user's account.
  func deleteAccount(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Delete one or more users by ID or username.
  func deleteFriends(
    request: Nakama_Api_DeleteFriendsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Delete a group by ID.
  func deleteGroup(
    request: Nakama_Api_DeleteGroupRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Delete a leaderboard record.
  func deleteLeaderboardRecord(
    request: Nakama_Api_DeleteLeaderboardRecordRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Delete one or more notifications for the current user.
  func deleteNotifications(
    request: Nakama_Api_DeleteNotificationsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Delete a tournament record.
  func deleteTournamentRecord(
    request: Nakama_Api_DeleteTournamentRecordRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Delete one or more objects by ID or username.
  func deleteStorageObjects(
    request: Nakama_Api_DeleteStorageObjectsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Submit an event for processing in the server's registered runtime custom events handler.
  func event(
    request: Nakama_Api_Event,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Fetch the current user's account.
  func getAccount(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_Account

  /// Fetch zero or more users by ID and/or username.
  func getUsers(
    request: Nakama_Api_GetUsersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_Users

  /// Get subscription by product id.
  func getSubscription(
    request: Nakama_Api_GetSubscriptionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_ValidatedSubscription

  /// A healthcheck which load balancers can use to check the service.
  func healthcheck(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Import Facebook friends and add them to a user's account.
  func importFacebookFriends(
    request: Nakama_Api_ImportFacebookFriendsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Import Steam friends and add them to a user's account.
  func importSteamFriends(
    request: Nakama_Api_ImportSteamFriendsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Immediately join an open group, or request to join a closed one.
  func joinGroup(
    request: Nakama_Api_JoinGroupRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Attempt to join an open and running tournament.
  func joinTournament(
    request: Nakama_Api_JoinTournamentRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Kick a set of users from a group.
  func kickGroupUsers(
    request: Nakama_Api_KickGroupUsersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Leave a group the user is a member of.
  func leaveGroup(
    request: Nakama_Api_LeaveGroupRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Add an Apple ID to the social profiles on the current user's account.
  func linkApple(
    request: Nakama_Api_AccountApple,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Add a custom ID to the social profiles on the current user's account.
  func linkCustom(
    request: Nakama_Api_AccountCustom,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Add a device ID to the social profiles on the current user's account.
  func linkDevice(
    request: Nakama_Api_AccountDevice,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Add an email+password to the social profiles on the current user's account.
  func linkEmail(
    request: Nakama_Api_AccountEmail,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Add Facebook to the social profiles on the current user's account.
  func linkFacebook(
    request: Nakama_Api_LinkFacebookRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Add Facebook Instant Game to the social profiles on the current user's account.
  func linkFacebookInstantGame(
    request: Nakama_Api_AccountFacebookInstantGame,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Add Apple's GameCenter to the social profiles on the current user's account.
  func linkGameCenter(
    request: Nakama_Api_AccountGameCenter,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Add Google to the social profiles on the current user's account.
  func linkGoogle(
    request: Nakama_Api_AccountGoogle,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Add Steam to the social profiles on the current user's account.
  func linkSteam(
    request: Nakama_Api_LinkSteamRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// List a channel's message history.
  func listChannelMessages(
    request: Nakama_Api_ListChannelMessagesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_ChannelMessageList

  /// List all friends for the current user.
  func listFriends(
    request: Nakama_Api_ListFriendsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_FriendList

  /// List groups based on given filters.
  func listGroups(
    request: Nakama_Api_ListGroupsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_GroupList

  /// List all users that are part of a group.
  func listGroupUsers(
    request: Nakama_Api_ListGroupUsersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_GroupUserList

  /// List leaderboard records.
  func listLeaderboardRecords(
    request: Nakama_Api_ListLeaderboardRecordsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_LeaderboardRecordList

  /// List leaderboard records that belong to a user.
  func listLeaderboardRecordsAroundOwner(
    request: Nakama_Api_ListLeaderboardRecordsAroundOwnerRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_LeaderboardRecordList

  /// Fetch list of running matches.
  func listMatches(
    request: Nakama_Api_ListMatchesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_MatchList

  /// Fetch list of notifications.
  func listNotifications(
    request: Nakama_Api_ListNotificationsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_NotificationList

  /// List publicly readable storage objects in a given collection.
  func listStorageObjects(
    request: Nakama_Api_ListStorageObjectsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_StorageObjectList

  /// List user's subscriptions.
  func listSubscriptions(
    request: Nakama_Api_ListSubscriptionsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_SubscriptionList

  /// List current or upcoming tournaments.
  func listTournaments(
    request: Nakama_Api_ListTournamentsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_TournamentList

  /// List tournament records.
  func listTournamentRecords(
    request: Nakama_Api_ListTournamentRecordsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_TournamentRecordList

  /// List tournament records for a given owner.
  func listTournamentRecordsAroundOwner(
    request: Nakama_Api_ListTournamentRecordsAroundOwnerRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_TournamentRecordList

  /// List groups the current user belongs to.
  func listUserGroups(
    request: Nakama_Api_ListUserGroupsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_UserGroupList

  /// Promote a set of users in a group to the next role up.
  func promoteGroupUsers(
    request: Nakama_Api_PromoteGroupUsersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Demote a set of users in a group to the next role down.
  func demoteGroupUsers(
    request: Nakama_Api_DemoteGroupUsersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Get storage objects.
  func readStorageObjects(
    request: Nakama_Api_ReadStorageObjectsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_StorageObjects

  /// Execute a Lua function on the server.
  func rpcFunc(
    request: Nakama_Api_Rpc,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_Rpc

  /// Remove the Apple ID from the social profiles on the current user's account.
  func unlinkApple(
    request: Nakama_Api_AccountApple,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Remove the custom ID from the social profiles on the current user's account.
  func unlinkCustom(
    request: Nakama_Api_AccountCustom,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Remove the device ID from the social profiles on the current user's account.
  func unlinkDevice(
    request: Nakama_Api_AccountDevice,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Remove the email+password from the social profiles on the current user's account.
  func unlinkEmail(
    request: Nakama_Api_AccountEmail,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Remove Facebook from the social profiles on the current user's account.
  func unlinkFacebook(
    request: Nakama_Api_AccountFacebook,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Remove Facebook Instant Game profile from the social profiles on the current user's account.
  func unlinkFacebookInstantGame(
    request: Nakama_Api_AccountFacebookInstantGame,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Remove Apple's GameCenter from the social profiles on the current user's account.
  func unlinkGameCenter(
    request: Nakama_Api_AccountGameCenter,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Remove Google from the social profiles on the current user's account.
  func unlinkGoogle(
    request: Nakama_Api_AccountGoogle,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Remove Steam from the social profiles on the current user's account.
  func unlinkSteam(
    request: Nakama_Api_AccountSteam,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Update fields in the current user's account.
  func updateAccount(
    request: Nakama_Api_UpdateAccountRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Update fields in a given group.
  func updateGroup(
    request: Nakama_Api_UpdateGroupRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Validate Apple IAP Receipt
  func validatePurchaseApple(
    request: Nakama_Api_ValidatePurchaseAppleRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_ValidatePurchaseResponse

  /// Validate Apple Subscription Receipt
  func validateSubscriptionApple(
    request: Nakama_Api_ValidateSubscriptionAppleRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_ValidateSubscriptionResponse

  /// Validate Google IAP Receipt
  func validatePurchaseGoogle(
    request: Nakama_Api_ValidatePurchaseGoogleRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_ValidatePurchaseResponse

  /// Validate Google Subscription Receipt
  func validateSubscriptionGoogle(
    request: Nakama_Api_ValidateSubscriptionGoogleRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_ValidateSubscriptionResponse

  /// Validate Huawei IAP Receipt
  func validatePurchaseHuawei(
    request: Nakama_Api_ValidatePurchaseHuaweiRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_ValidatePurchaseResponse

  /// Write a record to a leaderboard.
  func writeLeaderboardRecord(
    request: Nakama_Api_WriteLeaderboardRecordRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_LeaderboardRecord

  /// Write objects into the storage engine.
  func writeStorageObjects(
    request: Nakama_Api_WriteStorageObjectsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_StorageObjectAcks

  /// Write a record to a tournament.
  func writeTournamentRecord(
    request: Nakama_Api_WriteTournamentRecordRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Nakama_Api_LeaderboardRecord
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Nakama_Api_NakamaAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Nakama_Api_NakamaServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Nakama_Api_NakamaServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Nakama_Api_NakamaServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AddFriends":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AddFriendsRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeAddFriendsInterceptors() ?? [],
        wrapping: { try await self.addFriends(request: $0, context: $1) }
      )

    case "AddGroupUsers":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AddGroupUsersRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeAddGroupUsersInterceptors() ?? [],
        wrapping: { try await self.addGroupUsers(request: $0, context: $1) }
      )

    case "SessionRefresh":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_SessionRefreshRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_Session>(),
        interceptors: self.interceptors?.makeSessionRefreshInterceptors() ?? [],
        wrapping: { try await self.sessionRefresh(request: $0, context: $1) }
      )

    case "SessionLogout":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_SessionLogoutRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeSessionLogoutInterceptors() ?? [],
        wrapping: { try await self.sessionLogout(request: $0, context: $1) }
      )

    case "AuthenticateApple":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AuthenticateAppleRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_Session>(),
        interceptors: self.interceptors?.makeAuthenticateAppleInterceptors() ?? [],
        wrapping: { try await self.authenticateApple(request: $0, context: $1) }
      )

    case "AuthenticateCustom":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AuthenticateCustomRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_Session>(),
        interceptors: self.interceptors?.makeAuthenticateCustomInterceptors() ?? [],
        wrapping: { try await self.authenticateCustom(request: $0, context: $1) }
      )

    case "AuthenticateDevice":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AuthenticateDeviceRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_Session>(),
        interceptors: self.interceptors?.makeAuthenticateDeviceInterceptors() ?? [],
        wrapping: { try await self.authenticateDevice(request: $0, context: $1) }
      )

    case "AuthenticateEmail":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AuthenticateEmailRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_Session>(),
        interceptors: self.interceptors?.makeAuthenticateEmailInterceptors() ?? [],
        wrapping: { try await self.authenticateEmail(request: $0, context: $1) }
      )

    case "AuthenticateFacebook":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AuthenticateFacebookRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_Session>(),
        interceptors: self.interceptors?.makeAuthenticateFacebookInterceptors() ?? [],
        wrapping: { try await self.authenticateFacebook(request: $0, context: $1) }
      )

    case "AuthenticateFacebookInstantGame":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AuthenticateFacebookInstantGameRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_Session>(),
        interceptors: self.interceptors?.makeAuthenticateFacebookInstantGameInterceptors() ?? [],
        wrapping: { try await self.authenticateFacebookInstantGame(request: $0, context: $1) }
      )

    case "AuthenticateGameCenter":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AuthenticateGameCenterRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_Session>(),
        interceptors: self.interceptors?.makeAuthenticateGameCenterInterceptors() ?? [],
        wrapping: { try await self.authenticateGameCenter(request: $0, context: $1) }
      )

    case "AuthenticateGoogle":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AuthenticateGoogleRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_Session>(),
        interceptors: self.interceptors?.makeAuthenticateGoogleInterceptors() ?? [],
        wrapping: { try await self.authenticateGoogle(request: $0, context: $1) }
      )

    case "AuthenticateSteam":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AuthenticateSteamRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_Session>(),
        interceptors: self.interceptors?.makeAuthenticateSteamInterceptors() ?? [],
        wrapping: { try await self.authenticateSteam(request: $0, context: $1) }
      )

    case "BanGroupUsers":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_BanGroupUsersRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeBanGroupUsersInterceptors() ?? [],
        wrapping: { try await self.banGroupUsers(request: $0, context: $1) }
      )

    case "BlockFriends":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_BlockFriendsRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeBlockFriendsInterceptors() ?? [],
        wrapping: { try await self.blockFriends(request: $0, context: $1) }
      )

    case "CreateGroup":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_CreateGroupRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_Group>(),
        interceptors: self.interceptors?.makeCreateGroupInterceptors() ?? [],
        wrapping: { try await self.createGroup(request: $0, context: $1) }
      )

    case "DeleteAccount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteAccountInterceptors() ?? [],
        wrapping: { try await self.deleteAccount(request: $0, context: $1) }
      )

    case "DeleteFriends":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_DeleteFriendsRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteFriendsInterceptors() ?? [],
        wrapping: { try await self.deleteFriends(request: $0, context: $1) }
      )

    case "DeleteGroup":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_DeleteGroupRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteGroupInterceptors() ?? [],
        wrapping: { try await self.deleteGroup(request: $0, context: $1) }
      )

    case "DeleteLeaderboardRecord":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_DeleteLeaderboardRecordRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteLeaderboardRecordInterceptors() ?? [],
        wrapping: { try await self.deleteLeaderboardRecord(request: $0, context: $1) }
      )

    case "DeleteNotifications":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_DeleteNotificationsRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteNotificationsInterceptors() ?? [],
        wrapping: { try await self.deleteNotifications(request: $0, context: $1) }
      )

    case "DeleteTournamentRecord":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_DeleteTournamentRecordRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteTournamentRecordInterceptors() ?? [],
        wrapping: { try await self.deleteTournamentRecord(request: $0, context: $1) }
      )

    case "DeleteStorageObjects":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_DeleteStorageObjectsRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteStorageObjectsInterceptors() ?? [],
        wrapping: { try await self.deleteStorageObjects(request: $0, context: $1) }
      )

    case "Event":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_Event>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeEventInterceptors() ?? [],
        wrapping: { try await self.event(request: $0, context: $1) }
      )

    case "GetAccount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_Account>(),
        interceptors: self.interceptors?.makeGetAccountInterceptors() ?? [],
        wrapping: { try await self.getAccount(request: $0, context: $1) }
      )

    case "GetUsers":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_GetUsersRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_Users>(),
        interceptors: self.interceptors?.makeGetUsersInterceptors() ?? [],
        wrapping: { try await self.getUsers(request: $0, context: $1) }
      )

    case "GetSubscription":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_GetSubscriptionRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_ValidatedSubscription>(),
        interceptors: self.interceptors?.makeGetSubscriptionInterceptors() ?? [],
        wrapping: { try await self.getSubscription(request: $0, context: $1) }
      )

    case "Healthcheck":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeHealthcheckInterceptors() ?? [],
        wrapping: { try await self.healthcheck(request: $0, context: $1) }
      )

    case "ImportFacebookFriends":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ImportFacebookFriendsRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeImportFacebookFriendsInterceptors() ?? [],
        wrapping: { try await self.importFacebookFriends(request: $0, context: $1) }
      )

    case "ImportSteamFriends":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ImportSteamFriendsRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeImportSteamFriendsInterceptors() ?? [],
        wrapping: { try await self.importSteamFriends(request: $0, context: $1) }
      )

    case "JoinGroup":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_JoinGroupRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeJoinGroupInterceptors() ?? [],
        wrapping: { try await self.joinGroup(request: $0, context: $1) }
      )

    case "JoinTournament":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_JoinTournamentRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeJoinTournamentInterceptors() ?? [],
        wrapping: { try await self.joinTournament(request: $0, context: $1) }
      )

    case "KickGroupUsers":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_KickGroupUsersRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeKickGroupUsersInterceptors() ?? [],
        wrapping: { try await self.kickGroupUsers(request: $0, context: $1) }
      )

    case "LeaveGroup":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_LeaveGroupRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeLeaveGroupInterceptors() ?? [],
        wrapping: { try await self.leaveGroup(request: $0, context: $1) }
      )

    case "LinkApple":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AccountApple>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeLinkAppleInterceptors() ?? [],
        wrapping: { try await self.linkApple(request: $0, context: $1) }
      )

    case "LinkCustom":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AccountCustom>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeLinkCustomInterceptors() ?? [],
        wrapping: { try await self.linkCustom(request: $0, context: $1) }
      )

    case "LinkDevice":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AccountDevice>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeLinkDeviceInterceptors() ?? [],
        wrapping: { try await self.linkDevice(request: $0, context: $1) }
      )

    case "LinkEmail":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AccountEmail>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeLinkEmailInterceptors() ?? [],
        wrapping: { try await self.linkEmail(request: $0, context: $1) }
      )

    case "LinkFacebook":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_LinkFacebookRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeLinkFacebookInterceptors() ?? [],
        wrapping: { try await self.linkFacebook(request: $0, context: $1) }
      )

    case "LinkFacebookInstantGame":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AccountFacebookInstantGame>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeLinkFacebookInstantGameInterceptors() ?? [],
        wrapping: { try await self.linkFacebookInstantGame(request: $0, context: $1) }
      )

    case "LinkGameCenter":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AccountGameCenter>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeLinkGameCenterInterceptors() ?? [],
        wrapping: { try await self.linkGameCenter(request: $0, context: $1) }
      )

    case "LinkGoogle":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AccountGoogle>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeLinkGoogleInterceptors() ?? [],
        wrapping: { try await self.linkGoogle(request: $0, context: $1) }
      )

    case "LinkSteam":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_LinkSteamRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeLinkSteamInterceptors() ?? [],
        wrapping: { try await self.linkSteam(request: $0, context: $1) }
      )

    case "ListChannelMessages":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ListChannelMessagesRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_ChannelMessageList>(),
        interceptors: self.interceptors?.makeListChannelMessagesInterceptors() ?? [],
        wrapping: { try await self.listChannelMessages(request: $0, context: $1) }
      )

    case "ListFriends":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ListFriendsRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_FriendList>(),
        interceptors: self.interceptors?.makeListFriendsInterceptors() ?? [],
        wrapping: { try await self.listFriends(request: $0, context: $1) }
      )

    case "ListGroups":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ListGroupsRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_GroupList>(),
        interceptors: self.interceptors?.makeListGroupsInterceptors() ?? [],
        wrapping: { try await self.listGroups(request: $0, context: $1) }
      )

    case "ListGroupUsers":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ListGroupUsersRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_GroupUserList>(),
        interceptors: self.interceptors?.makeListGroupUsersInterceptors() ?? [],
        wrapping: { try await self.listGroupUsers(request: $0, context: $1) }
      )

    case "ListLeaderboardRecords":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ListLeaderboardRecordsRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_LeaderboardRecordList>(),
        interceptors: self.interceptors?.makeListLeaderboardRecordsInterceptors() ?? [],
        wrapping: { try await self.listLeaderboardRecords(request: $0, context: $1) }
      )

    case "ListLeaderboardRecordsAroundOwner":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ListLeaderboardRecordsAroundOwnerRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_LeaderboardRecordList>(),
        interceptors: self.interceptors?.makeListLeaderboardRecordsAroundOwnerInterceptors() ?? [],
        wrapping: { try await self.listLeaderboardRecordsAroundOwner(request: $0, context: $1) }
      )

    case "ListMatches":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ListMatchesRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_MatchList>(),
        interceptors: self.interceptors?.makeListMatchesInterceptors() ?? [],
        wrapping: { try await self.listMatches(request: $0, context: $1) }
      )

    case "ListNotifications":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ListNotificationsRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_NotificationList>(),
        interceptors: self.interceptors?.makeListNotificationsInterceptors() ?? [],
        wrapping: { try await self.listNotifications(request: $0, context: $1) }
      )

    case "ListStorageObjects":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ListStorageObjectsRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_StorageObjectList>(),
        interceptors: self.interceptors?.makeListStorageObjectsInterceptors() ?? [],
        wrapping: { try await self.listStorageObjects(request: $0, context: $1) }
      )

    case "ListSubscriptions":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ListSubscriptionsRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_SubscriptionList>(),
        interceptors: self.interceptors?.makeListSubscriptionsInterceptors() ?? [],
        wrapping: { try await self.listSubscriptions(request: $0, context: $1) }
      )

    case "ListTournaments":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ListTournamentsRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_TournamentList>(),
        interceptors: self.interceptors?.makeListTournamentsInterceptors() ?? [],
        wrapping: { try await self.listTournaments(request: $0, context: $1) }
      )

    case "ListTournamentRecords":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ListTournamentRecordsRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_TournamentRecordList>(),
        interceptors: self.interceptors?.makeListTournamentRecordsInterceptors() ?? [],
        wrapping: { try await self.listTournamentRecords(request: $0, context: $1) }
      )

    case "ListTournamentRecordsAroundOwner":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ListTournamentRecordsAroundOwnerRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_TournamentRecordList>(),
        interceptors: self.interceptors?.makeListTournamentRecordsAroundOwnerInterceptors() ?? [],
        wrapping: { try await self.listTournamentRecordsAroundOwner(request: $0, context: $1) }
      )

    case "ListUserGroups":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ListUserGroupsRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_UserGroupList>(),
        interceptors: self.interceptors?.makeListUserGroupsInterceptors() ?? [],
        wrapping: { try await self.listUserGroups(request: $0, context: $1) }
      )

    case "PromoteGroupUsers":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_PromoteGroupUsersRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makePromoteGroupUsersInterceptors() ?? [],
        wrapping: { try await self.promoteGroupUsers(request: $0, context: $1) }
      )

    case "DemoteGroupUsers":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_DemoteGroupUsersRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDemoteGroupUsersInterceptors() ?? [],
        wrapping: { try await self.demoteGroupUsers(request: $0, context: $1) }
      )

    case "ReadStorageObjects":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ReadStorageObjectsRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_StorageObjects>(),
        interceptors: self.interceptors?.makeReadStorageObjectsInterceptors() ?? [],
        wrapping: { try await self.readStorageObjects(request: $0, context: $1) }
      )

    case "RpcFunc":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_Rpc>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_Rpc>(),
        interceptors: self.interceptors?.makeRpcFuncInterceptors() ?? [],
        wrapping: { try await self.rpcFunc(request: $0, context: $1) }
      )

    case "UnlinkApple":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AccountApple>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeUnlinkAppleInterceptors() ?? [],
        wrapping: { try await self.unlinkApple(request: $0, context: $1) }
      )

    case "UnlinkCustom":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AccountCustom>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeUnlinkCustomInterceptors() ?? [],
        wrapping: { try await self.unlinkCustom(request: $0, context: $1) }
      )

    case "UnlinkDevice":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AccountDevice>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeUnlinkDeviceInterceptors() ?? [],
        wrapping: { try await self.unlinkDevice(request: $0, context: $1) }
      )

    case "UnlinkEmail":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AccountEmail>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeUnlinkEmailInterceptors() ?? [],
        wrapping: { try await self.unlinkEmail(request: $0, context: $1) }
      )

    case "UnlinkFacebook":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AccountFacebook>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeUnlinkFacebookInterceptors() ?? [],
        wrapping: { try await self.unlinkFacebook(request: $0, context: $1) }
      )

    case "UnlinkFacebookInstantGame":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AccountFacebookInstantGame>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeUnlinkFacebookInstantGameInterceptors() ?? [],
        wrapping: { try await self.unlinkFacebookInstantGame(request: $0, context: $1) }
      )

    case "UnlinkGameCenter":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AccountGameCenter>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeUnlinkGameCenterInterceptors() ?? [],
        wrapping: { try await self.unlinkGameCenter(request: $0, context: $1) }
      )

    case "UnlinkGoogle":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AccountGoogle>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeUnlinkGoogleInterceptors() ?? [],
        wrapping: { try await self.unlinkGoogle(request: $0, context: $1) }
      )

    case "UnlinkSteam":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_AccountSteam>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeUnlinkSteamInterceptors() ?? [],
        wrapping: { try await self.unlinkSteam(request: $0, context: $1) }
      )

    case "UpdateAccount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_UpdateAccountRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeUpdateAccountInterceptors() ?? [],
        wrapping: { try await self.updateAccount(request: $0, context: $1) }
      )

    case "UpdateGroup":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_UpdateGroupRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeUpdateGroupInterceptors() ?? [],
        wrapping: { try await self.updateGroup(request: $0, context: $1) }
      )

    case "ValidatePurchaseApple":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ValidatePurchaseAppleRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_ValidatePurchaseResponse>(),
        interceptors: self.interceptors?.makeValidatePurchaseAppleInterceptors() ?? [],
        wrapping: { try await self.validatePurchaseApple(request: $0, context: $1) }
      )

    case "ValidateSubscriptionApple":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ValidateSubscriptionAppleRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_ValidateSubscriptionResponse>(),
        interceptors: self.interceptors?.makeValidateSubscriptionAppleInterceptors() ?? [],
        wrapping: { try await self.validateSubscriptionApple(request: $0, context: $1) }
      )

    case "ValidatePurchaseGoogle":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ValidatePurchaseGoogleRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_ValidatePurchaseResponse>(),
        interceptors: self.interceptors?.makeValidatePurchaseGoogleInterceptors() ?? [],
        wrapping: { try await self.validatePurchaseGoogle(request: $0, context: $1) }
      )

    case "ValidateSubscriptionGoogle":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ValidateSubscriptionGoogleRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_ValidateSubscriptionResponse>(),
        interceptors: self.interceptors?.makeValidateSubscriptionGoogleInterceptors() ?? [],
        wrapping: { try await self.validateSubscriptionGoogle(request: $0, context: $1) }
      )

    case "ValidatePurchaseHuawei":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_ValidatePurchaseHuaweiRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_ValidatePurchaseResponse>(),
        interceptors: self.interceptors?.makeValidatePurchaseHuaweiInterceptors() ?? [],
        wrapping: { try await self.validatePurchaseHuawei(request: $0, context: $1) }
      )

    case "WriteLeaderboardRecord":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_WriteLeaderboardRecordRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_LeaderboardRecord>(),
        interceptors: self.interceptors?.makeWriteLeaderboardRecordInterceptors() ?? [],
        wrapping: { try await self.writeLeaderboardRecord(request: $0, context: $1) }
      )

    case "WriteStorageObjects":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_WriteStorageObjectsRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_StorageObjectAcks>(),
        interceptors: self.interceptors?.makeWriteStorageObjectsInterceptors() ?? [],
        wrapping: { try await self.writeStorageObjects(request: $0, context: $1) }
      )

    case "WriteTournamentRecord":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nakama_Api_WriteTournamentRecordRequest>(),
        responseSerializer: ProtobufSerializer<Nakama_Api_LeaderboardRecord>(),
        interceptors: self.interceptors?.makeWriteTournamentRecordInterceptors() ?? [],
        wrapping: { try await self.writeTournamentRecord(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Nakama_Api_NakamaServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'addFriends'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddFriendsInterceptors() -> [ServerInterceptor<Nakama_Api_AddFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'addGroupUsers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddGroupUsersInterceptors() -> [ServerInterceptor<Nakama_Api_AddGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'sessionRefresh'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSessionRefreshInterceptors() -> [ServerInterceptor<Nakama_Api_SessionRefreshRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when handling 'sessionLogout'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSessionLogoutInterceptors() -> [ServerInterceptor<Nakama_Api_SessionLogoutRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'authenticateApple'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAuthenticateAppleInterceptors() -> [ServerInterceptor<Nakama_Api_AuthenticateAppleRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when handling 'authenticateCustom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAuthenticateCustomInterceptors() -> [ServerInterceptor<Nakama_Api_AuthenticateCustomRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when handling 'authenticateDevice'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAuthenticateDeviceInterceptors() -> [ServerInterceptor<Nakama_Api_AuthenticateDeviceRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when handling 'authenticateEmail'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAuthenticateEmailInterceptors() -> [ServerInterceptor<Nakama_Api_AuthenticateEmailRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when handling 'authenticateFacebook'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAuthenticateFacebookInterceptors() -> [ServerInterceptor<Nakama_Api_AuthenticateFacebookRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when handling 'authenticateFacebookInstantGame'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAuthenticateFacebookInstantGameInterceptors() -> [ServerInterceptor<Nakama_Api_AuthenticateFacebookInstantGameRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when handling 'authenticateGameCenter'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAuthenticateGameCenterInterceptors() -> [ServerInterceptor<Nakama_Api_AuthenticateGameCenterRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when handling 'authenticateGoogle'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAuthenticateGoogleInterceptors() -> [ServerInterceptor<Nakama_Api_AuthenticateGoogleRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when handling 'authenticateSteam'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAuthenticateSteamInterceptors() -> [ServerInterceptor<Nakama_Api_AuthenticateSteamRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when handling 'banGroupUsers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBanGroupUsersInterceptors() -> [ServerInterceptor<Nakama_Api_BanGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'blockFriends'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBlockFriendsInterceptors() -> [ServerInterceptor<Nakama_Api_BlockFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'createGroup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateGroupInterceptors() -> [ServerInterceptor<Nakama_Api_CreateGroupRequest, Nakama_Api_Group>]

  /// - Returns: Interceptors to use when handling 'deleteAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteAccountInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'deleteFriends'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteFriendsInterceptors() -> [ServerInterceptor<Nakama_Api_DeleteFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'deleteGroup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteGroupInterceptors() -> [ServerInterceptor<Nakama_Api_DeleteGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'deleteLeaderboardRecord'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteLeaderboardRecordInterceptors() -> [ServerInterceptor<Nakama_Api_DeleteLeaderboardRecordRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'deleteNotifications'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteNotificationsInterceptors() -> [ServerInterceptor<Nakama_Api_DeleteNotificationsRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'deleteTournamentRecord'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteTournamentRecordInterceptors() -> [ServerInterceptor<Nakama_Api_DeleteTournamentRecordRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'deleteStorageObjects'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteStorageObjectsInterceptors() -> [ServerInterceptor<Nakama_Api_DeleteStorageObjectsRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'event'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEventInterceptors() -> [ServerInterceptor<Nakama_Api_Event, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'getAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAccountInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Nakama_Api_Account>]

  /// - Returns: Interceptors to use when handling 'getUsers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetUsersInterceptors() -> [ServerInterceptor<Nakama_Api_GetUsersRequest, Nakama_Api_Users>]

  /// - Returns: Interceptors to use when handling 'getSubscription'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetSubscriptionInterceptors() -> [ServerInterceptor<Nakama_Api_GetSubscriptionRequest, Nakama_Api_ValidatedSubscription>]

  /// - Returns: Interceptors to use when handling 'healthcheck'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeHealthcheckInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'importFacebookFriends'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeImportFacebookFriendsInterceptors() -> [ServerInterceptor<Nakama_Api_ImportFacebookFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'importSteamFriends'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeImportSteamFriendsInterceptors() -> [ServerInterceptor<Nakama_Api_ImportSteamFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'joinGroup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeJoinGroupInterceptors() -> [ServerInterceptor<Nakama_Api_JoinGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'joinTournament'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeJoinTournamentInterceptors() -> [ServerInterceptor<Nakama_Api_JoinTournamentRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'kickGroupUsers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeKickGroupUsersInterceptors() -> [ServerInterceptor<Nakama_Api_KickGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'leaveGroup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLeaveGroupInterceptors() -> [ServerInterceptor<Nakama_Api_LeaveGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'linkApple'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLinkAppleInterceptors() -> [ServerInterceptor<Nakama_Api_AccountApple, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'linkCustom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLinkCustomInterceptors() -> [ServerInterceptor<Nakama_Api_AccountCustom, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'linkDevice'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLinkDeviceInterceptors() -> [ServerInterceptor<Nakama_Api_AccountDevice, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'linkEmail'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLinkEmailInterceptors() -> [ServerInterceptor<Nakama_Api_AccountEmail, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'linkFacebook'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLinkFacebookInterceptors() -> [ServerInterceptor<Nakama_Api_LinkFacebookRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'linkFacebookInstantGame'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLinkFacebookInstantGameInterceptors() -> [ServerInterceptor<Nakama_Api_AccountFacebookInstantGame, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'linkGameCenter'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLinkGameCenterInterceptors() -> [ServerInterceptor<Nakama_Api_AccountGameCenter, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'linkGoogle'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLinkGoogleInterceptors() -> [ServerInterceptor<Nakama_Api_AccountGoogle, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'linkSteam'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLinkSteamInterceptors() -> [ServerInterceptor<Nakama_Api_LinkSteamRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'listChannelMessages'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListChannelMessagesInterceptors() -> [ServerInterceptor<Nakama_Api_ListChannelMessagesRequest, Nakama_Api_ChannelMessageList>]

  /// - Returns: Interceptors to use when handling 'listFriends'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListFriendsInterceptors() -> [ServerInterceptor<Nakama_Api_ListFriendsRequest, Nakama_Api_FriendList>]

  /// - Returns: Interceptors to use when handling 'listGroups'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListGroupsInterceptors() -> [ServerInterceptor<Nakama_Api_ListGroupsRequest, Nakama_Api_GroupList>]

  /// - Returns: Interceptors to use when handling 'listGroupUsers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListGroupUsersInterceptors() -> [ServerInterceptor<Nakama_Api_ListGroupUsersRequest, Nakama_Api_GroupUserList>]

  /// - Returns: Interceptors to use when handling 'listLeaderboardRecords'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListLeaderboardRecordsInterceptors() -> [ServerInterceptor<Nakama_Api_ListLeaderboardRecordsRequest, Nakama_Api_LeaderboardRecordList>]

  /// - Returns: Interceptors to use when handling 'listLeaderboardRecordsAroundOwner'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListLeaderboardRecordsAroundOwnerInterceptors() -> [ServerInterceptor<Nakama_Api_ListLeaderboardRecordsAroundOwnerRequest, Nakama_Api_LeaderboardRecordList>]

  /// - Returns: Interceptors to use when handling 'listMatches'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListMatchesInterceptors() -> [ServerInterceptor<Nakama_Api_ListMatchesRequest, Nakama_Api_MatchList>]

  /// - Returns: Interceptors to use when handling 'listNotifications'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListNotificationsInterceptors() -> [ServerInterceptor<Nakama_Api_ListNotificationsRequest, Nakama_Api_NotificationList>]

  /// - Returns: Interceptors to use when handling 'listStorageObjects'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListStorageObjectsInterceptors() -> [ServerInterceptor<Nakama_Api_ListStorageObjectsRequest, Nakama_Api_StorageObjectList>]

  /// - Returns: Interceptors to use when handling 'listSubscriptions'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListSubscriptionsInterceptors() -> [ServerInterceptor<Nakama_Api_ListSubscriptionsRequest, Nakama_Api_SubscriptionList>]

  /// - Returns: Interceptors to use when handling 'listTournaments'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListTournamentsInterceptors() -> [ServerInterceptor<Nakama_Api_ListTournamentsRequest, Nakama_Api_TournamentList>]

  /// - Returns: Interceptors to use when handling 'listTournamentRecords'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListTournamentRecordsInterceptors() -> [ServerInterceptor<Nakama_Api_ListTournamentRecordsRequest, Nakama_Api_TournamentRecordList>]

  /// - Returns: Interceptors to use when handling 'listTournamentRecordsAroundOwner'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListTournamentRecordsAroundOwnerInterceptors() -> [ServerInterceptor<Nakama_Api_ListTournamentRecordsAroundOwnerRequest, Nakama_Api_TournamentRecordList>]

  /// - Returns: Interceptors to use when handling 'listUserGroups'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListUserGroupsInterceptors() -> [ServerInterceptor<Nakama_Api_ListUserGroupsRequest, Nakama_Api_UserGroupList>]

  /// - Returns: Interceptors to use when handling 'promoteGroupUsers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePromoteGroupUsersInterceptors() -> [ServerInterceptor<Nakama_Api_PromoteGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'demoteGroupUsers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDemoteGroupUsersInterceptors() -> [ServerInterceptor<Nakama_Api_DemoteGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'readStorageObjects'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeReadStorageObjectsInterceptors() -> [ServerInterceptor<Nakama_Api_ReadStorageObjectsRequest, Nakama_Api_StorageObjects>]

  /// - Returns: Interceptors to use when handling 'rpcFunc'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRpcFuncInterceptors() -> [ServerInterceptor<Nakama_Api_Rpc, Nakama_Api_Rpc>]

  /// - Returns: Interceptors to use when handling 'unlinkApple'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnlinkAppleInterceptors() -> [ServerInterceptor<Nakama_Api_AccountApple, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'unlinkCustom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnlinkCustomInterceptors() -> [ServerInterceptor<Nakama_Api_AccountCustom, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'unlinkDevice'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnlinkDeviceInterceptors() -> [ServerInterceptor<Nakama_Api_AccountDevice, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'unlinkEmail'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnlinkEmailInterceptors() -> [ServerInterceptor<Nakama_Api_AccountEmail, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'unlinkFacebook'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnlinkFacebookInterceptors() -> [ServerInterceptor<Nakama_Api_AccountFacebook, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'unlinkFacebookInstantGame'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnlinkFacebookInstantGameInterceptors() -> [ServerInterceptor<Nakama_Api_AccountFacebookInstantGame, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'unlinkGameCenter'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnlinkGameCenterInterceptors() -> [ServerInterceptor<Nakama_Api_AccountGameCenter, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'unlinkGoogle'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnlinkGoogleInterceptors() -> [ServerInterceptor<Nakama_Api_AccountGoogle, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'unlinkSteam'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnlinkSteamInterceptors() -> [ServerInterceptor<Nakama_Api_AccountSteam, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'updateAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateAccountInterceptors() -> [ServerInterceptor<Nakama_Api_UpdateAccountRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'updateGroup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateGroupInterceptors() -> [ServerInterceptor<Nakama_Api_UpdateGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'validatePurchaseApple'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValidatePurchaseAppleInterceptors() -> [ServerInterceptor<Nakama_Api_ValidatePurchaseAppleRequest, Nakama_Api_ValidatePurchaseResponse>]

  /// - Returns: Interceptors to use when handling 'validateSubscriptionApple'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValidateSubscriptionAppleInterceptors() -> [ServerInterceptor<Nakama_Api_ValidateSubscriptionAppleRequest, Nakama_Api_ValidateSubscriptionResponse>]

  /// - Returns: Interceptors to use when handling 'validatePurchaseGoogle'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValidatePurchaseGoogleInterceptors() -> [ServerInterceptor<Nakama_Api_ValidatePurchaseGoogleRequest, Nakama_Api_ValidatePurchaseResponse>]

  /// - Returns: Interceptors to use when handling 'validateSubscriptionGoogle'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValidateSubscriptionGoogleInterceptors() -> [ServerInterceptor<Nakama_Api_ValidateSubscriptionGoogleRequest, Nakama_Api_ValidateSubscriptionResponse>]

  /// - Returns: Interceptors to use when handling 'validatePurchaseHuawei'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValidatePurchaseHuaweiInterceptors() -> [ServerInterceptor<Nakama_Api_ValidatePurchaseHuaweiRequest, Nakama_Api_ValidatePurchaseResponse>]

  /// - Returns: Interceptors to use when handling 'writeLeaderboardRecord'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWriteLeaderboardRecordInterceptors() -> [ServerInterceptor<Nakama_Api_WriteLeaderboardRecordRequest, Nakama_Api_LeaderboardRecord>]

  /// - Returns: Interceptors to use when handling 'writeStorageObjects'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWriteStorageObjectsInterceptors() -> [ServerInterceptor<Nakama_Api_WriteStorageObjectsRequest, Nakama_Api_StorageObjectAcks>]

  /// - Returns: Interceptors to use when handling 'writeTournamentRecord'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWriteTournamentRecordInterceptors() -> [ServerInterceptor<Nakama_Api_WriteTournamentRecordRequest, Nakama_Api_LeaderboardRecord>]
}

internal enum Nakama_Api_NakamaServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Nakama",
    fullName: "nakama.api.Nakama",
    methods: [
      Nakama_Api_NakamaServerMetadata.Methods.addFriends,
      Nakama_Api_NakamaServerMetadata.Methods.addGroupUsers,
      Nakama_Api_NakamaServerMetadata.Methods.sessionRefresh,
      Nakama_Api_NakamaServerMetadata.Methods.sessionLogout,
      Nakama_Api_NakamaServerMetadata.Methods.authenticateApple,
      Nakama_Api_NakamaServerMetadata.Methods.authenticateCustom,
      Nakama_Api_NakamaServerMetadata.Methods.authenticateDevice,
      Nakama_Api_NakamaServerMetadata.Methods.authenticateEmail,
      Nakama_Api_NakamaServerMetadata.Methods.authenticateFacebook,
      Nakama_Api_NakamaServerMetadata.Methods.authenticateFacebookInstantGame,
      Nakama_Api_NakamaServerMetadata.Methods.authenticateGameCenter,
      Nakama_Api_NakamaServerMetadata.Methods.authenticateGoogle,
      Nakama_Api_NakamaServerMetadata.Methods.authenticateSteam,
      Nakama_Api_NakamaServerMetadata.Methods.banGroupUsers,
      Nakama_Api_NakamaServerMetadata.Methods.blockFriends,
      Nakama_Api_NakamaServerMetadata.Methods.createGroup,
      Nakama_Api_NakamaServerMetadata.Methods.deleteAccount,
      Nakama_Api_NakamaServerMetadata.Methods.deleteFriends,
      Nakama_Api_NakamaServerMetadata.Methods.deleteGroup,
      Nakama_Api_NakamaServerMetadata.Methods.deleteLeaderboardRecord,
      Nakama_Api_NakamaServerMetadata.Methods.deleteNotifications,
      Nakama_Api_NakamaServerMetadata.Methods.deleteTournamentRecord,
      Nakama_Api_NakamaServerMetadata.Methods.deleteStorageObjects,
      Nakama_Api_NakamaServerMetadata.Methods.event,
      Nakama_Api_NakamaServerMetadata.Methods.getAccount,
      Nakama_Api_NakamaServerMetadata.Methods.getUsers,
      Nakama_Api_NakamaServerMetadata.Methods.getSubscription,
      Nakama_Api_NakamaServerMetadata.Methods.healthcheck,
      Nakama_Api_NakamaServerMetadata.Methods.importFacebookFriends,
      Nakama_Api_NakamaServerMetadata.Methods.importSteamFriends,
      Nakama_Api_NakamaServerMetadata.Methods.joinGroup,
      Nakama_Api_NakamaServerMetadata.Methods.joinTournament,
      Nakama_Api_NakamaServerMetadata.Methods.kickGroupUsers,
      Nakama_Api_NakamaServerMetadata.Methods.leaveGroup,
      Nakama_Api_NakamaServerMetadata.Methods.linkApple,
      Nakama_Api_NakamaServerMetadata.Methods.linkCustom,
      Nakama_Api_NakamaServerMetadata.Methods.linkDevice,
      Nakama_Api_NakamaServerMetadata.Methods.linkEmail,
      Nakama_Api_NakamaServerMetadata.Methods.linkFacebook,
      Nakama_Api_NakamaServerMetadata.Methods.linkFacebookInstantGame,
      Nakama_Api_NakamaServerMetadata.Methods.linkGameCenter,
      Nakama_Api_NakamaServerMetadata.Methods.linkGoogle,
      Nakama_Api_NakamaServerMetadata.Methods.linkSteam,
      Nakama_Api_NakamaServerMetadata.Methods.listChannelMessages,
      Nakama_Api_NakamaServerMetadata.Methods.listFriends,
      Nakama_Api_NakamaServerMetadata.Methods.listGroups,
      Nakama_Api_NakamaServerMetadata.Methods.listGroupUsers,
      Nakama_Api_NakamaServerMetadata.Methods.listLeaderboardRecords,
      Nakama_Api_NakamaServerMetadata.Methods.listLeaderboardRecordsAroundOwner,
      Nakama_Api_NakamaServerMetadata.Methods.listMatches,
      Nakama_Api_NakamaServerMetadata.Methods.listNotifications,
      Nakama_Api_NakamaServerMetadata.Methods.listStorageObjects,
      Nakama_Api_NakamaServerMetadata.Methods.listSubscriptions,
      Nakama_Api_NakamaServerMetadata.Methods.listTournaments,
      Nakama_Api_NakamaServerMetadata.Methods.listTournamentRecords,
      Nakama_Api_NakamaServerMetadata.Methods.listTournamentRecordsAroundOwner,
      Nakama_Api_NakamaServerMetadata.Methods.listUserGroups,
      Nakama_Api_NakamaServerMetadata.Methods.promoteGroupUsers,
      Nakama_Api_NakamaServerMetadata.Methods.demoteGroupUsers,
      Nakama_Api_NakamaServerMetadata.Methods.readStorageObjects,
      Nakama_Api_NakamaServerMetadata.Methods.rpcFunc,
      Nakama_Api_NakamaServerMetadata.Methods.unlinkApple,
      Nakama_Api_NakamaServerMetadata.Methods.unlinkCustom,
      Nakama_Api_NakamaServerMetadata.Methods.unlinkDevice,
      Nakama_Api_NakamaServerMetadata.Methods.unlinkEmail,
      Nakama_Api_NakamaServerMetadata.Methods.unlinkFacebook,
      Nakama_Api_NakamaServerMetadata.Methods.unlinkFacebookInstantGame,
      Nakama_Api_NakamaServerMetadata.Methods.unlinkGameCenter,
      Nakama_Api_NakamaServerMetadata.Methods.unlinkGoogle,
      Nakama_Api_NakamaServerMetadata.Methods.unlinkSteam,
      Nakama_Api_NakamaServerMetadata.Methods.updateAccount,
      Nakama_Api_NakamaServerMetadata.Methods.updateGroup,
      Nakama_Api_NakamaServerMetadata.Methods.validatePurchaseApple,
      Nakama_Api_NakamaServerMetadata.Methods.validateSubscriptionApple,
      Nakama_Api_NakamaServerMetadata.Methods.validatePurchaseGoogle,
      Nakama_Api_NakamaServerMetadata.Methods.validateSubscriptionGoogle,
      Nakama_Api_NakamaServerMetadata.Methods.validatePurchaseHuawei,
      Nakama_Api_NakamaServerMetadata.Methods.writeLeaderboardRecord,
      Nakama_Api_NakamaServerMetadata.Methods.writeStorageObjects,
      Nakama_Api_NakamaServerMetadata.Methods.writeTournamentRecord,
    ]
  )

  internal enum Methods {
    internal static let addFriends = GRPCMethodDescriptor(
      name: "AddFriends",
      path: "/nakama.api.Nakama/AddFriends",
      type: GRPCCallType.unary
    )

    internal static let addGroupUsers = GRPCMethodDescriptor(
      name: "AddGroupUsers",
      path: "/nakama.api.Nakama/AddGroupUsers",
      type: GRPCCallType.unary
    )

    internal static let sessionRefresh = GRPCMethodDescriptor(
      name: "SessionRefresh",
      path: "/nakama.api.Nakama/SessionRefresh",
      type: GRPCCallType.unary
    )

    internal static let sessionLogout = GRPCMethodDescriptor(
      name: "SessionLogout",
      path: "/nakama.api.Nakama/SessionLogout",
      type: GRPCCallType.unary
    )

    internal static let authenticateApple = GRPCMethodDescriptor(
      name: "AuthenticateApple",
      path: "/nakama.api.Nakama/AuthenticateApple",
      type: GRPCCallType.unary
    )

    internal static let authenticateCustom = GRPCMethodDescriptor(
      name: "AuthenticateCustom",
      path: "/nakama.api.Nakama/AuthenticateCustom",
      type: GRPCCallType.unary
    )

    internal static let authenticateDevice = GRPCMethodDescriptor(
      name: "AuthenticateDevice",
      path: "/nakama.api.Nakama/AuthenticateDevice",
      type: GRPCCallType.unary
    )

    internal static let authenticateEmail = GRPCMethodDescriptor(
      name: "AuthenticateEmail",
      path: "/nakama.api.Nakama/AuthenticateEmail",
      type: GRPCCallType.unary
    )

    internal static let authenticateFacebook = GRPCMethodDescriptor(
      name: "AuthenticateFacebook",
      path: "/nakama.api.Nakama/AuthenticateFacebook",
      type: GRPCCallType.unary
    )

    internal static let authenticateFacebookInstantGame = GRPCMethodDescriptor(
      name: "AuthenticateFacebookInstantGame",
      path: "/nakama.api.Nakama/AuthenticateFacebookInstantGame",
      type: GRPCCallType.unary
    )

    internal static let authenticateGameCenter = GRPCMethodDescriptor(
      name: "AuthenticateGameCenter",
      path: "/nakama.api.Nakama/AuthenticateGameCenter",
      type: GRPCCallType.unary
    )

    internal static let authenticateGoogle = GRPCMethodDescriptor(
      name: "AuthenticateGoogle",
      path: "/nakama.api.Nakama/AuthenticateGoogle",
      type: GRPCCallType.unary
    )

    internal static let authenticateSteam = GRPCMethodDescriptor(
      name: "AuthenticateSteam",
      path: "/nakama.api.Nakama/AuthenticateSteam",
      type: GRPCCallType.unary
    )

    internal static let banGroupUsers = GRPCMethodDescriptor(
      name: "BanGroupUsers",
      path: "/nakama.api.Nakama/BanGroupUsers",
      type: GRPCCallType.unary
    )

    internal static let blockFriends = GRPCMethodDescriptor(
      name: "BlockFriends",
      path: "/nakama.api.Nakama/BlockFriends",
      type: GRPCCallType.unary
    )

    internal static let createGroup = GRPCMethodDescriptor(
      name: "CreateGroup",
      path: "/nakama.api.Nakama/CreateGroup",
      type: GRPCCallType.unary
    )

    internal static let deleteAccount = GRPCMethodDescriptor(
      name: "DeleteAccount",
      path: "/nakama.api.Nakama/DeleteAccount",
      type: GRPCCallType.unary
    )

    internal static let deleteFriends = GRPCMethodDescriptor(
      name: "DeleteFriends",
      path: "/nakama.api.Nakama/DeleteFriends",
      type: GRPCCallType.unary
    )

    internal static let deleteGroup = GRPCMethodDescriptor(
      name: "DeleteGroup",
      path: "/nakama.api.Nakama/DeleteGroup",
      type: GRPCCallType.unary
    )

    internal static let deleteLeaderboardRecord = GRPCMethodDescriptor(
      name: "DeleteLeaderboardRecord",
      path: "/nakama.api.Nakama/DeleteLeaderboardRecord",
      type: GRPCCallType.unary
    )

    internal static let deleteNotifications = GRPCMethodDescriptor(
      name: "DeleteNotifications",
      path: "/nakama.api.Nakama/DeleteNotifications",
      type: GRPCCallType.unary
    )

    internal static let deleteTournamentRecord = GRPCMethodDescriptor(
      name: "DeleteTournamentRecord",
      path: "/nakama.api.Nakama/DeleteTournamentRecord",
      type: GRPCCallType.unary
    )

    internal static let deleteStorageObjects = GRPCMethodDescriptor(
      name: "DeleteStorageObjects",
      path: "/nakama.api.Nakama/DeleteStorageObjects",
      type: GRPCCallType.unary
    )

    internal static let event = GRPCMethodDescriptor(
      name: "Event",
      path: "/nakama.api.Nakama/Event",
      type: GRPCCallType.unary
    )

    internal static let getAccount = GRPCMethodDescriptor(
      name: "GetAccount",
      path: "/nakama.api.Nakama/GetAccount",
      type: GRPCCallType.unary
    )

    internal static let getUsers = GRPCMethodDescriptor(
      name: "GetUsers",
      path: "/nakama.api.Nakama/GetUsers",
      type: GRPCCallType.unary
    )

    internal static let getSubscription = GRPCMethodDescriptor(
      name: "GetSubscription",
      path: "/nakama.api.Nakama/GetSubscription",
      type: GRPCCallType.unary
    )

    internal static let healthcheck = GRPCMethodDescriptor(
      name: "Healthcheck",
      path: "/nakama.api.Nakama/Healthcheck",
      type: GRPCCallType.unary
    )

    internal static let importFacebookFriends = GRPCMethodDescriptor(
      name: "ImportFacebookFriends",
      path: "/nakama.api.Nakama/ImportFacebookFriends",
      type: GRPCCallType.unary
    )

    internal static let importSteamFriends = GRPCMethodDescriptor(
      name: "ImportSteamFriends",
      path: "/nakama.api.Nakama/ImportSteamFriends",
      type: GRPCCallType.unary
    )

    internal static let joinGroup = GRPCMethodDescriptor(
      name: "JoinGroup",
      path: "/nakama.api.Nakama/JoinGroup",
      type: GRPCCallType.unary
    )

    internal static let joinTournament = GRPCMethodDescriptor(
      name: "JoinTournament",
      path: "/nakama.api.Nakama/JoinTournament",
      type: GRPCCallType.unary
    )

    internal static let kickGroupUsers = GRPCMethodDescriptor(
      name: "KickGroupUsers",
      path: "/nakama.api.Nakama/KickGroupUsers",
      type: GRPCCallType.unary
    )

    internal static let leaveGroup = GRPCMethodDescriptor(
      name: "LeaveGroup",
      path: "/nakama.api.Nakama/LeaveGroup",
      type: GRPCCallType.unary
    )

    internal static let linkApple = GRPCMethodDescriptor(
      name: "LinkApple",
      path: "/nakama.api.Nakama/LinkApple",
      type: GRPCCallType.unary
    )

    internal static let linkCustom = GRPCMethodDescriptor(
      name: "LinkCustom",
      path: "/nakama.api.Nakama/LinkCustom",
      type: GRPCCallType.unary
    )

    internal static let linkDevice = GRPCMethodDescriptor(
      name: "LinkDevice",
      path: "/nakama.api.Nakama/LinkDevice",
      type: GRPCCallType.unary
    )

    internal static let linkEmail = GRPCMethodDescriptor(
      name: "LinkEmail",
      path: "/nakama.api.Nakama/LinkEmail",
      type: GRPCCallType.unary
    )

    internal static let linkFacebook = GRPCMethodDescriptor(
      name: "LinkFacebook",
      path: "/nakama.api.Nakama/LinkFacebook",
      type: GRPCCallType.unary
    )

    internal static let linkFacebookInstantGame = GRPCMethodDescriptor(
      name: "LinkFacebookInstantGame",
      path: "/nakama.api.Nakama/LinkFacebookInstantGame",
      type: GRPCCallType.unary
    )

    internal static let linkGameCenter = GRPCMethodDescriptor(
      name: "LinkGameCenter",
      path: "/nakama.api.Nakama/LinkGameCenter",
      type: GRPCCallType.unary
    )

    internal static let linkGoogle = GRPCMethodDescriptor(
      name: "LinkGoogle",
      path: "/nakama.api.Nakama/LinkGoogle",
      type: GRPCCallType.unary
    )

    internal static let linkSteam = GRPCMethodDescriptor(
      name: "LinkSteam",
      path: "/nakama.api.Nakama/LinkSteam",
      type: GRPCCallType.unary
    )

    internal static let listChannelMessages = GRPCMethodDescriptor(
      name: "ListChannelMessages",
      path: "/nakama.api.Nakama/ListChannelMessages",
      type: GRPCCallType.unary
    )

    internal static let listFriends = GRPCMethodDescriptor(
      name: "ListFriends",
      path: "/nakama.api.Nakama/ListFriends",
      type: GRPCCallType.unary
    )

    internal static let listGroups = GRPCMethodDescriptor(
      name: "ListGroups",
      path: "/nakama.api.Nakama/ListGroups",
      type: GRPCCallType.unary
    )

    internal static let listGroupUsers = GRPCMethodDescriptor(
      name: "ListGroupUsers",
      path: "/nakama.api.Nakama/ListGroupUsers",
      type: GRPCCallType.unary
    )

    internal static let listLeaderboardRecords = GRPCMethodDescriptor(
      name: "ListLeaderboardRecords",
      path: "/nakama.api.Nakama/ListLeaderboardRecords",
      type: GRPCCallType.unary
    )

    internal static let listLeaderboardRecordsAroundOwner = GRPCMethodDescriptor(
      name: "ListLeaderboardRecordsAroundOwner",
      path: "/nakama.api.Nakama/ListLeaderboardRecordsAroundOwner",
      type: GRPCCallType.unary
    )

    internal static let listMatches = GRPCMethodDescriptor(
      name: "ListMatches",
      path: "/nakama.api.Nakama/ListMatches",
      type: GRPCCallType.unary
    )

    internal static let listNotifications = GRPCMethodDescriptor(
      name: "ListNotifications",
      path: "/nakama.api.Nakama/ListNotifications",
      type: GRPCCallType.unary
    )

    internal static let listStorageObjects = GRPCMethodDescriptor(
      name: "ListStorageObjects",
      path: "/nakama.api.Nakama/ListStorageObjects",
      type: GRPCCallType.unary
    )

    internal static let listSubscriptions = GRPCMethodDescriptor(
      name: "ListSubscriptions",
      path: "/nakama.api.Nakama/ListSubscriptions",
      type: GRPCCallType.unary
    )

    internal static let listTournaments = GRPCMethodDescriptor(
      name: "ListTournaments",
      path: "/nakama.api.Nakama/ListTournaments",
      type: GRPCCallType.unary
    )

    internal static let listTournamentRecords = GRPCMethodDescriptor(
      name: "ListTournamentRecords",
      path: "/nakama.api.Nakama/ListTournamentRecords",
      type: GRPCCallType.unary
    )

    internal static let listTournamentRecordsAroundOwner = GRPCMethodDescriptor(
      name: "ListTournamentRecordsAroundOwner",
      path: "/nakama.api.Nakama/ListTournamentRecordsAroundOwner",
      type: GRPCCallType.unary
    )

    internal static let listUserGroups = GRPCMethodDescriptor(
      name: "ListUserGroups",
      path: "/nakama.api.Nakama/ListUserGroups",
      type: GRPCCallType.unary
    )

    internal static let promoteGroupUsers = GRPCMethodDescriptor(
      name: "PromoteGroupUsers",
      path: "/nakama.api.Nakama/PromoteGroupUsers",
      type: GRPCCallType.unary
    )

    internal static let demoteGroupUsers = GRPCMethodDescriptor(
      name: "DemoteGroupUsers",
      path: "/nakama.api.Nakama/DemoteGroupUsers",
      type: GRPCCallType.unary
    )

    internal static let readStorageObjects = GRPCMethodDescriptor(
      name: "ReadStorageObjects",
      path: "/nakama.api.Nakama/ReadStorageObjects",
      type: GRPCCallType.unary
    )

    internal static let rpcFunc = GRPCMethodDescriptor(
      name: "RpcFunc",
      path: "/nakama.api.Nakama/RpcFunc",
      type: GRPCCallType.unary
    )

    internal static let unlinkApple = GRPCMethodDescriptor(
      name: "UnlinkApple",
      path: "/nakama.api.Nakama/UnlinkApple",
      type: GRPCCallType.unary
    )

    internal static let unlinkCustom = GRPCMethodDescriptor(
      name: "UnlinkCustom",
      path: "/nakama.api.Nakama/UnlinkCustom",
      type: GRPCCallType.unary
    )

    internal static let unlinkDevice = GRPCMethodDescriptor(
      name: "UnlinkDevice",
      path: "/nakama.api.Nakama/UnlinkDevice",
      type: GRPCCallType.unary
    )

    internal static let unlinkEmail = GRPCMethodDescriptor(
      name: "UnlinkEmail",
      path: "/nakama.api.Nakama/UnlinkEmail",
      type: GRPCCallType.unary
    )

    internal static let unlinkFacebook = GRPCMethodDescriptor(
      name: "UnlinkFacebook",
      path: "/nakama.api.Nakama/UnlinkFacebook",
      type: GRPCCallType.unary
    )

    internal static let unlinkFacebookInstantGame = GRPCMethodDescriptor(
      name: "UnlinkFacebookInstantGame",
      path: "/nakama.api.Nakama/UnlinkFacebookInstantGame",
      type: GRPCCallType.unary
    )

    internal static let unlinkGameCenter = GRPCMethodDescriptor(
      name: "UnlinkGameCenter",
      path: "/nakama.api.Nakama/UnlinkGameCenter",
      type: GRPCCallType.unary
    )

    internal static let unlinkGoogle = GRPCMethodDescriptor(
      name: "UnlinkGoogle",
      path: "/nakama.api.Nakama/UnlinkGoogle",
      type: GRPCCallType.unary
    )

    internal static let unlinkSteam = GRPCMethodDescriptor(
      name: "UnlinkSteam",
      path: "/nakama.api.Nakama/UnlinkSteam",
      type: GRPCCallType.unary
    )

    internal static let updateAccount = GRPCMethodDescriptor(
      name: "UpdateAccount",
      path: "/nakama.api.Nakama/UpdateAccount",
      type: GRPCCallType.unary
    )

    internal static let updateGroup = GRPCMethodDescriptor(
      name: "UpdateGroup",
      path: "/nakama.api.Nakama/UpdateGroup",
      type: GRPCCallType.unary
    )

    internal static let validatePurchaseApple = GRPCMethodDescriptor(
      name: "ValidatePurchaseApple",
      path: "/nakama.api.Nakama/ValidatePurchaseApple",
      type: GRPCCallType.unary
    )

    internal static let validateSubscriptionApple = GRPCMethodDescriptor(
      name: "ValidateSubscriptionApple",
      path: "/nakama.api.Nakama/ValidateSubscriptionApple",
      type: GRPCCallType.unary
    )

    internal static let validatePurchaseGoogle = GRPCMethodDescriptor(
      name: "ValidatePurchaseGoogle",
      path: "/nakama.api.Nakama/ValidatePurchaseGoogle",
      type: GRPCCallType.unary
    )

    internal static let validateSubscriptionGoogle = GRPCMethodDescriptor(
      name: "ValidateSubscriptionGoogle",
      path: "/nakama.api.Nakama/ValidateSubscriptionGoogle",
      type: GRPCCallType.unary
    )

    internal static let validatePurchaseHuawei = GRPCMethodDescriptor(
      name: "ValidatePurchaseHuawei",
      path: "/nakama.api.Nakama/ValidatePurchaseHuawei",
      type: GRPCCallType.unary
    )

    internal static let writeLeaderboardRecord = GRPCMethodDescriptor(
      name: "WriteLeaderboardRecord",
      path: "/nakama.api.Nakama/WriteLeaderboardRecord",
      type: GRPCCallType.unary
    )

    internal static let writeStorageObjects = GRPCMethodDescriptor(
      name: "WriteStorageObjects",
      path: "/nakama.api.Nakama/WriteStorageObjects",
      type: GRPCCallType.unary
    )

    internal static let writeTournamentRecord = GRPCMethodDescriptor(
      name: "WriteTournamentRecord",
      path: "/nakama.api.Nakama/WriteTournamentRecord",
      type: GRPCCallType.unary
    )
  }
}

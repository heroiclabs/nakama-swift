//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: apigrpc.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol Nakama_Api_NakamaAddFriendsCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaAddFriendsCallBase: ClientCallUnaryBase<Nakama_Api_AddFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaAddFriendsCall {
  override class var method: String { return "/nakama.api.Nakama/AddFriends" }
}

internal protocol Nakama_Api_NakamaAddGroupUsersCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaAddGroupUsersCallBase: ClientCallUnaryBase<Nakama_Api_AddGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaAddGroupUsersCall {
  override class var method: String { return "/nakama.api.Nakama/AddGroupUsers" }
}

internal protocol Nakama_Api_NakamaAuthenticateCustomCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaAuthenticateCustomCallBase: ClientCallUnaryBase<Nakama_Api_AuthenticateCustomRequest, Nakama_Api_Session>, Nakama_Api_NakamaAuthenticateCustomCall {
  override class var method: String { return "/nakama.api.Nakama/AuthenticateCustom" }
}

internal protocol Nakama_Api_NakamaAuthenticateDeviceCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaAuthenticateDeviceCallBase: ClientCallUnaryBase<Nakama_Api_AuthenticateDeviceRequest, Nakama_Api_Session>, Nakama_Api_NakamaAuthenticateDeviceCall {
  override class var method: String { return "/nakama.api.Nakama/AuthenticateDevice" }
}

internal protocol Nakama_Api_NakamaAuthenticateEmailCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaAuthenticateEmailCallBase: ClientCallUnaryBase<Nakama_Api_AuthenticateEmailRequest, Nakama_Api_Session>, Nakama_Api_NakamaAuthenticateEmailCall {
  override class var method: String { return "/nakama.api.Nakama/AuthenticateEmail" }
}

internal protocol Nakama_Api_NakamaAuthenticateFacebookCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaAuthenticateFacebookCallBase: ClientCallUnaryBase<Nakama_Api_AuthenticateFacebookRequest, Nakama_Api_Session>, Nakama_Api_NakamaAuthenticateFacebookCall {
  override class var method: String { return "/nakama.api.Nakama/AuthenticateFacebook" }
}

internal protocol Nakama_Api_NakamaAuthenticateGameCenterCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaAuthenticateGameCenterCallBase: ClientCallUnaryBase<Nakama_Api_AuthenticateGameCenterRequest, Nakama_Api_Session>, Nakama_Api_NakamaAuthenticateGameCenterCall {
  override class var method: String { return "/nakama.api.Nakama/AuthenticateGameCenter" }
}

internal protocol Nakama_Api_NakamaAuthenticateGoogleCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaAuthenticateGoogleCallBase: ClientCallUnaryBase<Nakama_Api_AuthenticateGoogleRequest, Nakama_Api_Session>, Nakama_Api_NakamaAuthenticateGoogleCall {
  override class var method: String { return "/nakama.api.Nakama/AuthenticateGoogle" }
}

internal protocol Nakama_Api_NakamaAuthenticateSteamCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaAuthenticateSteamCallBase: ClientCallUnaryBase<Nakama_Api_AuthenticateSteamRequest, Nakama_Api_Session>, Nakama_Api_NakamaAuthenticateSteamCall {
  override class var method: String { return "/nakama.api.Nakama/AuthenticateSteam" }
}

internal protocol Nakama_Api_NakamaBlockFriendsCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaBlockFriendsCallBase: ClientCallUnaryBase<Nakama_Api_BlockFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaBlockFriendsCall {
  override class var method: String { return "/nakama.api.Nakama/BlockFriends" }
}

internal protocol Nakama_Api_NakamaCreateGroupCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaCreateGroupCallBase: ClientCallUnaryBase<Nakama_Api_CreateGroupRequest, Nakama_Api_Group>, Nakama_Api_NakamaCreateGroupCall {
  override class var method: String { return "/nakama.api.Nakama/CreateGroup" }
}

internal protocol Nakama_Api_NakamaDeleteFriendsCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaDeleteFriendsCallBase: ClientCallUnaryBase<Nakama_Api_DeleteFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaDeleteFriendsCall {
  override class var method: String { return "/nakama.api.Nakama/DeleteFriends" }
}

internal protocol Nakama_Api_NakamaDeleteGroupCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaDeleteGroupCallBase: ClientCallUnaryBase<Nakama_Api_DeleteGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaDeleteGroupCall {
  override class var method: String { return "/nakama.api.Nakama/DeleteGroup" }
}

internal protocol Nakama_Api_NakamaDeleteLeaderboardRecordCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaDeleteLeaderboardRecordCallBase: ClientCallUnaryBase<Nakama_Api_DeleteLeaderboardRecordRequest, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaDeleteLeaderboardRecordCall {
  override class var method: String { return "/nakama.api.Nakama/DeleteLeaderboardRecord" }
}

internal protocol Nakama_Api_NakamaDeleteNotificationsCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaDeleteNotificationsCallBase: ClientCallUnaryBase<Nakama_Api_DeleteNotificationsRequest, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaDeleteNotificationsCall {
  override class var method: String { return "/nakama.api.Nakama/DeleteNotifications" }
}

internal protocol Nakama_Api_NakamaDeleteStorageObjectsCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaDeleteStorageObjectsCallBase: ClientCallUnaryBase<Nakama_Api_DeleteStorageObjectsRequest, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaDeleteStorageObjectsCall {
  override class var method: String { return "/nakama.api.Nakama/DeleteStorageObjects" }
}

internal protocol Nakama_Api_NakamaGetAccountCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaGetAccountCallBase: ClientCallUnaryBase<SwiftProtobuf.Google_Protobuf_Empty, Nakama_Api_Account>, Nakama_Api_NakamaGetAccountCall {
  override class var method: String { return "/nakama.api.Nakama/GetAccount" }
}

internal protocol Nakama_Api_NakamaGetUsersCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaGetUsersCallBase: ClientCallUnaryBase<Nakama_Api_GetUsersRequest, Nakama_Api_Users>, Nakama_Api_NakamaGetUsersCall {
  override class var method: String { return "/nakama.api.Nakama/GetUsers" }
}

internal protocol Nakama_Api_NakamaHealthcheckCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaHealthcheckCallBase: ClientCallUnaryBase<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaHealthcheckCall {
  override class var method: String { return "/nakama.api.Nakama/Healthcheck" }
}

internal protocol Nakama_Api_NakamaImportFacebookFriendsCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaImportFacebookFriendsCallBase: ClientCallUnaryBase<Nakama_Api_ImportFacebookFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaImportFacebookFriendsCall {
  override class var method: String { return "/nakama.api.Nakama/ImportFacebookFriends" }
}

internal protocol Nakama_Api_NakamaJoinGroupCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaJoinGroupCallBase: ClientCallUnaryBase<Nakama_Api_JoinGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaJoinGroupCall {
  override class var method: String { return "/nakama.api.Nakama/JoinGroup" }
}

internal protocol Nakama_Api_NakamaJoinTournamentCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaJoinTournamentCallBase: ClientCallUnaryBase<Nakama_Api_JoinTournamentRequest, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaJoinTournamentCall {
  override class var method: String { return "/nakama.api.Nakama/JoinTournament" }
}

internal protocol Nakama_Api_NakamaKickGroupUsersCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaKickGroupUsersCallBase: ClientCallUnaryBase<Nakama_Api_KickGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaKickGroupUsersCall {
  override class var method: String { return "/nakama.api.Nakama/KickGroupUsers" }
}

internal protocol Nakama_Api_NakamaLeaveGroupCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaLeaveGroupCallBase: ClientCallUnaryBase<Nakama_Api_LeaveGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaLeaveGroupCall {
  override class var method: String { return "/nakama.api.Nakama/LeaveGroup" }
}

internal protocol Nakama_Api_NakamaLinkCustomCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaLinkCustomCallBase: ClientCallUnaryBase<Nakama_Api_AccountCustom, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaLinkCustomCall {
  override class var method: String { return "/nakama.api.Nakama/LinkCustom" }
}

internal protocol Nakama_Api_NakamaLinkDeviceCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaLinkDeviceCallBase: ClientCallUnaryBase<Nakama_Api_AccountDevice, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaLinkDeviceCall {
  override class var method: String { return "/nakama.api.Nakama/LinkDevice" }
}

internal protocol Nakama_Api_NakamaLinkEmailCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaLinkEmailCallBase: ClientCallUnaryBase<Nakama_Api_AccountEmail, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaLinkEmailCall {
  override class var method: String { return "/nakama.api.Nakama/LinkEmail" }
}

internal protocol Nakama_Api_NakamaLinkFacebookCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaLinkFacebookCallBase: ClientCallUnaryBase<Nakama_Api_LinkFacebookRequest, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaLinkFacebookCall {
  override class var method: String { return "/nakama.api.Nakama/LinkFacebook" }
}

internal protocol Nakama_Api_NakamaLinkGameCenterCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaLinkGameCenterCallBase: ClientCallUnaryBase<Nakama_Api_AccountGameCenter, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaLinkGameCenterCall {
  override class var method: String { return "/nakama.api.Nakama/LinkGameCenter" }
}

internal protocol Nakama_Api_NakamaLinkGoogleCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaLinkGoogleCallBase: ClientCallUnaryBase<Nakama_Api_AccountGoogle, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaLinkGoogleCall {
  override class var method: String { return "/nakama.api.Nakama/LinkGoogle" }
}

internal protocol Nakama_Api_NakamaLinkSteamCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaLinkSteamCallBase: ClientCallUnaryBase<Nakama_Api_AccountSteam, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaLinkSteamCall {
  override class var method: String { return "/nakama.api.Nakama/LinkSteam" }
}

internal protocol Nakama_Api_NakamaListChannelMessagesCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaListChannelMessagesCallBase: ClientCallUnaryBase<Nakama_Api_ListChannelMessagesRequest, Nakama_Api_ChannelMessageList>, Nakama_Api_NakamaListChannelMessagesCall {
  override class var method: String { return "/nakama.api.Nakama/ListChannelMessages" }
}

internal protocol Nakama_Api_NakamaListFriendsCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaListFriendsCallBase: ClientCallUnaryBase<SwiftProtobuf.Google_Protobuf_Empty, Nakama_Api_Friends>, Nakama_Api_NakamaListFriendsCall {
  override class var method: String { return "/nakama.api.Nakama/ListFriends" }
}

internal protocol Nakama_Api_NakamaListGroupsCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaListGroupsCallBase: ClientCallUnaryBase<Nakama_Api_ListGroupsRequest, Nakama_Api_GroupList>, Nakama_Api_NakamaListGroupsCall {
  override class var method: String { return "/nakama.api.Nakama/ListGroups" }
}

internal protocol Nakama_Api_NakamaListGroupUsersCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaListGroupUsersCallBase: ClientCallUnaryBase<Nakama_Api_ListGroupUsersRequest, Nakama_Api_GroupUserList>, Nakama_Api_NakamaListGroupUsersCall {
  override class var method: String { return "/nakama.api.Nakama/ListGroupUsers" }
}

internal protocol Nakama_Api_NakamaListLeaderboardRecordsCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaListLeaderboardRecordsCallBase: ClientCallUnaryBase<Nakama_Api_ListLeaderboardRecordsRequest, Nakama_Api_LeaderboardRecordList>, Nakama_Api_NakamaListLeaderboardRecordsCall {
  override class var method: String { return "/nakama.api.Nakama/ListLeaderboardRecords" }
}

internal protocol Nakama_Api_NakamaListLeaderboardRecordsAroundOwnerCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaListLeaderboardRecordsAroundOwnerCallBase: ClientCallUnaryBase<Nakama_Api_ListLeaderboardRecordsAroundOwnerRequest, Nakama_Api_LeaderboardRecordList>, Nakama_Api_NakamaListLeaderboardRecordsAroundOwnerCall {
  override class var method: String { return "/nakama.api.Nakama/ListLeaderboardRecordsAroundOwner" }
}

internal protocol Nakama_Api_NakamaListMatchesCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaListMatchesCallBase: ClientCallUnaryBase<Nakama_Api_ListMatchesRequest, Nakama_Api_MatchList>, Nakama_Api_NakamaListMatchesCall {
  override class var method: String { return "/nakama.api.Nakama/ListMatches" }
}

internal protocol Nakama_Api_NakamaListNotificationsCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaListNotificationsCallBase: ClientCallUnaryBase<Nakama_Api_ListNotificationsRequest, Nakama_Api_NotificationList>, Nakama_Api_NakamaListNotificationsCall {
  override class var method: String { return "/nakama.api.Nakama/ListNotifications" }
}

internal protocol Nakama_Api_NakamaListStorageObjectsCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaListStorageObjectsCallBase: ClientCallUnaryBase<Nakama_Api_ListStorageObjectsRequest, Nakama_Api_StorageObjectList>, Nakama_Api_NakamaListStorageObjectsCall {
  override class var method: String { return "/nakama.api.Nakama/ListStorageObjects" }
}

internal protocol Nakama_Api_NakamaListTournamentsCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaListTournamentsCallBase: ClientCallUnaryBase<Nakama_Api_ListTournamentsRequest, Nakama_Api_TournamentList>, Nakama_Api_NakamaListTournamentsCall {
  override class var method: String { return "/nakama.api.Nakama/ListTournaments" }
}

internal protocol Nakama_Api_NakamaListTournamentRecordsCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaListTournamentRecordsCallBase: ClientCallUnaryBase<Nakama_Api_ListTournamentRecordsRequest, Nakama_Api_TournamentRecordList>, Nakama_Api_NakamaListTournamentRecordsCall {
  override class var method: String { return "/nakama.api.Nakama/ListTournamentRecords" }
}

internal protocol Nakama_Api_NakamaListTournamentRecordsAroundOwnerCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaListTournamentRecordsAroundOwnerCallBase: ClientCallUnaryBase<Nakama_Api_ListTournamentRecordsAroundOwnerRequest, Nakama_Api_TournamentRecordList>, Nakama_Api_NakamaListTournamentRecordsAroundOwnerCall {
  override class var method: String { return "/nakama.api.Nakama/ListTournamentRecordsAroundOwner" }
}

internal protocol Nakama_Api_NakamaListUserGroupsCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaListUserGroupsCallBase: ClientCallUnaryBase<Nakama_Api_ListUserGroupsRequest, Nakama_Api_UserGroupList>, Nakama_Api_NakamaListUserGroupsCall {
  override class var method: String { return "/nakama.api.Nakama/ListUserGroups" }
}

internal protocol Nakama_Api_NakamaPromoteGroupUsersCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaPromoteGroupUsersCallBase: ClientCallUnaryBase<Nakama_Api_PromoteGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaPromoteGroupUsersCall {
  override class var method: String { return "/nakama.api.Nakama/PromoteGroupUsers" }
}

internal protocol Nakama_Api_NakamaReadStorageObjectsCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaReadStorageObjectsCallBase: ClientCallUnaryBase<Nakama_Api_ReadStorageObjectsRequest, Nakama_Api_StorageObjects>, Nakama_Api_NakamaReadStorageObjectsCall {
  override class var method: String { return "/nakama.api.Nakama/ReadStorageObjects" }
}

internal protocol Nakama_Api_NakamaRpcFuncCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaRpcFuncCallBase: ClientCallUnaryBase<Nakama_Api_Rpc, Nakama_Api_Rpc>, Nakama_Api_NakamaRpcFuncCall {
  override class var method: String { return "/nakama.api.Nakama/RpcFunc" }
}

internal protocol Nakama_Api_NakamaUnlinkCustomCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaUnlinkCustomCallBase: ClientCallUnaryBase<Nakama_Api_AccountCustom, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaUnlinkCustomCall {
  override class var method: String { return "/nakama.api.Nakama/UnlinkCustom" }
}

internal protocol Nakama_Api_NakamaUnlinkDeviceCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaUnlinkDeviceCallBase: ClientCallUnaryBase<Nakama_Api_AccountDevice, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaUnlinkDeviceCall {
  override class var method: String { return "/nakama.api.Nakama/UnlinkDevice" }
}

internal protocol Nakama_Api_NakamaUnlinkEmailCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaUnlinkEmailCallBase: ClientCallUnaryBase<Nakama_Api_AccountEmail, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaUnlinkEmailCall {
  override class var method: String { return "/nakama.api.Nakama/UnlinkEmail" }
}

internal protocol Nakama_Api_NakamaUnlinkFacebookCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaUnlinkFacebookCallBase: ClientCallUnaryBase<Nakama_Api_AccountFacebook, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaUnlinkFacebookCall {
  override class var method: String { return "/nakama.api.Nakama/UnlinkFacebook" }
}

internal protocol Nakama_Api_NakamaUnlinkGameCenterCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaUnlinkGameCenterCallBase: ClientCallUnaryBase<Nakama_Api_AccountGameCenter, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaUnlinkGameCenterCall {
  override class var method: String { return "/nakama.api.Nakama/UnlinkGameCenter" }
}

internal protocol Nakama_Api_NakamaUnlinkGoogleCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaUnlinkGoogleCallBase: ClientCallUnaryBase<Nakama_Api_AccountGoogle, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaUnlinkGoogleCall {
  override class var method: String { return "/nakama.api.Nakama/UnlinkGoogle" }
}

internal protocol Nakama_Api_NakamaUnlinkSteamCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaUnlinkSteamCallBase: ClientCallUnaryBase<Nakama_Api_AccountSteam, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaUnlinkSteamCall {
  override class var method: String { return "/nakama.api.Nakama/UnlinkSteam" }
}

internal protocol Nakama_Api_NakamaUpdateAccountCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaUpdateAccountCallBase: ClientCallUnaryBase<Nakama_Api_UpdateAccountRequest, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaUpdateAccountCall {
  override class var method: String { return "/nakama.api.Nakama/UpdateAccount" }
}

internal protocol Nakama_Api_NakamaUpdateGroupCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaUpdateGroupCallBase: ClientCallUnaryBase<Nakama_Api_UpdateGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaUpdateGroupCall {
  override class var method: String { return "/nakama.api.Nakama/UpdateGroup" }
}

internal protocol Nakama_Api_NakamaWriteLeaderboardRecordCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaWriteLeaderboardRecordCallBase: ClientCallUnaryBase<Nakama_Api_WriteLeaderboardRecordRequest, Nakama_Api_LeaderboardRecord>, Nakama_Api_NakamaWriteLeaderboardRecordCall {
  override class var method: String { return "/nakama.api.Nakama/WriteLeaderboardRecord" }
}

internal protocol Nakama_Api_NakamaWriteStorageObjectsCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaWriteStorageObjectsCallBase: ClientCallUnaryBase<Nakama_Api_WriteStorageObjectsRequest, Nakama_Api_StorageObjectAcks>, Nakama_Api_NakamaWriteStorageObjectsCall {
  override class var method: String { return "/nakama.api.Nakama/WriteStorageObjects" }
}

internal protocol Nakama_Api_NakamaWriteTournamentRecordCall: ClientCallUnary {}

fileprivate final class Nakama_Api_NakamaWriteTournamentRecordCallBase: ClientCallUnaryBase<Nakama_Api_WriteTournamentRecordRequest, Nakama_Api_LeaderboardRecord>, Nakama_Api_NakamaWriteTournamentRecordCall {
  override class var method: String { return "/nakama.api.Nakama/WriteTournamentRecord" }
}


/// Instantiate Nakama_Api_NakamaServiceClient, then call methods of this protocol to make API calls.
internal protocol Nakama_Api_NakamaService: ServiceClient {
  /// Synchronous. Unary.
  func addFriends(_ request: Nakama_Api_AddFriendsRequest) throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Asynchronous. Unary.
  func addFriends(_ request: Nakama_Api_AddFriendsRequest, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaAddFriendsCall

  /// Synchronous. Unary.
  func addGroupUsers(_ request: Nakama_Api_AddGroupUsersRequest) throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Asynchronous. Unary.
  func addGroupUsers(_ request: Nakama_Api_AddGroupUsersRequest, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaAddGroupUsersCall

  /// Synchronous. Unary.
  func authenticateCustom(_ request: Nakama_Api_AuthenticateCustomRequest) throws -> Nakama_Api_Session
  /// Asynchronous. Unary.
  func authenticateCustom(_ request: Nakama_Api_AuthenticateCustomRequest, completion: @escaping (Nakama_Api_Session?, CallResult) -> Void) throws -> Nakama_Api_NakamaAuthenticateCustomCall

  /// Synchronous. Unary.
  func authenticateDevice(_ request: Nakama_Api_AuthenticateDeviceRequest) throws -> Nakama_Api_Session
  /// Asynchronous. Unary.
  func authenticateDevice(_ request: Nakama_Api_AuthenticateDeviceRequest, completion: @escaping (Nakama_Api_Session?, CallResult) -> Void) throws -> Nakama_Api_NakamaAuthenticateDeviceCall

  /// Synchronous. Unary.
  func authenticateEmail(_ request: Nakama_Api_AuthenticateEmailRequest) throws -> Nakama_Api_Session
  /// Asynchronous. Unary.
  func authenticateEmail(_ request: Nakama_Api_AuthenticateEmailRequest, completion: @escaping (Nakama_Api_Session?, CallResult) -> Void) throws -> Nakama_Api_NakamaAuthenticateEmailCall

  /// Synchronous. Unary.
  func authenticateFacebook(_ request: Nakama_Api_AuthenticateFacebookRequest) throws -> Nakama_Api_Session
  /// Asynchronous. Unary.
  func authenticateFacebook(_ request: Nakama_Api_AuthenticateFacebookRequest, completion: @escaping (Nakama_Api_Session?, CallResult) -> Void) throws -> Nakama_Api_NakamaAuthenticateFacebookCall

  /// Synchronous. Unary.
  func authenticateGameCenter(_ request: Nakama_Api_AuthenticateGameCenterRequest) throws -> Nakama_Api_Session
  /// Asynchronous. Unary.
  func authenticateGameCenter(_ request: Nakama_Api_AuthenticateGameCenterRequest, completion: @escaping (Nakama_Api_Session?, CallResult) -> Void) throws -> Nakama_Api_NakamaAuthenticateGameCenterCall

  /// Synchronous. Unary.
  func authenticateGoogle(_ request: Nakama_Api_AuthenticateGoogleRequest) throws -> Nakama_Api_Session
  /// Asynchronous. Unary.
  func authenticateGoogle(_ request: Nakama_Api_AuthenticateGoogleRequest, completion: @escaping (Nakama_Api_Session?, CallResult) -> Void) throws -> Nakama_Api_NakamaAuthenticateGoogleCall

  /// Synchronous. Unary.
  func authenticateSteam(_ request: Nakama_Api_AuthenticateSteamRequest) throws -> Nakama_Api_Session
  /// Asynchronous. Unary.
  func authenticateSteam(_ request: Nakama_Api_AuthenticateSteamRequest, completion: @escaping (Nakama_Api_Session?, CallResult) -> Void) throws -> Nakama_Api_NakamaAuthenticateSteamCall

  /// Synchronous. Unary.
  func blockFriends(_ request: Nakama_Api_BlockFriendsRequest) throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Asynchronous. Unary.
  func blockFriends(_ request: Nakama_Api_BlockFriendsRequest, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaBlockFriendsCall

  /// Synchronous. Unary.
  func createGroup(_ request: Nakama_Api_CreateGroupRequest) throws -> Nakama_Api_Group
  /// Asynchronous. Unary.
  func createGroup(_ request: Nakama_Api_CreateGroupRequest, completion: @escaping (Nakama_Api_Group?, CallResult) -> Void) throws -> Nakama_Api_NakamaCreateGroupCall

  /// Synchronous. Unary.
  func deleteFriends(_ request: Nakama_Api_DeleteFriendsRequest) throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Asynchronous. Unary.
  func deleteFriends(_ request: Nakama_Api_DeleteFriendsRequest, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaDeleteFriendsCall

  /// Synchronous. Unary.
  func deleteGroup(_ request: Nakama_Api_DeleteGroupRequest) throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Asynchronous. Unary.
  func deleteGroup(_ request: Nakama_Api_DeleteGroupRequest, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaDeleteGroupCall

  /// Synchronous. Unary.
  func deleteLeaderboardRecord(_ request: Nakama_Api_DeleteLeaderboardRecordRequest) throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Asynchronous. Unary.
  func deleteLeaderboardRecord(_ request: Nakama_Api_DeleteLeaderboardRecordRequest, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaDeleteLeaderboardRecordCall

  /// Synchronous. Unary.
  func deleteNotifications(_ request: Nakama_Api_DeleteNotificationsRequest) throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Asynchronous. Unary.
  func deleteNotifications(_ request: Nakama_Api_DeleteNotificationsRequest, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaDeleteNotificationsCall

  /// Synchronous. Unary.
  func deleteStorageObjects(_ request: Nakama_Api_DeleteStorageObjectsRequest) throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Asynchronous. Unary.
  func deleteStorageObjects(_ request: Nakama_Api_DeleteStorageObjectsRequest, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaDeleteStorageObjectsCall

  /// Synchronous. Unary.
  func getAccount(_ request: SwiftProtobuf.Google_Protobuf_Empty) throws -> Nakama_Api_Account
  /// Asynchronous. Unary.
  func getAccount(_ request: SwiftProtobuf.Google_Protobuf_Empty, completion: @escaping (Nakama_Api_Account?, CallResult) -> Void) throws -> Nakama_Api_NakamaGetAccountCall

  /// Synchronous. Unary.
  func getUsers(_ request: Nakama_Api_GetUsersRequest) throws -> Nakama_Api_Users
  /// Asynchronous. Unary.
  func getUsers(_ request: Nakama_Api_GetUsersRequest, completion: @escaping (Nakama_Api_Users?, CallResult) -> Void) throws -> Nakama_Api_NakamaGetUsersCall

  /// Synchronous. Unary.
  func healthcheck(_ request: SwiftProtobuf.Google_Protobuf_Empty) throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Asynchronous. Unary.
  func healthcheck(_ request: SwiftProtobuf.Google_Protobuf_Empty, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaHealthcheckCall

  /// Synchronous. Unary.
  func importFacebookFriends(_ request: Nakama_Api_ImportFacebookFriendsRequest) throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Asynchronous. Unary.
  func importFacebookFriends(_ request: Nakama_Api_ImportFacebookFriendsRequest, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaImportFacebookFriendsCall

  /// Synchronous. Unary.
  func joinGroup(_ request: Nakama_Api_JoinGroupRequest) throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Asynchronous. Unary.
  func joinGroup(_ request: Nakama_Api_JoinGroupRequest, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaJoinGroupCall

  /// Synchronous. Unary.
  func joinTournament(_ request: Nakama_Api_JoinTournamentRequest) throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Asynchronous. Unary.
  func joinTournament(_ request: Nakama_Api_JoinTournamentRequest, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaJoinTournamentCall

  /// Synchronous. Unary.
  func kickGroupUsers(_ request: Nakama_Api_KickGroupUsersRequest) throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Asynchronous. Unary.
  func kickGroupUsers(_ request: Nakama_Api_KickGroupUsersRequest, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaKickGroupUsersCall

  /// Synchronous. Unary.
  func leaveGroup(_ request: Nakama_Api_LeaveGroupRequest) throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Asynchronous. Unary.
  func leaveGroup(_ request: Nakama_Api_LeaveGroupRequest, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaLeaveGroupCall

  /// Synchronous. Unary.
  func linkCustom(_ request: Nakama_Api_AccountCustom) throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Asynchronous. Unary.
  func linkCustom(_ request: Nakama_Api_AccountCustom, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaLinkCustomCall

  /// Synchronous. Unary.
  func linkDevice(_ request: Nakama_Api_AccountDevice) throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Asynchronous. Unary.
  func linkDevice(_ request: Nakama_Api_AccountDevice, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaLinkDeviceCall

  /// Synchronous. Unary.
  func linkEmail(_ request: Nakama_Api_AccountEmail) throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Asynchronous. Unary.
  func linkEmail(_ request: Nakama_Api_AccountEmail, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaLinkEmailCall

  /// Synchronous. Unary.
  func linkFacebook(_ request: Nakama_Api_LinkFacebookRequest) throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Asynchronous. Unary.
  func linkFacebook(_ request: Nakama_Api_LinkFacebookRequest, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaLinkFacebookCall

  /// Synchronous. Unary.
  func linkGameCenter(_ request: Nakama_Api_AccountGameCenter) throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Asynchronous. Unary.
  func linkGameCenter(_ request: Nakama_Api_AccountGameCenter, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaLinkGameCenterCall

  /// Synchronous. Unary.
  func linkGoogle(_ request: Nakama_Api_AccountGoogle) throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Asynchronous. Unary.
  func linkGoogle(_ request: Nakama_Api_AccountGoogle, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaLinkGoogleCall

  /// Synchronous. Unary.
  func linkSteam(_ request: Nakama_Api_AccountSteam) throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Asynchronous. Unary.
  func linkSteam(_ request: Nakama_Api_AccountSteam, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaLinkSteamCall

  /// Synchronous. Unary.
  func listChannelMessages(_ request: Nakama_Api_ListChannelMessagesRequest) throws -> Nakama_Api_ChannelMessageList
  /// Asynchronous. Unary.
  func listChannelMessages(_ request: Nakama_Api_ListChannelMessagesRequest, completion: @escaping (Nakama_Api_ChannelMessageList?, CallResult) -> Void) throws -> Nakama_Api_NakamaListChannelMessagesCall

  /// Synchronous. Unary.
  func listFriends(_ request: SwiftProtobuf.Google_Protobuf_Empty) throws -> Nakama_Api_Friends
  /// Asynchronous. Unary.
  func listFriends(_ request: SwiftProtobuf.Google_Protobuf_Empty, completion: @escaping (Nakama_Api_Friends?, CallResult) -> Void) throws -> Nakama_Api_NakamaListFriendsCall

  /// Synchronous. Unary.
  func listGroups(_ request: Nakama_Api_ListGroupsRequest) throws -> Nakama_Api_GroupList
  /// Asynchronous. Unary.
  func listGroups(_ request: Nakama_Api_ListGroupsRequest, completion: @escaping (Nakama_Api_GroupList?, CallResult) -> Void) throws -> Nakama_Api_NakamaListGroupsCall

  /// Synchronous. Unary.
  func listGroupUsers(_ request: Nakama_Api_ListGroupUsersRequest) throws -> Nakama_Api_GroupUserList
  /// Asynchronous. Unary.
  func listGroupUsers(_ request: Nakama_Api_ListGroupUsersRequest, completion: @escaping (Nakama_Api_GroupUserList?, CallResult) -> Void) throws -> Nakama_Api_NakamaListGroupUsersCall

  /// Synchronous. Unary.
  func listLeaderboardRecords(_ request: Nakama_Api_ListLeaderboardRecordsRequest) throws -> Nakama_Api_LeaderboardRecordList
  /// Asynchronous. Unary.
  func listLeaderboardRecords(_ request: Nakama_Api_ListLeaderboardRecordsRequest, completion: @escaping (Nakama_Api_LeaderboardRecordList?, CallResult) -> Void) throws -> Nakama_Api_NakamaListLeaderboardRecordsCall

  /// Synchronous. Unary.
  func listLeaderboardRecordsAroundOwner(_ request: Nakama_Api_ListLeaderboardRecordsAroundOwnerRequest) throws -> Nakama_Api_LeaderboardRecordList
  /// Asynchronous. Unary.
  func listLeaderboardRecordsAroundOwner(_ request: Nakama_Api_ListLeaderboardRecordsAroundOwnerRequest, completion: @escaping (Nakama_Api_LeaderboardRecordList?, CallResult) -> Void) throws -> Nakama_Api_NakamaListLeaderboardRecordsAroundOwnerCall

  /// Synchronous. Unary.
  func listMatches(_ request: Nakama_Api_ListMatchesRequest) throws -> Nakama_Api_MatchList
  /// Asynchronous. Unary.
  func listMatches(_ request: Nakama_Api_ListMatchesRequest, completion: @escaping (Nakama_Api_MatchList?, CallResult) -> Void) throws -> Nakama_Api_NakamaListMatchesCall

  /// Synchronous. Unary.
  func listNotifications(_ request: Nakama_Api_ListNotificationsRequest) throws -> Nakama_Api_NotificationList
  /// Asynchronous. Unary.
  func listNotifications(_ request: Nakama_Api_ListNotificationsRequest, completion: @escaping (Nakama_Api_NotificationList?, CallResult) -> Void) throws -> Nakama_Api_NakamaListNotificationsCall

  /// Synchronous. Unary.
  func listStorageObjects(_ request: Nakama_Api_ListStorageObjectsRequest) throws -> Nakama_Api_StorageObjectList
  /// Asynchronous. Unary.
  func listStorageObjects(_ request: Nakama_Api_ListStorageObjectsRequest, completion: @escaping (Nakama_Api_StorageObjectList?, CallResult) -> Void) throws -> Nakama_Api_NakamaListStorageObjectsCall

  /// Synchronous. Unary.
  func listTournaments(_ request: Nakama_Api_ListTournamentsRequest) throws -> Nakama_Api_TournamentList
  /// Asynchronous. Unary.
  func listTournaments(_ request: Nakama_Api_ListTournamentsRequest, completion: @escaping (Nakama_Api_TournamentList?, CallResult) -> Void) throws -> Nakama_Api_NakamaListTournamentsCall

  /// Synchronous. Unary.
  func listTournamentRecords(_ request: Nakama_Api_ListTournamentRecordsRequest) throws -> Nakama_Api_TournamentRecordList
  /// Asynchronous. Unary.
  func listTournamentRecords(_ request: Nakama_Api_ListTournamentRecordsRequest, completion: @escaping (Nakama_Api_TournamentRecordList?, CallResult) -> Void) throws -> Nakama_Api_NakamaListTournamentRecordsCall

  /// Synchronous. Unary.
  func listTournamentRecordsAroundOwner(_ request: Nakama_Api_ListTournamentRecordsAroundOwnerRequest) throws -> Nakama_Api_TournamentRecordList
  /// Asynchronous. Unary.
  func listTournamentRecordsAroundOwner(_ request: Nakama_Api_ListTournamentRecordsAroundOwnerRequest, completion: @escaping (Nakama_Api_TournamentRecordList?, CallResult) -> Void) throws -> Nakama_Api_NakamaListTournamentRecordsAroundOwnerCall

  /// Synchronous. Unary.
  func listUserGroups(_ request: Nakama_Api_ListUserGroupsRequest) throws -> Nakama_Api_UserGroupList
  /// Asynchronous. Unary.
  func listUserGroups(_ request: Nakama_Api_ListUserGroupsRequest, completion: @escaping (Nakama_Api_UserGroupList?, CallResult) -> Void) throws -> Nakama_Api_NakamaListUserGroupsCall

  /// Synchronous. Unary.
  func promoteGroupUsers(_ request: Nakama_Api_PromoteGroupUsersRequest) throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Asynchronous. Unary.
  func promoteGroupUsers(_ request: Nakama_Api_PromoteGroupUsersRequest, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaPromoteGroupUsersCall

  /// Synchronous. Unary.
  func readStorageObjects(_ request: Nakama_Api_ReadStorageObjectsRequest) throws -> Nakama_Api_StorageObjects
  /// Asynchronous. Unary.
  func readStorageObjects(_ request: Nakama_Api_ReadStorageObjectsRequest, completion: @escaping (Nakama_Api_StorageObjects?, CallResult) -> Void) throws -> Nakama_Api_NakamaReadStorageObjectsCall

  /// Synchronous. Unary.
  func rpcFunc(_ request: Nakama_Api_Rpc) throws -> Nakama_Api_Rpc
  /// Asynchronous. Unary.
  func rpcFunc(_ request: Nakama_Api_Rpc, completion: @escaping (Nakama_Api_Rpc?, CallResult) -> Void) throws -> Nakama_Api_NakamaRpcFuncCall

  /// Synchronous. Unary.
  func unlinkCustom(_ request: Nakama_Api_AccountCustom) throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Asynchronous. Unary.
  func unlinkCustom(_ request: Nakama_Api_AccountCustom, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaUnlinkCustomCall

  /// Synchronous. Unary.
  func unlinkDevice(_ request: Nakama_Api_AccountDevice) throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Asynchronous. Unary.
  func unlinkDevice(_ request: Nakama_Api_AccountDevice, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaUnlinkDeviceCall

  /// Synchronous. Unary.
  func unlinkEmail(_ request: Nakama_Api_AccountEmail) throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Asynchronous. Unary.
  func unlinkEmail(_ request: Nakama_Api_AccountEmail, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaUnlinkEmailCall

  /// Synchronous. Unary.
  func unlinkFacebook(_ request: Nakama_Api_AccountFacebook) throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Asynchronous. Unary.
  func unlinkFacebook(_ request: Nakama_Api_AccountFacebook, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaUnlinkFacebookCall

  /// Synchronous. Unary.
  func unlinkGameCenter(_ request: Nakama_Api_AccountGameCenter) throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Asynchronous. Unary.
  func unlinkGameCenter(_ request: Nakama_Api_AccountGameCenter, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaUnlinkGameCenterCall

  /// Synchronous. Unary.
  func unlinkGoogle(_ request: Nakama_Api_AccountGoogle) throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Asynchronous. Unary.
  func unlinkGoogle(_ request: Nakama_Api_AccountGoogle, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaUnlinkGoogleCall

  /// Synchronous. Unary.
  func unlinkSteam(_ request: Nakama_Api_AccountSteam) throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Asynchronous. Unary.
  func unlinkSteam(_ request: Nakama_Api_AccountSteam, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaUnlinkSteamCall

  /// Synchronous. Unary.
  func updateAccount(_ request: Nakama_Api_UpdateAccountRequest) throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Asynchronous. Unary.
  func updateAccount(_ request: Nakama_Api_UpdateAccountRequest, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaUpdateAccountCall

  /// Synchronous. Unary.
  func updateGroup(_ request: Nakama_Api_UpdateGroupRequest) throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Asynchronous. Unary.
  func updateGroup(_ request: Nakama_Api_UpdateGroupRequest, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaUpdateGroupCall

  /// Synchronous. Unary.
  func writeLeaderboardRecord(_ request: Nakama_Api_WriteLeaderboardRecordRequest) throws -> Nakama_Api_LeaderboardRecord
  /// Asynchronous. Unary.
  func writeLeaderboardRecord(_ request: Nakama_Api_WriteLeaderboardRecordRequest, completion: @escaping (Nakama_Api_LeaderboardRecord?, CallResult) -> Void) throws -> Nakama_Api_NakamaWriteLeaderboardRecordCall

  /// Synchronous. Unary.
  func writeStorageObjects(_ request: Nakama_Api_WriteStorageObjectsRequest) throws -> Nakama_Api_StorageObjectAcks
  /// Asynchronous. Unary.
  func writeStorageObjects(_ request: Nakama_Api_WriteStorageObjectsRequest, completion: @escaping (Nakama_Api_StorageObjectAcks?, CallResult) -> Void) throws -> Nakama_Api_NakamaWriteStorageObjectsCall

  /// Synchronous. Unary.
  func writeTournamentRecord(_ request: Nakama_Api_WriteTournamentRecordRequest) throws -> Nakama_Api_LeaderboardRecord
  /// Asynchronous. Unary.
  func writeTournamentRecord(_ request: Nakama_Api_WriteTournamentRecordRequest, completion: @escaping (Nakama_Api_LeaderboardRecord?, CallResult) -> Void) throws -> Nakama_Api_NakamaWriteTournamentRecordCall

}

internal final class Nakama_Api_NakamaServiceClient: ServiceClientBase, Nakama_Api_NakamaService {
  /// Synchronous. Unary.
  internal func addFriends(_ request: Nakama_Api_AddFriendsRequest) throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try Nakama_Api_NakamaAddFriendsCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func addFriends(_ request: Nakama_Api_AddFriendsRequest, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaAddFriendsCall {
    return try Nakama_Api_NakamaAddFriendsCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func addGroupUsers(_ request: Nakama_Api_AddGroupUsersRequest) throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try Nakama_Api_NakamaAddGroupUsersCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func addGroupUsers(_ request: Nakama_Api_AddGroupUsersRequest, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaAddGroupUsersCall {
    return try Nakama_Api_NakamaAddGroupUsersCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func authenticateCustom(_ request: Nakama_Api_AuthenticateCustomRequest) throws -> Nakama_Api_Session {
    return try Nakama_Api_NakamaAuthenticateCustomCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func authenticateCustom(_ request: Nakama_Api_AuthenticateCustomRequest, completion: @escaping (Nakama_Api_Session?, CallResult) -> Void) throws -> Nakama_Api_NakamaAuthenticateCustomCall {
    return try Nakama_Api_NakamaAuthenticateCustomCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func authenticateDevice(_ request: Nakama_Api_AuthenticateDeviceRequest) throws -> Nakama_Api_Session {
    return try Nakama_Api_NakamaAuthenticateDeviceCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func authenticateDevice(_ request: Nakama_Api_AuthenticateDeviceRequest, completion: @escaping (Nakama_Api_Session?, CallResult) -> Void) throws -> Nakama_Api_NakamaAuthenticateDeviceCall {
    return try Nakama_Api_NakamaAuthenticateDeviceCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func authenticateEmail(_ request: Nakama_Api_AuthenticateEmailRequest) throws -> Nakama_Api_Session {
    return try Nakama_Api_NakamaAuthenticateEmailCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func authenticateEmail(_ request: Nakama_Api_AuthenticateEmailRequest, completion: @escaping (Nakama_Api_Session?, CallResult) -> Void) throws -> Nakama_Api_NakamaAuthenticateEmailCall {
    return try Nakama_Api_NakamaAuthenticateEmailCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func authenticateFacebook(_ request: Nakama_Api_AuthenticateFacebookRequest) throws -> Nakama_Api_Session {
    return try Nakama_Api_NakamaAuthenticateFacebookCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func authenticateFacebook(_ request: Nakama_Api_AuthenticateFacebookRequest, completion: @escaping (Nakama_Api_Session?, CallResult) -> Void) throws -> Nakama_Api_NakamaAuthenticateFacebookCall {
    return try Nakama_Api_NakamaAuthenticateFacebookCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func authenticateGameCenter(_ request: Nakama_Api_AuthenticateGameCenterRequest) throws -> Nakama_Api_Session {
    return try Nakama_Api_NakamaAuthenticateGameCenterCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func authenticateGameCenter(_ request: Nakama_Api_AuthenticateGameCenterRequest, completion: @escaping (Nakama_Api_Session?, CallResult) -> Void) throws -> Nakama_Api_NakamaAuthenticateGameCenterCall {
    return try Nakama_Api_NakamaAuthenticateGameCenterCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func authenticateGoogle(_ request: Nakama_Api_AuthenticateGoogleRequest) throws -> Nakama_Api_Session {
    return try Nakama_Api_NakamaAuthenticateGoogleCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func authenticateGoogle(_ request: Nakama_Api_AuthenticateGoogleRequest, completion: @escaping (Nakama_Api_Session?, CallResult) -> Void) throws -> Nakama_Api_NakamaAuthenticateGoogleCall {
    return try Nakama_Api_NakamaAuthenticateGoogleCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func authenticateSteam(_ request: Nakama_Api_AuthenticateSteamRequest) throws -> Nakama_Api_Session {
    return try Nakama_Api_NakamaAuthenticateSteamCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func authenticateSteam(_ request: Nakama_Api_AuthenticateSteamRequest, completion: @escaping (Nakama_Api_Session?, CallResult) -> Void) throws -> Nakama_Api_NakamaAuthenticateSteamCall {
    return try Nakama_Api_NakamaAuthenticateSteamCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func blockFriends(_ request: Nakama_Api_BlockFriendsRequest) throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try Nakama_Api_NakamaBlockFriendsCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func blockFriends(_ request: Nakama_Api_BlockFriendsRequest, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaBlockFriendsCall {
    return try Nakama_Api_NakamaBlockFriendsCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func createGroup(_ request: Nakama_Api_CreateGroupRequest) throws -> Nakama_Api_Group {
    return try Nakama_Api_NakamaCreateGroupCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func createGroup(_ request: Nakama_Api_CreateGroupRequest, completion: @escaping (Nakama_Api_Group?, CallResult) -> Void) throws -> Nakama_Api_NakamaCreateGroupCall {
    return try Nakama_Api_NakamaCreateGroupCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func deleteFriends(_ request: Nakama_Api_DeleteFriendsRequest) throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try Nakama_Api_NakamaDeleteFriendsCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func deleteFriends(_ request: Nakama_Api_DeleteFriendsRequest, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaDeleteFriendsCall {
    return try Nakama_Api_NakamaDeleteFriendsCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func deleteGroup(_ request: Nakama_Api_DeleteGroupRequest) throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try Nakama_Api_NakamaDeleteGroupCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func deleteGroup(_ request: Nakama_Api_DeleteGroupRequest, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaDeleteGroupCall {
    return try Nakama_Api_NakamaDeleteGroupCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func deleteLeaderboardRecord(_ request: Nakama_Api_DeleteLeaderboardRecordRequest) throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try Nakama_Api_NakamaDeleteLeaderboardRecordCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func deleteLeaderboardRecord(_ request: Nakama_Api_DeleteLeaderboardRecordRequest, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaDeleteLeaderboardRecordCall {
    return try Nakama_Api_NakamaDeleteLeaderboardRecordCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func deleteNotifications(_ request: Nakama_Api_DeleteNotificationsRequest) throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try Nakama_Api_NakamaDeleteNotificationsCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func deleteNotifications(_ request: Nakama_Api_DeleteNotificationsRequest, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaDeleteNotificationsCall {
    return try Nakama_Api_NakamaDeleteNotificationsCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func deleteStorageObjects(_ request: Nakama_Api_DeleteStorageObjectsRequest) throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try Nakama_Api_NakamaDeleteStorageObjectsCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func deleteStorageObjects(_ request: Nakama_Api_DeleteStorageObjectsRequest, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaDeleteStorageObjectsCall {
    return try Nakama_Api_NakamaDeleteStorageObjectsCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func getAccount(_ request: SwiftProtobuf.Google_Protobuf_Empty) throws -> Nakama_Api_Account {
    return try Nakama_Api_NakamaGetAccountCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func getAccount(_ request: SwiftProtobuf.Google_Protobuf_Empty, completion: @escaping (Nakama_Api_Account?, CallResult) -> Void) throws -> Nakama_Api_NakamaGetAccountCall {
    return try Nakama_Api_NakamaGetAccountCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func getUsers(_ request: Nakama_Api_GetUsersRequest) throws -> Nakama_Api_Users {
    return try Nakama_Api_NakamaGetUsersCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func getUsers(_ request: Nakama_Api_GetUsersRequest, completion: @escaping (Nakama_Api_Users?, CallResult) -> Void) throws -> Nakama_Api_NakamaGetUsersCall {
    return try Nakama_Api_NakamaGetUsersCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func healthcheck(_ request: SwiftProtobuf.Google_Protobuf_Empty) throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try Nakama_Api_NakamaHealthcheckCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func healthcheck(_ request: SwiftProtobuf.Google_Protobuf_Empty, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaHealthcheckCall {
    return try Nakama_Api_NakamaHealthcheckCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func importFacebookFriends(_ request: Nakama_Api_ImportFacebookFriendsRequest) throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try Nakama_Api_NakamaImportFacebookFriendsCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func importFacebookFriends(_ request: Nakama_Api_ImportFacebookFriendsRequest, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaImportFacebookFriendsCall {
    return try Nakama_Api_NakamaImportFacebookFriendsCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func joinGroup(_ request: Nakama_Api_JoinGroupRequest) throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try Nakama_Api_NakamaJoinGroupCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func joinGroup(_ request: Nakama_Api_JoinGroupRequest, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaJoinGroupCall {
    return try Nakama_Api_NakamaJoinGroupCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func joinTournament(_ request: Nakama_Api_JoinTournamentRequest) throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try Nakama_Api_NakamaJoinTournamentCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func joinTournament(_ request: Nakama_Api_JoinTournamentRequest, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaJoinTournamentCall {
    return try Nakama_Api_NakamaJoinTournamentCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func kickGroupUsers(_ request: Nakama_Api_KickGroupUsersRequest) throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try Nakama_Api_NakamaKickGroupUsersCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func kickGroupUsers(_ request: Nakama_Api_KickGroupUsersRequest, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaKickGroupUsersCall {
    return try Nakama_Api_NakamaKickGroupUsersCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func leaveGroup(_ request: Nakama_Api_LeaveGroupRequest) throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try Nakama_Api_NakamaLeaveGroupCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func leaveGroup(_ request: Nakama_Api_LeaveGroupRequest, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaLeaveGroupCall {
    return try Nakama_Api_NakamaLeaveGroupCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func linkCustom(_ request: Nakama_Api_AccountCustom) throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try Nakama_Api_NakamaLinkCustomCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func linkCustom(_ request: Nakama_Api_AccountCustom, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaLinkCustomCall {
    return try Nakama_Api_NakamaLinkCustomCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func linkDevice(_ request: Nakama_Api_AccountDevice) throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try Nakama_Api_NakamaLinkDeviceCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func linkDevice(_ request: Nakama_Api_AccountDevice, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaLinkDeviceCall {
    return try Nakama_Api_NakamaLinkDeviceCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func linkEmail(_ request: Nakama_Api_AccountEmail) throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try Nakama_Api_NakamaLinkEmailCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func linkEmail(_ request: Nakama_Api_AccountEmail, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaLinkEmailCall {
    return try Nakama_Api_NakamaLinkEmailCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func linkFacebook(_ request: Nakama_Api_LinkFacebookRequest) throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try Nakama_Api_NakamaLinkFacebookCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func linkFacebook(_ request: Nakama_Api_LinkFacebookRequest, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaLinkFacebookCall {
    return try Nakama_Api_NakamaLinkFacebookCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func linkGameCenter(_ request: Nakama_Api_AccountGameCenter) throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try Nakama_Api_NakamaLinkGameCenterCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func linkGameCenter(_ request: Nakama_Api_AccountGameCenter, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaLinkGameCenterCall {
    return try Nakama_Api_NakamaLinkGameCenterCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func linkGoogle(_ request: Nakama_Api_AccountGoogle) throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try Nakama_Api_NakamaLinkGoogleCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func linkGoogle(_ request: Nakama_Api_AccountGoogle, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaLinkGoogleCall {
    return try Nakama_Api_NakamaLinkGoogleCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func linkSteam(_ request: Nakama_Api_AccountSteam) throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try Nakama_Api_NakamaLinkSteamCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func linkSteam(_ request: Nakama_Api_AccountSteam, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaLinkSteamCall {
    return try Nakama_Api_NakamaLinkSteamCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func listChannelMessages(_ request: Nakama_Api_ListChannelMessagesRequest) throws -> Nakama_Api_ChannelMessageList {
    return try Nakama_Api_NakamaListChannelMessagesCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func listChannelMessages(_ request: Nakama_Api_ListChannelMessagesRequest, completion: @escaping (Nakama_Api_ChannelMessageList?, CallResult) -> Void) throws -> Nakama_Api_NakamaListChannelMessagesCall {
    return try Nakama_Api_NakamaListChannelMessagesCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func listFriends(_ request: SwiftProtobuf.Google_Protobuf_Empty) throws -> Nakama_Api_Friends {
    return try Nakama_Api_NakamaListFriendsCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func listFriends(_ request: SwiftProtobuf.Google_Protobuf_Empty, completion: @escaping (Nakama_Api_Friends?, CallResult) -> Void) throws -> Nakama_Api_NakamaListFriendsCall {
    return try Nakama_Api_NakamaListFriendsCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func listGroups(_ request: Nakama_Api_ListGroupsRequest) throws -> Nakama_Api_GroupList {
    return try Nakama_Api_NakamaListGroupsCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func listGroups(_ request: Nakama_Api_ListGroupsRequest, completion: @escaping (Nakama_Api_GroupList?, CallResult) -> Void) throws -> Nakama_Api_NakamaListGroupsCall {
    return try Nakama_Api_NakamaListGroupsCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func listGroupUsers(_ request: Nakama_Api_ListGroupUsersRequest) throws -> Nakama_Api_GroupUserList {
    return try Nakama_Api_NakamaListGroupUsersCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func listGroupUsers(_ request: Nakama_Api_ListGroupUsersRequest, completion: @escaping (Nakama_Api_GroupUserList?, CallResult) -> Void) throws -> Nakama_Api_NakamaListGroupUsersCall {
    return try Nakama_Api_NakamaListGroupUsersCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func listLeaderboardRecords(_ request: Nakama_Api_ListLeaderboardRecordsRequest) throws -> Nakama_Api_LeaderboardRecordList {
    return try Nakama_Api_NakamaListLeaderboardRecordsCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func listLeaderboardRecords(_ request: Nakama_Api_ListLeaderboardRecordsRequest, completion: @escaping (Nakama_Api_LeaderboardRecordList?, CallResult) -> Void) throws -> Nakama_Api_NakamaListLeaderboardRecordsCall {
    return try Nakama_Api_NakamaListLeaderboardRecordsCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func listLeaderboardRecordsAroundOwner(_ request: Nakama_Api_ListLeaderboardRecordsAroundOwnerRequest) throws -> Nakama_Api_LeaderboardRecordList {
    return try Nakama_Api_NakamaListLeaderboardRecordsAroundOwnerCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func listLeaderboardRecordsAroundOwner(_ request: Nakama_Api_ListLeaderboardRecordsAroundOwnerRequest, completion: @escaping (Nakama_Api_LeaderboardRecordList?, CallResult) -> Void) throws -> Nakama_Api_NakamaListLeaderboardRecordsAroundOwnerCall {
    return try Nakama_Api_NakamaListLeaderboardRecordsAroundOwnerCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func listMatches(_ request: Nakama_Api_ListMatchesRequest) throws -> Nakama_Api_MatchList {
    return try Nakama_Api_NakamaListMatchesCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func listMatches(_ request: Nakama_Api_ListMatchesRequest, completion: @escaping (Nakama_Api_MatchList?, CallResult) -> Void) throws -> Nakama_Api_NakamaListMatchesCall {
    return try Nakama_Api_NakamaListMatchesCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func listNotifications(_ request: Nakama_Api_ListNotificationsRequest) throws -> Nakama_Api_NotificationList {
    return try Nakama_Api_NakamaListNotificationsCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func listNotifications(_ request: Nakama_Api_ListNotificationsRequest, completion: @escaping (Nakama_Api_NotificationList?, CallResult) -> Void) throws -> Nakama_Api_NakamaListNotificationsCall {
    return try Nakama_Api_NakamaListNotificationsCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func listStorageObjects(_ request: Nakama_Api_ListStorageObjectsRequest) throws -> Nakama_Api_StorageObjectList {
    return try Nakama_Api_NakamaListStorageObjectsCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func listStorageObjects(_ request: Nakama_Api_ListStorageObjectsRequest, completion: @escaping (Nakama_Api_StorageObjectList?, CallResult) -> Void) throws -> Nakama_Api_NakamaListStorageObjectsCall {
    return try Nakama_Api_NakamaListStorageObjectsCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func listTournaments(_ request: Nakama_Api_ListTournamentsRequest) throws -> Nakama_Api_TournamentList {
    return try Nakama_Api_NakamaListTournamentsCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func listTournaments(_ request: Nakama_Api_ListTournamentsRequest, completion: @escaping (Nakama_Api_TournamentList?, CallResult) -> Void) throws -> Nakama_Api_NakamaListTournamentsCall {
    return try Nakama_Api_NakamaListTournamentsCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func listTournamentRecords(_ request: Nakama_Api_ListTournamentRecordsRequest) throws -> Nakama_Api_TournamentRecordList {
    return try Nakama_Api_NakamaListTournamentRecordsCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func listTournamentRecords(_ request: Nakama_Api_ListTournamentRecordsRequest, completion: @escaping (Nakama_Api_TournamentRecordList?, CallResult) -> Void) throws -> Nakama_Api_NakamaListTournamentRecordsCall {
    return try Nakama_Api_NakamaListTournamentRecordsCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func listTournamentRecordsAroundOwner(_ request: Nakama_Api_ListTournamentRecordsAroundOwnerRequest) throws -> Nakama_Api_TournamentRecordList {
    return try Nakama_Api_NakamaListTournamentRecordsAroundOwnerCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func listTournamentRecordsAroundOwner(_ request: Nakama_Api_ListTournamentRecordsAroundOwnerRequest, completion: @escaping (Nakama_Api_TournamentRecordList?, CallResult) -> Void) throws -> Nakama_Api_NakamaListTournamentRecordsAroundOwnerCall {
    return try Nakama_Api_NakamaListTournamentRecordsAroundOwnerCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func listUserGroups(_ request: Nakama_Api_ListUserGroupsRequest) throws -> Nakama_Api_UserGroupList {
    return try Nakama_Api_NakamaListUserGroupsCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func listUserGroups(_ request: Nakama_Api_ListUserGroupsRequest, completion: @escaping (Nakama_Api_UserGroupList?, CallResult) -> Void) throws -> Nakama_Api_NakamaListUserGroupsCall {
    return try Nakama_Api_NakamaListUserGroupsCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func promoteGroupUsers(_ request: Nakama_Api_PromoteGroupUsersRequest) throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try Nakama_Api_NakamaPromoteGroupUsersCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func promoteGroupUsers(_ request: Nakama_Api_PromoteGroupUsersRequest, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaPromoteGroupUsersCall {
    return try Nakama_Api_NakamaPromoteGroupUsersCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func readStorageObjects(_ request: Nakama_Api_ReadStorageObjectsRequest) throws -> Nakama_Api_StorageObjects {
    return try Nakama_Api_NakamaReadStorageObjectsCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func readStorageObjects(_ request: Nakama_Api_ReadStorageObjectsRequest, completion: @escaping (Nakama_Api_StorageObjects?, CallResult) -> Void) throws -> Nakama_Api_NakamaReadStorageObjectsCall {
    return try Nakama_Api_NakamaReadStorageObjectsCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func rpcFunc(_ request: Nakama_Api_Rpc) throws -> Nakama_Api_Rpc {
    return try Nakama_Api_NakamaRpcFuncCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func rpcFunc(_ request: Nakama_Api_Rpc, completion: @escaping (Nakama_Api_Rpc?, CallResult) -> Void) throws -> Nakama_Api_NakamaRpcFuncCall {
    return try Nakama_Api_NakamaRpcFuncCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func unlinkCustom(_ request: Nakama_Api_AccountCustom) throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try Nakama_Api_NakamaUnlinkCustomCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func unlinkCustom(_ request: Nakama_Api_AccountCustom, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaUnlinkCustomCall {
    return try Nakama_Api_NakamaUnlinkCustomCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func unlinkDevice(_ request: Nakama_Api_AccountDevice) throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try Nakama_Api_NakamaUnlinkDeviceCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func unlinkDevice(_ request: Nakama_Api_AccountDevice, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaUnlinkDeviceCall {
    return try Nakama_Api_NakamaUnlinkDeviceCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func unlinkEmail(_ request: Nakama_Api_AccountEmail) throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try Nakama_Api_NakamaUnlinkEmailCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func unlinkEmail(_ request: Nakama_Api_AccountEmail, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaUnlinkEmailCall {
    return try Nakama_Api_NakamaUnlinkEmailCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func unlinkFacebook(_ request: Nakama_Api_AccountFacebook) throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try Nakama_Api_NakamaUnlinkFacebookCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func unlinkFacebook(_ request: Nakama_Api_AccountFacebook, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaUnlinkFacebookCall {
    return try Nakama_Api_NakamaUnlinkFacebookCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func unlinkGameCenter(_ request: Nakama_Api_AccountGameCenter) throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try Nakama_Api_NakamaUnlinkGameCenterCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func unlinkGameCenter(_ request: Nakama_Api_AccountGameCenter, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaUnlinkGameCenterCall {
    return try Nakama_Api_NakamaUnlinkGameCenterCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func unlinkGoogle(_ request: Nakama_Api_AccountGoogle) throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try Nakama_Api_NakamaUnlinkGoogleCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func unlinkGoogle(_ request: Nakama_Api_AccountGoogle, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaUnlinkGoogleCall {
    return try Nakama_Api_NakamaUnlinkGoogleCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func unlinkSteam(_ request: Nakama_Api_AccountSteam) throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try Nakama_Api_NakamaUnlinkSteamCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func unlinkSteam(_ request: Nakama_Api_AccountSteam, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaUnlinkSteamCall {
    return try Nakama_Api_NakamaUnlinkSteamCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func updateAccount(_ request: Nakama_Api_UpdateAccountRequest) throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try Nakama_Api_NakamaUpdateAccountCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func updateAccount(_ request: Nakama_Api_UpdateAccountRequest, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaUpdateAccountCall {
    return try Nakama_Api_NakamaUpdateAccountCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func updateGroup(_ request: Nakama_Api_UpdateGroupRequest) throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try Nakama_Api_NakamaUpdateGroupCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func updateGroup(_ request: Nakama_Api_UpdateGroupRequest, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Nakama_Api_NakamaUpdateGroupCall {
    return try Nakama_Api_NakamaUpdateGroupCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func writeLeaderboardRecord(_ request: Nakama_Api_WriteLeaderboardRecordRequest) throws -> Nakama_Api_LeaderboardRecord {
    return try Nakama_Api_NakamaWriteLeaderboardRecordCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func writeLeaderboardRecord(_ request: Nakama_Api_WriteLeaderboardRecordRequest, completion: @escaping (Nakama_Api_LeaderboardRecord?, CallResult) -> Void) throws -> Nakama_Api_NakamaWriteLeaderboardRecordCall {
    return try Nakama_Api_NakamaWriteLeaderboardRecordCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func writeStorageObjects(_ request: Nakama_Api_WriteStorageObjectsRequest) throws -> Nakama_Api_StorageObjectAcks {
    return try Nakama_Api_NakamaWriteStorageObjectsCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func writeStorageObjects(_ request: Nakama_Api_WriteStorageObjectsRequest, completion: @escaping (Nakama_Api_StorageObjectAcks?, CallResult) -> Void) throws -> Nakama_Api_NakamaWriteStorageObjectsCall {
    return try Nakama_Api_NakamaWriteStorageObjectsCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func writeTournamentRecord(_ request: Nakama_Api_WriteTournamentRecordRequest) throws -> Nakama_Api_LeaderboardRecord {
    return try Nakama_Api_NakamaWriteTournamentRecordCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func writeTournamentRecord(_ request: Nakama_Api_WriteTournamentRecordRequest, completion: @escaping (Nakama_Api_LeaderboardRecord?, CallResult) -> Void) throws -> Nakama_Api_NakamaWriteTournamentRecordCall {
    return try Nakama_Api_NakamaWriteTournamentRecordCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Nakama_Api_NakamaProvider: ServiceProvider {
  func addFriends(request: Nakama_Api_AddFriendsRequest, session: Nakama_Api_NakamaAddFriendsSession) throws -> SwiftProtobuf.Google_Protobuf_Empty
  func addGroupUsers(request: Nakama_Api_AddGroupUsersRequest, session: Nakama_Api_NakamaAddGroupUsersSession) throws -> SwiftProtobuf.Google_Protobuf_Empty
  func authenticateCustom(request: Nakama_Api_AuthenticateCustomRequest, session: Nakama_Api_NakamaAuthenticateCustomSession) throws -> Nakama_Api_Session
  func authenticateDevice(request: Nakama_Api_AuthenticateDeviceRequest, session: Nakama_Api_NakamaAuthenticateDeviceSession) throws -> Nakama_Api_Session
  func authenticateEmail(request: Nakama_Api_AuthenticateEmailRequest, session: Nakama_Api_NakamaAuthenticateEmailSession) throws -> Nakama_Api_Session
  func authenticateFacebook(request: Nakama_Api_AuthenticateFacebookRequest, session: Nakama_Api_NakamaAuthenticateFacebookSession) throws -> Nakama_Api_Session
  func authenticateGameCenter(request: Nakama_Api_AuthenticateGameCenterRequest, session: Nakama_Api_NakamaAuthenticateGameCenterSession) throws -> Nakama_Api_Session
  func authenticateGoogle(request: Nakama_Api_AuthenticateGoogleRequest, session: Nakama_Api_NakamaAuthenticateGoogleSession) throws -> Nakama_Api_Session
  func authenticateSteam(request: Nakama_Api_AuthenticateSteamRequest, session: Nakama_Api_NakamaAuthenticateSteamSession) throws -> Nakama_Api_Session
  func blockFriends(request: Nakama_Api_BlockFriendsRequest, session: Nakama_Api_NakamaBlockFriendsSession) throws -> SwiftProtobuf.Google_Protobuf_Empty
  func createGroup(request: Nakama_Api_CreateGroupRequest, session: Nakama_Api_NakamaCreateGroupSession) throws -> Nakama_Api_Group
  func deleteFriends(request: Nakama_Api_DeleteFriendsRequest, session: Nakama_Api_NakamaDeleteFriendsSession) throws -> SwiftProtobuf.Google_Protobuf_Empty
  func deleteGroup(request: Nakama_Api_DeleteGroupRequest, session: Nakama_Api_NakamaDeleteGroupSession) throws -> SwiftProtobuf.Google_Protobuf_Empty
  func deleteLeaderboardRecord(request: Nakama_Api_DeleteLeaderboardRecordRequest, session: Nakama_Api_NakamaDeleteLeaderboardRecordSession) throws -> SwiftProtobuf.Google_Protobuf_Empty
  func deleteNotifications(request: Nakama_Api_DeleteNotificationsRequest, session: Nakama_Api_NakamaDeleteNotificationsSession) throws -> SwiftProtobuf.Google_Protobuf_Empty
  func deleteStorageObjects(request: Nakama_Api_DeleteStorageObjectsRequest, session: Nakama_Api_NakamaDeleteStorageObjectsSession) throws -> SwiftProtobuf.Google_Protobuf_Empty
  func getAccount(request: SwiftProtobuf.Google_Protobuf_Empty, session: Nakama_Api_NakamaGetAccountSession) throws -> Nakama_Api_Account
  func getUsers(request: Nakama_Api_GetUsersRequest, session: Nakama_Api_NakamaGetUsersSession) throws -> Nakama_Api_Users
  func healthcheck(request: SwiftProtobuf.Google_Protobuf_Empty, session: Nakama_Api_NakamaHealthcheckSession) throws -> SwiftProtobuf.Google_Protobuf_Empty
  func importFacebookFriends(request: Nakama_Api_ImportFacebookFriendsRequest, session: Nakama_Api_NakamaImportFacebookFriendsSession) throws -> SwiftProtobuf.Google_Protobuf_Empty
  func joinGroup(request: Nakama_Api_JoinGroupRequest, session: Nakama_Api_NakamaJoinGroupSession) throws -> SwiftProtobuf.Google_Protobuf_Empty
  func joinTournament(request: Nakama_Api_JoinTournamentRequest, session: Nakama_Api_NakamaJoinTournamentSession) throws -> SwiftProtobuf.Google_Protobuf_Empty
  func kickGroupUsers(request: Nakama_Api_KickGroupUsersRequest, session: Nakama_Api_NakamaKickGroupUsersSession) throws -> SwiftProtobuf.Google_Protobuf_Empty
  func leaveGroup(request: Nakama_Api_LeaveGroupRequest, session: Nakama_Api_NakamaLeaveGroupSession) throws -> SwiftProtobuf.Google_Protobuf_Empty
  func linkCustom(request: Nakama_Api_AccountCustom, session: Nakama_Api_NakamaLinkCustomSession) throws -> SwiftProtobuf.Google_Protobuf_Empty
  func linkDevice(request: Nakama_Api_AccountDevice, session: Nakama_Api_NakamaLinkDeviceSession) throws -> SwiftProtobuf.Google_Protobuf_Empty
  func linkEmail(request: Nakama_Api_AccountEmail, session: Nakama_Api_NakamaLinkEmailSession) throws -> SwiftProtobuf.Google_Protobuf_Empty
  func linkFacebook(request: Nakama_Api_LinkFacebookRequest, session: Nakama_Api_NakamaLinkFacebookSession) throws -> SwiftProtobuf.Google_Protobuf_Empty
  func linkGameCenter(request: Nakama_Api_AccountGameCenter, session: Nakama_Api_NakamaLinkGameCenterSession) throws -> SwiftProtobuf.Google_Protobuf_Empty
  func linkGoogle(request: Nakama_Api_AccountGoogle, session: Nakama_Api_NakamaLinkGoogleSession) throws -> SwiftProtobuf.Google_Protobuf_Empty
  func linkSteam(request: Nakama_Api_AccountSteam, session: Nakama_Api_NakamaLinkSteamSession) throws -> SwiftProtobuf.Google_Protobuf_Empty
  func listChannelMessages(request: Nakama_Api_ListChannelMessagesRequest, session: Nakama_Api_NakamaListChannelMessagesSession) throws -> Nakama_Api_ChannelMessageList
  func listFriends(request: SwiftProtobuf.Google_Protobuf_Empty, session: Nakama_Api_NakamaListFriendsSession) throws -> Nakama_Api_Friends
  func listGroups(request: Nakama_Api_ListGroupsRequest, session: Nakama_Api_NakamaListGroupsSession) throws -> Nakama_Api_GroupList
  func listGroupUsers(request: Nakama_Api_ListGroupUsersRequest, session: Nakama_Api_NakamaListGroupUsersSession) throws -> Nakama_Api_GroupUserList
  func listLeaderboardRecords(request: Nakama_Api_ListLeaderboardRecordsRequest, session: Nakama_Api_NakamaListLeaderboardRecordsSession) throws -> Nakama_Api_LeaderboardRecordList
  func listLeaderboardRecordsAroundOwner(request: Nakama_Api_ListLeaderboardRecordsAroundOwnerRequest, session: Nakama_Api_NakamaListLeaderboardRecordsAroundOwnerSession) throws -> Nakama_Api_LeaderboardRecordList
  func listMatches(request: Nakama_Api_ListMatchesRequest, session: Nakama_Api_NakamaListMatchesSession) throws -> Nakama_Api_MatchList
  func listNotifications(request: Nakama_Api_ListNotificationsRequest, session: Nakama_Api_NakamaListNotificationsSession) throws -> Nakama_Api_NotificationList
  func listStorageObjects(request: Nakama_Api_ListStorageObjectsRequest, session: Nakama_Api_NakamaListStorageObjectsSession) throws -> Nakama_Api_StorageObjectList
  func listTournaments(request: Nakama_Api_ListTournamentsRequest, session: Nakama_Api_NakamaListTournamentsSession) throws -> Nakama_Api_TournamentList
  func listTournamentRecords(request: Nakama_Api_ListTournamentRecordsRequest, session: Nakama_Api_NakamaListTournamentRecordsSession) throws -> Nakama_Api_TournamentRecordList
  func listTournamentRecordsAroundOwner(request: Nakama_Api_ListTournamentRecordsAroundOwnerRequest, session: Nakama_Api_NakamaListTournamentRecordsAroundOwnerSession) throws -> Nakama_Api_TournamentRecordList
  func listUserGroups(request: Nakama_Api_ListUserGroupsRequest, session: Nakama_Api_NakamaListUserGroupsSession) throws -> Nakama_Api_UserGroupList
  func promoteGroupUsers(request: Nakama_Api_PromoteGroupUsersRequest, session: Nakama_Api_NakamaPromoteGroupUsersSession) throws -> SwiftProtobuf.Google_Protobuf_Empty
  func readStorageObjects(request: Nakama_Api_ReadStorageObjectsRequest, session: Nakama_Api_NakamaReadStorageObjectsSession) throws -> Nakama_Api_StorageObjects
  func rpcFunc(request: Nakama_Api_Rpc, session: Nakama_Api_NakamaRpcFuncSession) throws -> Nakama_Api_Rpc
  func unlinkCustom(request: Nakama_Api_AccountCustom, session: Nakama_Api_NakamaUnlinkCustomSession) throws -> SwiftProtobuf.Google_Protobuf_Empty
  func unlinkDevice(request: Nakama_Api_AccountDevice, session: Nakama_Api_NakamaUnlinkDeviceSession) throws -> SwiftProtobuf.Google_Protobuf_Empty
  func unlinkEmail(request: Nakama_Api_AccountEmail, session: Nakama_Api_NakamaUnlinkEmailSession) throws -> SwiftProtobuf.Google_Protobuf_Empty
  func unlinkFacebook(request: Nakama_Api_AccountFacebook, session: Nakama_Api_NakamaUnlinkFacebookSession) throws -> SwiftProtobuf.Google_Protobuf_Empty
  func unlinkGameCenter(request: Nakama_Api_AccountGameCenter, session: Nakama_Api_NakamaUnlinkGameCenterSession) throws -> SwiftProtobuf.Google_Protobuf_Empty
  func unlinkGoogle(request: Nakama_Api_AccountGoogle, session: Nakama_Api_NakamaUnlinkGoogleSession) throws -> SwiftProtobuf.Google_Protobuf_Empty
  func unlinkSteam(request: Nakama_Api_AccountSteam, session: Nakama_Api_NakamaUnlinkSteamSession) throws -> SwiftProtobuf.Google_Protobuf_Empty
  func updateAccount(request: Nakama_Api_UpdateAccountRequest, session: Nakama_Api_NakamaUpdateAccountSession) throws -> SwiftProtobuf.Google_Protobuf_Empty
  func updateGroup(request: Nakama_Api_UpdateGroupRequest, session: Nakama_Api_NakamaUpdateGroupSession) throws -> SwiftProtobuf.Google_Protobuf_Empty
  func writeLeaderboardRecord(request: Nakama_Api_WriteLeaderboardRecordRequest, session: Nakama_Api_NakamaWriteLeaderboardRecordSession) throws -> Nakama_Api_LeaderboardRecord
  func writeStorageObjects(request: Nakama_Api_WriteStorageObjectsRequest, session: Nakama_Api_NakamaWriteStorageObjectsSession) throws -> Nakama_Api_StorageObjectAcks
  func writeTournamentRecord(request: Nakama_Api_WriteTournamentRecordRequest, session: Nakama_Api_NakamaWriteTournamentRecordSession) throws -> Nakama_Api_LeaderboardRecord
}

extension Nakama_Api_NakamaProvider {
  internal var serviceName: String { return "nakama.api.Nakama" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/nakama.api.Nakama/AddFriends":
      return try Nakama_Api_NakamaAddFriendsSessionBase(
        handler: handler,
        providerBlock: { try self.addFriends(request: $0, session: $1 as! Nakama_Api_NakamaAddFriendsSessionBase) })
          .run()
    case "/nakama.api.Nakama/AddGroupUsers":
      return try Nakama_Api_NakamaAddGroupUsersSessionBase(
        handler: handler,
        providerBlock: { try self.addGroupUsers(request: $0, session: $1 as! Nakama_Api_NakamaAddGroupUsersSessionBase) })
          .run()
    case "/nakama.api.Nakama/AuthenticateCustom":
      return try Nakama_Api_NakamaAuthenticateCustomSessionBase(
        handler: handler,
        providerBlock: { try self.authenticateCustom(request: $0, session: $1 as! Nakama_Api_NakamaAuthenticateCustomSessionBase) })
          .run()
    case "/nakama.api.Nakama/AuthenticateDevice":
      return try Nakama_Api_NakamaAuthenticateDeviceSessionBase(
        handler: handler,
        providerBlock: { try self.authenticateDevice(request: $0, session: $1 as! Nakama_Api_NakamaAuthenticateDeviceSessionBase) })
          .run()
    case "/nakama.api.Nakama/AuthenticateEmail":
      return try Nakama_Api_NakamaAuthenticateEmailSessionBase(
        handler: handler,
        providerBlock: { try self.authenticateEmail(request: $0, session: $1 as! Nakama_Api_NakamaAuthenticateEmailSessionBase) })
          .run()
    case "/nakama.api.Nakama/AuthenticateFacebook":
      return try Nakama_Api_NakamaAuthenticateFacebookSessionBase(
        handler: handler,
        providerBlock: { try self.authenticateFacebook(request: $0, session: $1 as! Nakama_Api_NakamaAuthenticateFacebookSessionBase) })
          .run()
    case "/nakama.api.Nakama/AuthenticateGameCenter":
      return try Nakama_Api_NakamaAuthenticateGameCenterSessionBase(
        handler: handler,
        providerBlock: { try self.authenticateGameCenter(request: $0, session: $1 as! Nakama_Api_NakamaAuthenticateGameCenterSessionBase) })
          .run()
    case "/nakama.api.Nakama/AuthenticateGoogle":
      return try Nakama_Api_NakamaAuthenticateGoogleSessionBase(
        handler: handler,
        providerBlock: { try self.authenticateGoogle(request: $0, session: $1 as! Nakama_Api_NakamaAuthenticateGoogleSessionBase) })
          .run()
    case "/nakama.api.Nakama/AuthenticateSteam":
      return try Nakama_Api_NakamaAuthenticateSteamSessionBase(
        handler: handler,
        providerBlock: { try self.authenticateSteam(request: $0, session: $1 as! Nakama_Api_NakamaAuthenticateSteamSessionBase) })
          .run()
    case "/nakama.api.Nakama/BlockFriends":
      return try Nakama_Api_NakamaBlockFriendsSessionBase(
        handler: handler,
        providerBlock: { try self.blockFriends(request: $0, session: $1 as! Nakama_Api_NakamaBlockFriendsSessionBase) })
          .run()
    case "/nakama.api.Nakama/CreateGroup":
      return try Nakama_Api_NakamaCreateGroupSessionBase(
        handler: handler,
        providerBlock: { try self.createGroup(request: $0, session: $1 as! Nakama_Api_NakamaCreateGroupSessionBase) })
          .run()
    case "/nakama.api.Nakama/DeleteFriends":
      return try Nakama_Api_NakamaDeleteFriendsSessionBase(
        handler: handler,
        providerBlock: { try self.deleteFriends(request: $0, session: $1 as! Nakama_Api_NakamaDeleteFriendsSessionBase) })
          .run()
    case "/nakama.api.Nakama/DeleteGroup":
      return try Nakama_Api_NakamaDeleteGroupSessionBase(
        handler: handler,
        providerBlock: { try self.deleteGroup(request: $0, session: $1 as! Nakama_Api_NakamaDeleteGroupSessionBase) })
          .run()
    case "/nakama.api.Nakama/DeleteLeaderboardRecord":
      return try Nakama_Api_NakamaDeleteLeaderboardRecordSessionBase(
        handler: handler,
        providerBlock: { try self.deleteLeaderboardRecord(request: $0, session: $1 as! Nakama_Api_NakamaDeleteLeaderboardRecordSessionBase) })
          .run()
    case "/nakama.api.Nakama/DeleteNotifications":
      return try Nakama_Api_NakamaDeleteNotificationsSessionBase(
        handler: handler,
        providerBlock: { try self.deleteNotifications(request: $0, session: $1 as! Nakama_Api_NakamaDeleteNotificationsSessionBase) })
          .run()
    case "/nakama.api.Nakama/DeleteStorageObjects":
      return try Nakama_Api_NakamaDeleteStorageObjectsSessionBase(
        handler: handler,
        providerBlock: { try self.deleteStorageObjects(request: $0, session: $1 as! Nakama_Api_NakamaDeleteStorageObjectsSessionBase) })
          .run()
    case "/nakama.api.Nakama/GetAccount":
      return try Nakama_Api_NakamaGetAccountSessionBase(
        handler: handler,
        providerBlock: { try self.getAccount(request: $0, session: $1 as! Nakama_Api_NakamaGetAccountSessionBase) })
          .run()
    case "/nakama.api.Nakama/GetUsers":
      return try Nakama_Api_NakamaGetUsersSessionBase(
        handler: handler,
        providerBlock: { try self.getUsers(request: $0, session: $1 as! Nakama_Api_NakamaGetUsersSessionBase) })
          .run()
    case "/nakama.api.Nakama/Healthcheck":
      return try Nakama_Api_NakamaHealthcheckSessionBase(
        handler: handler,
        providerBlock: { try self.healthcheck(request: $0, session: $1 as! Nakama_Api_NakamaHealthcheckSessionBase) })
          .run()
    case "/nakama.api.Nakama/ImportFacebookFriends":
      return try Nakama_Api_NakamaImportFacebookFriendsSessionBase(
        handler: handler,
        providerBlock: { try self.importFacebookFriends(request: $0, session: $1 as! Nakama_Api_NakamaImportFacebookFriendsSessionBase) })
          .run()
    case "/nakama.api.Nakama/JoinGroup":
      return try Nakama_Api_NakamaJoinGroupSessionBase(
        handler: handler,
        providerBlock: { try self.joinGroup(request: $0, session: $1 as! Nakama_Api_NakamaJoinGroupSessionBase) })
          .run()
    case "/nakama.api.Nakama/JoinTournament":
      return try Nakama_Api_NakamaJoinTournamentSessionBase(
        handler: handler,
        providerBlock: { try self.joinTournament(request: $0, session: $1 as! Nakama_Api_NakamaJoinTournamentSessionBase) })
          .run()
    case "/nakama.api.Nakama/KickGroupUsers":
      return try Nakama_Api_NakamaKickGroupUsersSessionBase(
        handler: handler,
        providerBlock: { try self.kickGroupUsers(request: $0, session: $1 as! Nakama_Api_NakamaKickGroupUsersSessionBase) })
          .run()
    case "/nakama.api.Nakama/LeaveGroup":
      return try Nakama_Api_NakamaLeaveGroupSessionBase(
        handler: handler,
        providerBlock: { try self.leaveGroup(request: $0, session: $1 as! Nakama_Api_NakamaLeaveGroupSessionBase) })
          .run()
    case "/nakama.api.Nakama/LinkCustom":
      return try Nakama_Api_NakamaLinkCustomSessionBase(
        handler: handler,
        providerBlock: { try self.linkCustom(request: $0, session: $1 as! Nakama_Api_NakamaLinkCustomSessionBase) })
          .run()
    case "/nakama.api.Nakama/LinkDevice":
      return try Nakama_Api_NakamaLinkDeviceSessionBase(
        handler: handler,
        providerBlock: { try self.linkDevice(request: $0, session: $1 as! Nakama_Api_NakamaLinkDeviceSessionBase) })
          .run()
    case "/nakama.api.Nakama/LinkEmail":
      return try Nakama_Api_NakamaLinkEmailSessionBase(
        handler: handler,
        providerBlock: { try self.linkEmail(request: $0, session: $1 as! Nakama_Api_NakamaLinkEmailSessionBase) })
          .run()
    case "/nakama.api.Nakama/LinkFacebook":
      return try Nakama_Api_NakamaLinkFacebookSessionBase(
        handler: handler,
        providerBlock: { try self.linkFacebook(request: $0, session: $1 as! Nakama_Api_NakamaLinkFacebookSessionBase) })
          .run()
    case "/nakama.api.Nakama/LinkGameCenter":
      return try Nakama_Api_NakamaLinkGameCenterSessionBase(
        handler: handler,
        providerBlock: { try self.linkGameCenter(request: $0, session: $1 as! Nakama_Api_NakamaLinkGameCenterSessionBase) })
          .run()
    case "/nakama.api.Nakama/LinkGoogle":
      return try Nakama_Api_NakamaLinkGoogleSessionBase(
        handler: handler,
        providerBlock: { try self.linkGoogle(request: $0, session: $1 as! Nakama_Api_NakamaLinkGoogleSessionBase) })
          .run()
    case "/nakama.api.Nakama/LinkSteam":
      return try Nakama_Api_NakamaLinkSteamSessionBase(
        handler: handler,
        providerBlock: { try self.linkSteam(request: $0, session: $1 as! Nakama_Api_NakamaLinkSteamSessionBase) })
          .run()
    case "/nakama.api.Nakama/ListChannelMessages":
      return try Nakama_Api_NakamaListChannelMessagesSessionBase(
        handler: handler,
        providerBlock: { try self.listChannelMessages(request: $0, session: $1 as! Nakama_Api_NakamaListChannelMessagesSessionBase) })
          .run()
    case "/nakama.api.Nakama/ListFriends":
      return try Nakama_Api_NakamaListFriendsSessionBase(
        handler: handler,
        providerBlock: { try self.listFriends(request: $0, session: $1 as! Nakama_Api_NakamaListFriendsSessionBase) })
          .run()
    case "/nakama.api.Nakama/ListGroups":
      return try Nakama_Api_NakamaListGroupsSessionBase(
        handler: handler,
        providerBlock: { try self.listGroups(request: $0, session: $1 as! Nakama_Api_NakamaListGroupsSessionBase) })
          .run()
    case "/nakama.api.Nakama/ListGroupUsers":
      return try Nakama_Api_NakamaListGroupUsersSessionBase(
        handler: handler,
        providerBlock: { try self.listGroupUsers(request: $0, session: $1 as! Nakama_Api_NakamaListGroupUsersSessionBase) })
          .run()
    case "/nakama.api.Nakama/ListLeaderboardRecords":
      return try Nakama_Api_NakamaListLeaderboardRecordsSessionBase(
        handler: handler,
        providerBlock: { try self.listLeaderboardRecords(request: $0, session: $1 as! Nakama_Api_NakamaListLeaderboardRecordsSessionBase) })
          .run()
    case "/nakama.api.Nakama/ListLeaderboardRecordsAroundOwner":
      return try Nakama_Api_NakamaListLeaderboardRecordsAroundOwnerSessionBase(
        handler: handler,
        providerBlock: { try self.listLeaderboardRecordsAroundOwner(request: $0, session: $1 as! Nakama_Api_NakamaListLeaderboardRecordsAroundOwnerSessionBase) })
          .run()
    case "/nakama.api.Nakama/ListMatches":
      return try Nakama_Api_NakamaListMatchesSessionBase(
        handler: handler,
        providerBlock: { try self.listMatches(request: $0, session: $1 as! Nakama_Api_NakamaListMatchesSessionBase) })
          .run()
    case "/nakama.api.Nakama/ListNotifications":
      return try Nakama_Api_NakamaListNotificationsSessionBase(
        handler: handler,
        providerBlock: { try self.listNotifications(request: $0, session: $1 as! Nakama_Api_NakamaListNotificationsSessionBase) })
          .run()
    case "/nakama.api.Nakama/ListStorageObjects":
      return try Nakama_Api_NakamaListStorageObjectsSessionBase(
        handler: handler,
        providerBlock: { try self.listStorageObjects(request: $0, session: $1 as! Nakama_Api_NakamaListStorageObjectsSessionBase) })
          .run()
    case "/nakama.api.Nakama/ListTournaments":
      return try Nakama_Api_NakamaListTournamentsSessionBase(
        handler: handler,
        providerBlock: { try self.listTournaments(request: $0, session: $1 as! Nakama_Api_NakamaListTournamentsSessionBase) })
          .run()
    case "/nakama.api.Nakama/ListTournamentRecords":
      return try Nakama_Api_NakamaListTournamentRecordsSessionBase(
        handler: handler,
        providerBlock: { try self.listTournamentRecords(request: $0, session: $1 as! Nakama_Api_NakamaListTournamentRecordsSessionBase) })
          .run()
    case "/nakama.api.Nakama/ListTournamentRecordsAroundOwner":
      return try Nakama_Api_NakamaListTournamentRecordsAroundOwnerSessionBase(
        handler: handler,
        providerBlock: { try self.listTournamentRecordsAroundOwner(request: $0, session: $1 as! Nakama_Api_NakamaListTournamentRecordsAroundOwnerSessionBase) })
          .run()
    case "/nakama.api.Nakama/ListUserGroups":
      return try Nakama_Api_NakamaListUserGroupsSessionBase(
        handler: handler,
        providerBlock: { try self.listUserGroups(request: $0, session: $1 as! Nakama_Api_NakamaListUserGroupsSessionBase) })
          .run()
    case "/nakama.api.Nakama/PromoteGroupUsers":
      return try Nakama_Api_NakamaPromoteGroupUsersSessionBase(
        handler: handler,
        providerBlock: { try self.promoteGroupUsers(request: $0, session: $1 as! Nakama_Api_NakamaPromoteGroupUsersSessionBase) })
          .run()
    case "/nakama.api.Nakama/ReadStorageObjects":
      return try Nakama_Api_NakamaReadStorageObjectsSessionBase(
        handler: handler,
        providerBlock: { try self.readStorageObjects(request: $0, session: $1 as! Nakama_Api_NakamaReadStorageObjectsSessionBase) })
          .run()
    case "/nakama.api.Nakama/RpcFunc":
      return try Nakama_Api_NakamaRpcFuncSessionBase(
        handler: handler,
        providerBlock: { try self.rpcFunc(request: $0, session: $1 as! Nakama_Api_NakamaRpcFuncSessionBase) })
          .run()
    case "/nakama.api.Nakama/UnlinkCustom":
      return try Nakama_Api_NakamaUnlinkCustomSessionBase(
        handler: handler,
        providerBlock: { try self.unlinkCustom(request: $0, session: $1 as! Nakama_Api_NakamaUnlinkCustomSessionBase) })
          .run()
    case "/nakama.api.Nakama/UnlinkDevice":
      return try Nakama_Api_NakamaUnlinkDeviceSessionBase(
        handler: handler,
        providerBlock: { try self.unlinkDevice(request: $0, session: $1 as! Nakama_Api_NakamaUnlinkDeviceSessionBase) })
          .run()
    case "/nakama.api.Nakama/UnlinkEmail":
      return try Nakama_Api_NakamaUnlinkEmailSessionBase(
        handler: handler,
        providerBlock: { try self.unlinkEmail(request: $0, session: $1 as! Nakama_Api_NakamaUnlinkEmailSessionBase) })
          .run()
    case "/nakama.api.Nakama/UnlinkFacebook":
      return try Nakama_Api_NakamaUnlinkFacebookSessionBase(
        handler: handler,
        providerBlock: { try self.unlinkFacebook(request: $0, session: $1 as! Nakama_Api_NakamaUnlinkFacebookSessionBase) })
          .run()
    case "/nakama.api.Nakama/UnlinkGameCenter":
      return try Nakama_Api_NakamaUnlinkGameCenterSessionBase(
        handler: handler,
        providerBlock: { try self.unlinkGameCenter(request: $0, session: $1 as! Nakama_Api_NakamaUnlinkGameCenterSessionBase) })
          .run()
    case "/nakama.api.Nakama/UnlinkGoogle":
      return try Nakama_Api_NakamaUnlinkGoogleSessionBase(
        handler: handler,
        providerBlock: { try self.unlinkGoogle(request: $0, session: $1 as! Nakama_Api_NakamaUnlinkGoogleSessionBase) })
          .run()
    case "/nakama.api.Nakama/UnlinkSteam":
      return try Nakama_Api_NakamaUnlinkSteamSessionBase(
        handler: handler,
        providerBlock: { try self.unlinkSteam(request: $0, session: $1 as! Nakama_Api_NakamaUnlinkSteamSessionBase) })
          .run()
    case "/nakama.api.Nakama/UpdateAccount":
      return try Nakama_Api_NakamaUpdateAccountSessionBase(
        handler: handler,
        providerBlock: { try self.updateAccount(request: $0, session: $1 as! Nakama_Api_NakamaUpdateAccountSessionBase) })
          .run()
    case "/nakama.api.Nakama/UpdateGroup":
      return try Nakama_Api_NakamaUpdateGroupSessionBase(
        handler: handler,
        providerBlock: { try self.updateGroup(request: $0, session: $1 as! Nakama_Api_NakamaUpdateGroupSessionBase) })
          .run()
    case "/nakama.api.Nakama/WriteLeaderboardRecord":
      return try Nakama_Api_NakamaWriteLeaderboardRecordSessionBase(
        handler: handler,
        providerBlock: { try self.writeLeaderboardRecord(request: $0, session: $1 as! Nakama_Api_NakamaWriteLeaderboardRecordSessionBase) })
          .run()
    case "/nakama.api.Nakama/WriteStorageObjects":
      return try Nakama_Api_NakamaWriteStorageObjectsSessionBase(
        handler: handler,
        providerBlock: { try self.writeStorageObjects(request: $0, session: $1 as! Nakama_Api_NakamaWriteStorageObjectsSessionBase) })
          .run()
    case "/nakama.api.Nakama/WriteTournamentRecord":
      return try Nakama_Api_NakamaWriteTournamentRecordSessionBase(
        handler: handler,
        providerBlock: { try self.writeTournamentRecord(request: $0, session: $1 as! Nakama_Api_NakamaWriteTournamentRecordSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol Nakama_Api_NakamaAddFriendsSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaAddFriendsSessionBase: ServerSessionUnaryBase<Nakama_Api_AddFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaAddFriendsSession {}

internal protocol Nakama_Api_NakamaAddGroupUsersSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaAddGroupUsersSessionBase: ServerSessionUnaryBase<Nakama_Api_AddGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaAddGroupUsersSession {}

internal protocol Nakama_Api_NakamaAuthenticateCustomSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaAuthenticateCustomSessionBase: ServerSessionUnaryBase<Nakama_Api_AuthenticateCustomRequest, Nakama_Api_Session>, Nakama_Api_NakamaAuthenticateCustomSession {}

internal protocol Nakama_Api_NakamaAuthenticateDeviceSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaAuthenticateDeviceSessionBase: ServerSessionUnaryBase<Nakama_Api_AuthenticateDeviceRequest, Nakama_Api_Session>, Nakama_Api_NakamaAuthenticateDeviceSession {}

internal protocol Nakama_Api_NakamaAuthenticateEmailSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaAuthenticateEmailSessionBase: ServerSessionUnaryBase<Nakama_Api_AuthenticateEmailRequest, Nakama_Api_Session>, Nakama_Api_NakamaAuthenticateEmailSession {}

internal protocol Nakama_Api_NakamaAuthenticateFacebookSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaAuthenticateFacebookSessionBase: ServerSessionUnaryBase<Nakama_Api_AuthenticateFacebookRequest, Nakama_Api_Session>, Nakama_Api_NakamaAuthenticateFacebookSession {}

internal protocol Nakama_Api_NakamaAuthenticateGameCenterSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaAuthenticateGameCenterSessionBase: ServerSessionUnaryBase<Nakama_Api_AuthenticateGameCenterRequest, Nakama_Api_Session>, Nakama_Api_NakamaAuthenticateGameCenterSession {}

internal protocol Nakama_Api_NakamaAuthenticateGoogleSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaAuthenticateGoogleSessionBase: ServerSessionUnaryBase<Nakama_Api_AuthenticateGoogleRequest, Nakama_Api_Session>, Nakama_Api_NakamaAuthenticateGoogleSession {}

internal protocol Nakama_Api_NakamaAuthenticateSteamSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaAuthenticateSteamSessionBase: ServerSessionUnaryBase<Nakama_Api_AuthenticateSteamRequest, Nakama_Api_Session>, Nakama_Api_NakamaAuthenticateSteamSession {}

internal protocol Nakama_Api_NakamaBlockFriendsSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaBlockFriendsSessionBase: ServerSessionUnaryBase<Nakama_Api_BlockFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaBlockFriendsSession {}

internal protocol Nakama_Api_NakamaCreateGroupSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaCreateGroupSessionBase: ServerSessionUnaryBase<Nakama_Api_CreateGroupRequest, Nakama_Api_Group>, Nakama_Api_NakamaCreateGroupSession {}

internal protocol Nakama_Api_NakamaDeleteFriendsSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaDeleteFriendsSessionBase: ServerSessionUnaryBase<Nakama_Api_DeleteFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaDeleteFriendsSession {}

internal protocol Nakama_Api_NakamaDeleteGroupSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaDeleteGroupSessionBase: ServerSessionUnaryBase<Nakama_Api_DeleteGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaDeleteGroupSession {}

internal protocol Nakama_Api_NakamaDeleteLeaderboardRecordSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaDeleteLeaderboardRecordSessionBase: ServerSessionUnaryBase<Nakama_Api_DeleteLeaderboardRecordRequest, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaDeleteLeaderboardRecordSession {}

internal protocol Nakama_Api_NakamaDeleteNotificationsSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaDeleteNotificationsSessionBase: ServerSessionUnaryBase<Nakama_Api_DeleteNotificationsRequest, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaDeleteNotificationsSession {}

internal protocol Nakama_Api_NakamaDeleteStorageObjectsSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaDeleteStorageObjectsSessionBase: ServerSessionUnaryBase<Nakama_Api_DeleteStorageObjectsRequest, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaDeleteStorageObjectsSession {}

internal protocol Nakama_Api_NakamaGetAccountSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaGetAccountSessionBase: ServerSessionUnaryBase<SwiftProtobuf.Google_Protobuf_Empty, Nakama_Api_Account>, Nakama_Api_NakamaGetAccountSession {}

internal protocol Nakama_Api_NakamaGetUsersSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaGetUsersSessionBase: ServerSessionUnaryBase<Nakama_Api_GetUsersRequest, Nakama_Api_Users>, Nakama_Api_NakamaGetUsersSession {}

internal protocol Nakama_Api_NakamaHealthcheckSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaHealthcheckSessionBase: ServerSessionUnaryBase<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaHealthcheckSession {}

internal protocol Nakama_Api_NakamaImportFacebookFriendsSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaImportFacebookFriendsSessionBase: ServerSessionUnaryBase<Nakama_Api_ImportFacebookFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaImportFacebookFriendsSession {}

internal protocol Nakama_Api_NakamaJoinGroupSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaJoinGroupSessionBase: ServerSessionUnaryBase<Nakama_Api_JoinGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaJoinGroupSession {}

internal protocol Nakama_Api_NakamaJoinTournamentSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaJoinTournamentSessionBase: ServerSessionUnaryBase<Nakama_Api_JoinTournamentRequest, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaJoinTournamentSession {}

internal protocol Nakama_Api_NakamaKickGroupUsersSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaKickGroupUsersSessionBase: ServerSessionUnaryBase<Nakama_Api_KickGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaKickGroupUsersSession {}

internal protocol Nakama_Api_NakamaLeaveGroupSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaLeaveGroupSessionBase: ServerSessionUnaryBase<Nakama_Api_LeaveGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaLeaveGroupSession {}

internal protocol Nakama_Api_NakamaLinkCustomSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaLinkCustomSessionBase: ServerSessionUnaryBase<Nakama_Api_AccountCustom, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaLinkCustomSession {}

internal protocol Nakama_Api_NakamaLinkDeviceSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaLinkDeviceSessionBase: ServerSessionUnaryBase<Nakama_Api_AccountDevice, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaLinkDeviceSession {}

internal protocol Nakama_Api_NakamaLinkEmailSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaLinkEmailSessionBase: ServerSessionUnaryBase<Nakama_Api_AccountEmail, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaLinkEmailSession {}

internal protocol Nakama_Api_NakamaLinkFacebookSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaLinkFacebookSessionBase: ServerSessionUnaryBase<Nakama_Api_LinkFacebookRequest, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaLinkFacebookSession {}

internal protocol Nakama_Api_NakamaLinkGameCenterSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaLinkGameCenterSessionBase: ServerSessionUnaryBase<Nakama_Api_AccountGameCenter, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaLinkGameCenterSession {}

internal protocol Nakama_Api_NakamaLinkGoogleSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaLinkGoogleSessionBase: ServerSessionUnaryBase<Nakama_Api_AccountGoogle, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaLinkGoogleSession {}

internal protocol Nakama_Api_NakamaLinkSteamSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaLinkSteamSessionBase: ServerSessionUnaryBase<Nakama_Api_AccountSteam, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaLinkSteamSession {}

internal protocol Nakama_Api_NakamaListChannelMessagesSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaListChannelMessagesSessionBase: ServerSessionUnaryBase<Nakama_Api_ListChannelMessagesRequest, Nakama_Api_ChannelMessageList>, Nakama_Api_NakamaListChannelMessagesSession {}

internal protocol Nakama_Api_NakamaListFriendsSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaListFriendsSessionBase: ServerSessionUnaryBase<SwiftProtobuf.Google_Protobuf_Empty, Nakama_Api_Friends>, Nakama_Api_NakamaListFriendsSession {}

internal protocol Nakama_Api_NakamaListGroupsSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaListGroupsSessionBase: ServerSessionUnaryBase<Nakama_Api_ListGroupsRequest, Nakama_Api_GroupList>, Nakama_Api_NakamaListGroupsSession {}

internal protocol Nakama_Api_NakamaListGroupUsersSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaListGroupUsersSessionBase: ServerSessionUnaryBase<Nakama_Api_ListGroupUsersRequest, Nakama_Api_GroupUserList>, Nakama_Api_NakamaListGroupUsersSession {}

internal protocol Nakama_Api_NakamaListLeaderboardRecordsSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaListLeaderboardRecordsSessionBase: ServerSessionUnaryBase<Nakama_Api_ListLeaderboardRecordsRequest, Nakama_Api_LeaderboardRecordList>, Nakama_Api_NakamaListLeaderboardRecordsSession {}

internal protocol Nakama_Api_NakamaListLeaderboardRecordsAroundOwnerSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaListLeaderboardRecordsAroundOwnerSessionBase: ServerSessionUnaryBase<Nakama_Api_ListLeaderboardRecordsAroundOwnerRequest, Nakama_Api_LeaderboardRecordList>, Nakama_Api_NakamaListLeaderboardRecordsAroundOwnerSession {}

internal protocol Nakama_Api_NakamaListMatchesSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaListMatchesSessionBase: ServerSessionUnaryBase<Nakama_Api_ListMatchesRequest, Nakama_Api_MatchList>, Nakama_Api_NakamaListMatchesSession {}

internal protocol Nakama_Api_NakamaListNotificationsSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaListNotificationsSessionBase: ServerSessionUnaryBase<Nakama_Api_ListNotificationsRequest, Nakama_Api_NotificationList>, Nakama_Api_NakamaListNotificationsSession {}

internal protocol Nakama_Api_NakamaListStorageObjectsSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaListStorageObjectsSessionBase: ServerSessionUnaryBase<Nakama_Api_ListStorageObjectsRequest, Nakama_Api_StorageObjectList>, Nakama_Api_NakamaListStorageObjectsSession {}

internal protocol Nakama_Api_NakamaListTournamentsSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaListTournamentsSessionBase: ServerSessionUnaryBase<Nakama_Api_ListTournamentsRequest, Nakama_Api_TournamentList>, Nakama_Api_NakamaListTournamentsSession {}

internal protocol Nakama_Api_NakamaListTournamentRecordsSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaListTournamentRecordsSessionBase: ServerSessionUnaryBase<Nakama_Api_ListTournamentRecordsRequest, Nakama_Api_TournamentRecordList>, Nakama_Api_NakamaListTournamentRecordsSession {}

internal protocol Nakama_Api_NakamaListTournamentRecordsAroundOwnerSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaListTournamentRecordsAroundOwnerSessionBase: ServerSessionUnaryBase<Nakama_Api_ListTournamentRecordsAroundOwnerRequest, Nakama_Api_TournamentRecordList>, Nakama_Api_NakamaListTournamentRecordsAroundOwnerSession {}

internal protocol Nakama_Api_NakamaListUserGroupsSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaListUserGroupsSessionBase: ServerSessionUnaryBase<Nakama_Api_ListUserGroupsRequest, Nakama_Api_UserGroupList>, Nakama_Api_NakamaListUserGroupsSession {}

internal protocol Nakama_Api_NakamaPromoteGroupUsersSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaPromoteGroupUsersSessionBase: ServerSessionUnaryBase<Nakama_Api_PromoteGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaPromoteGroupUsersSession {}

internal protocol Nakama_Api_NakamaReadStorageObjectsSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaReadStorageObjectsSessionBase: ServerSessionUnaryBase<Nakama_Api_ReadStorageObjectsRequest, Nakama_Api_StorageObjects>, Nakama_Api_NakamaReadStorageObjectsSession {}

internal protocol Nakama_Api_NakamaRpcFuncSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaRpcFuncSessionBase: ServerSessionUnaryBase<Nakama_Api_Rpc, Nakama_Api_Rpc>, Nakama_Api_NakamaRpcFuncSession {}

internal protocol Nakama_Api_NakamaUnlinkCustomSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaUnlinkCustomSessionBase: ServerSessionUnaryBase<Nakama_Api_AccountCustom, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaUnlinkCustomSession {}

internal protocol Nakama_Api_NakamaUnlinkDeviceSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaUnlinkDeviceSessionBase: ServerSessionUnaryBase<Nakama_Api_AccountDevice, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaUnlinkDeviceSession {}

internal protocol Nakama_Api_NakamaUnlinkEmailSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaUnlinkEmailSessionBase: ServerSessionUnaryBase<Nakama_Api_AccountEmail, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaUnlinkEmailSession {}

internal protocol Nakama_Api_NakamaUnlinkFacebookSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaUnlinkFacebookSessionBase: ServerSessionUnaryBase<Nakama_Api_AccountFacebook, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaUnlinkFacebookSession {}

internal protocol Nakama_Api_NakamaUnlinkGameCenterSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaUnlinkGameCenterSessionBase: ServerSessionUnaryBase<Nakama_Api_AccountGameCenter, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaUnlinkGameCenterSession {}

internal protocol Nakama_Api_NakamaUnlinkGoogleSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaUnlinkGoogleSessionBase: ServerSessionUnaryBase<Nakama_Api_AccountGoogle, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaUnlinkGoogleSession {}

internal protocol Nakama_Api_NakamaUnlinkSteamSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaUnlinkSteamSessionBase: ServerSessionUnaryBase<Nakama_Api_AccountSteam, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaUnlinkSteamSession {}

internal protocol Nakama_Api_NakamaUpdateAccountSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaUpdateAccountSessionBase: ServerSessionUnaryBase<Nakama_Api_UpdateAccountRequest, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaUpdateAccountSession {}

internal protocol Nakama_Api_NakamaUpdateGroupSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaUpdateGroupSessionBase: ServerSessionUnaryBase<Nakama_Api_UpdateGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>, Nakama_Api_NakamaUpdateGroupSession {}

internal protocol Nakama_Api_NakamaWriteLeaderboardRecordSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaWriteLeaderboardRecordSessionBase: ServerSessionUnaryBase<Nakama_Api_WriteLeaderboardRecordRequest, Nakama_Api_LeaderboardRecord>, Nakama_Api_NakamaWriteLeaderboardRecordSession {}

internal protocol Nakama_Api_NakamaWriteStorageObjectsSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaWriteStorageObjectsSessionBase: ServerSessionUnaryBase<Nakama_Api_WriteStorageObjectsRequest, Nakama_Api_StorageObjectAcks>, Nakama_Api_NakamaWriteStorageObjectsSession {}

internal protocol Nakama_Api_NakamaWriteTournamentRecordSession: ServerSessionUnary {}

fileprivate final class Nakama_Api_NakamaWriteTournamentRecordSessionBase: ServerSessionUnaryBase<Nakama_Api_WriteTournamentRecordRequest, Nakama_Api_LeaderboardRecord>, Nakama_Api_NakamaWriteTournamentRecordSession {}

